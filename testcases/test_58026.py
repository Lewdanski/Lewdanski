# :suit_description: #58026 
# :revision_date: 25.10.2022

@pytest.mark.skip(reason="Template")
def test_50167_1(app, credo_db):
    """
    {#
        :id:                50167_1
        :priority:          Средний
        :module:            ЕФР
        :description:       Выпуск расчетной карточки. Сохранение в доп. условие USER_OPEN логина пользователя СКЗ в БИС "Форпост" при открытии контракта ФОРПОСТ. (57657)Проверка клиента в KYC(Siron), check_status = check/inconspic. Автоматическое обновление проверки результата обработки УФМ. (58026) Параметр enable_card_limit_check = "Нет", проверка на лимит не выполняется
        :precondition:      Заявка оформляется в рабочее время для роли, указанной в itwCredo-kyc.properties
        :precondition:      Пользователь авторизирован в СКЗ со всеми правами
        :precondition:      Параметры пользователя: login_forpost= UPKASSES, location_sales= Отдел розничных операций / г.Минск ул.Притыцкого 60/2, post= БАНКОВСКИЙ СЛУЖАЩИЙ, contactPhone заполнен
        :precondition:      Существующий Клиент со всеми обязательными параметрами
        :precondition:      в Siron KYC тестовый Клиент со статусом check_status = check
        :precondition:      На варианте параметр doKyc ("Проверять клиента в KYC") = да
        :precondition:      На варианте заполнен параметр kycEmailTemplate "[KYC] Текст уведомления УФМ(Siron)" = "Произошло совпадение в ЕФР со списками ${thirdPerson?request.third_person_fio:client.name} (ID ${thirdPerson?request.kycId_thirdperson:request.kycId}) при оформлении заявки ${requestId} по варианту (${product}) ${variant}. <br/>Продукт: ${request.card_variant} (${request.currency_account}) <br/><br/>Работник банка: ${user_initiator_username.name}. Телефон: ${user_initiator_username.contactPhone}ТЕСТИРОВАНИЕ"
        :precondition:      На варианте параметр needPreActualization ("Необходима предварительная актуализация клиента") = "нет"
        :precondition:      В справочнике close_card_acc_text_block «Информационные блоки ЕФР» для "Уведомления о совпадении со списками в Siron KYC" "Текст уведомления" = "Ожидайте результат проверки УФМ. Тестирование"
        :precondition:      В itwCredo-kyc.properties внесены соответствующие настройки (kyc.url, emails=credospam@itworks.by, timeout=300, workingTimeRole=front_office)
        :precondition:      На варианте "P1_A1PaymentCard (Оформление расчётной карточки)" параметр enable_card_limit_check = "Нет"
        :precondition:      На варианте "P1_A1PaymentCard (Оформление расчётной карточки)" заполнен параметр card_limit
        :precondition:      На варианте параметр needPreActualization = нет
        :source_point:      50167, 57112, 57657, 58026
        :comment:           Для полного прохождения заявки выполняется апдейт по выпущенной карточке в ФОРПОСТ с установкой  crd_embossed = 'YES' и  crd_prod_status = 'M'
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 101 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 100 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 101 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'EFR'

    VARIANT = 'P1_A1PaymentCard'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный (идентификационный) номер"
    value = '3050996C005PB7'
    # :step: нажать кнопку "Искать"
    # :step: выбрать Клиента - кликнуть по отображенной карточке тестового Клиента

    # :newpage: #######################################################################################################

    # :step: выбрать продукт на форме "Профиль клиента"
    value = 'Платежные карточки'
    # :step: выбрать вариант
    value = 'Оформление расчетной карточки'
    # :step: нажать кнопку "Выполнить"
    # :assert: Создается заявка "Платежные карточки/Оформление расчетной карточки". Статус "Начата обработка". На заявке сохранен параметр doKyc = да
    # :assert: Проверка на ограничение количества выпускаемых карточек не производится, оформление заявки продолжается
    # :step: на параметре варианта устанавливаем doKyc = нет

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров расчетной карточки" заполняем поле "Вариант продукта" выбором значения из выпадающего списка
    value = 'Расчетная карточка "Классическая""'
    # :step: Заполняем поле "Тип карточки" выбором значения из выпадающего списка (перс. карта)
    value = 'UnionPay Classic'
    # :step: Заполняем поле "Валюта счета" выбором значения из выпадающего списка
    value = 'Белорусский рубль'
    # :step: Заполняем поле "Способ получения ПИН-кода" выбором значения из выпадающего списка
    value = 'SMS-сообщение'
    # :step: Заполняем поле "Регион выдачи" выбором значения из выпадающего списка
    value = 'Минск'
    # :step: Заполняем поле "Точка выдачи" выбором значения из выпадающего списка (=location_sales пользователя)
    value = 'Отдел розничных операций / г.Минск ул.Притыцкого 60/2'
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод иных параметров платежной карточки" заполняем поле "Кодовое слово клиента"
    value = 'кодкод'
    # :step: Выбираем "Источник получения информации о продукте"
    value = 'Радиореклама'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Оформление заявления-анкеты" по ссылке "Печать Заявления-анкеты" скачиваем документ
    # :step: Устанавливаем чекбокс "Заявление-анкета оформлено"
    # :step: Нажимаем кнопку "Подтвердить'
    # :assert: Проверка на ограничение количества выпускаемых карточек не производится, оформление заявки продолжается

    # :newpage: #######################################################################################################

    # :assert: После Сохранения Клиента создается задача "Проверка клиента в KYC(Siron)" - значение doKyc = да (берется из параметров заявки).
    # :assert: задача назначена на инициатора заявки и пользователей с ролью admins
    # :assert: Перешли на форму "Проверка клиента в KYC(Siron)", на которой отображаются:
    # :assert: ИД заявки,
    # :assert: Результат проверки = "Клиент [ФИО Клиента] На проверке УФМ (произошло совпадение)",
    # :assert: активные кнопки "Обновить" и "Отмена", неактивная кнопка "Завершить",
    # :assert: текст из справочника «Информационные блоки ЕФР»  ("Ожидайте результат проверки УФМ. Тестирование.")
    # :assert: Заявка находится в статусе "Отправлена на дополнительную проверку"
    # :assert: На заявке созданы параметры kycStatus = "check", kycCompleted = "нет", kycId = ID для проверки в Siron, kycComment = "Статус check успешно установлен", kycDate = [дата_время] выполнения проверки
    # :assert: на пользователей с ролью admins и email-адреса из itwCredo-kyc.properties отправлено уведомление с темой "Совпадение в ЕФР со списками по заявке [№заявки]" и текстом из параметра на варианте параметр kycEmailTemplate ("Произошло совпадение в ЕФР со списками АБРАМЧУК АНДРЕЙКАА ЙЙЙЙЙЙЙЙЙЙЙЙЙЙЙ (ID EFR2456178_92680) при оформлении заявки 2456178 по варианту (Платежные карточки) Оформление расчетной карточки. Продукт: Расчетная карточка "Классическая"(Белорусский рубль)Работник банка: Петрукович Ольга Ивановна. Телефон: +375297222333 ТЕСТИРОВАНИЕ")
    # :assert: запускается автоматическая проверка результата обработки УФМ и обновление с учетом рабочего времени роли и интервала из itwCredo-kyc.propert (период, сек. = значению timeout)

    # :newpage: #######################################################################################################

    # :step: Меняем статус проверки Siron у клиента на "Совпадений после проверки нет" (inconspic)
    # :assert: Результат проверки на форме становится "Совпадений нет после проверки" - конечный статус KYC inconspic (автоматически по регламенту проверки, без обновления страницы с формой пользователем)
    # :assert: Кнопка "Обновить" становится неактивной, кнопка "Завершить" активируется
    # :assert: обновляются параметры заявки: kycCompleted=да, kycStatus = inconspic, kycComment = Статус inconspic успешно установлен, kycDate
    # :step: Нажимаем кнопку "Отмена"

    # :newpage: #######################################################################################################

    # :assert: переход в Профиль клиента
    # :step: Продолжаем заявку

    # :newpage: #######################################################################################################

    # :step: Нажимаем кнопку "Завершить" на форме "Проверка клиента в KYC(Siron)"
    # :assert: задача "Проверка KYC" завершается, автоматическая проверка прекращается

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров для формирования договоров" выбираем "Код доверенности"
    value = 'Доверенность №1, подразделение ORO...'
    # :step: Нажимаем кнопку "Завершить'

    # :newpage: #######################################################################################################

    # :step: На форме "Оформление договора" по ссылке "Печать договора" скачиваем договор
    # :step: Устанавливаем чекбокс "Договор оформлен"
    # :step: Устанавливаем чекбокс "Документы по заявке подготовлены"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: переход в Профиль клиента
    # :step: продолжаем тестовую заявку
    # :step: Нажимаем кнопку "Далее" на форме "Выбор получателя платежной карточки" с предустановленным значением "Владелец счета"

    # :newpage: #######################################################################################################

    # :step: На форме "Выдача платежной карточки" по ссылке "Печать расписки" скачиваем расписку
    # :step: Устанавливаем чекбокс "Расписка оформлена'
    # :step: Нажимаем кнопку "Завершить выдачу карточки'

    # :newpage: #######################################################################################################

    # :step: На форме "Подготовка документов к передаче на хранение" устанавливаем чекбокс "Документы по заявке подготовлены"
    # :step: Нажимаем кнопку "Далее"
    # :assert: В СКЗ заявка завершается исполнением, статус "Окончена обработка"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_50167_3(app, credo_db):
    """
    {#
        :id:                50167_3
        :priority:          Средний
        :module:            ЕФР
        :description:       Оформление дополнительной карточки. Проверка того, что при открытии контракта сохраняется логин форпоста пользователя в доп. условие USER_OPEN. (52885) Проверка невозможности выдачи карточки Клиенту при наличии активной кредитной заявки с неподписанными документами на изменение суммы предоставленного овердрафта, на заявке параметр «basic_crd_code» <> NULL
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      У пользователя СКЗ параметр useNewCabinet "Использование нового интерфейса" = "да"
        :precondition:      На варианте параметр needPreActualization ("Необходима предварительная актуализация клиента") = "нет"
        :precondition:      На пользователе параметры: login_forpost= UPKASSES, location_sales= Отдел розничных операций / г.Минск ул.Притыцкого 60/2, post= БАНКОВСКИЙ СЛУЖАЩИЙ.
        :precondition:      Существующий Клиент со всеми обязательными параметрами
        :precondition:      На варианте параметр needPreActualization ("Необходима предварительная актуализация клиента") = "нет"
        :precondition:      У Клиента имеется активная заявка на изменение суммы предоставленного овердрафта на продукте\варианте "Предоставление кредита\Зарплатная", текущая задача "Ввод параметров для формирования договоров" (при овердрафтном контракте доп. условие «APPL_ID_CHANGE»)
        :source_point:      50167, 52885, 57112, 57657, 58026
        :comment:           Для выполнения задачи по выдаче карточки клиенту необходимо завершить кредитную завку
        :comment:           Для возможности завершения заявки (активации карточки) выполняется апдейт карточки по номеру crd_code с установкой  crd_embossed = 'YES' и  crd_prod_status = 'M'
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 105 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 104 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 105 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'EFR'

    VARIANT = 'P3_A3AdditionalCard3'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный (идентификационный) номер"
    value = '3050996C005PB7'
    # :step: нажать кнопку "Искать"
    # :step: выбрать Клиента - кликнуть по отображенной карточке тестового Клиента

    # :newpage: #######################################################################################################

    # :step: выбрать продукт на форме "Профиль клиента"
    value = 'Платежные карточки'
    # :step: выбрать вариант
    value = 'Оформление дополнительной карточки'
    # :step: нажать кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Выбор счёта" заполняем радиобаттон выбранного карт-счета
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров дополнительной карточки" выбираем "Держателя карточки"
    value = 'Владелец счета'
    # :step: Выбираем "Тип карточки" выбором значения из выпадающего списка (перс.карта)
    value = 'MasterCard Standard PayPass Зарплатная'
    # :step: Заполняем поле "Срок действия" выбором значения из выпадающего списка
    value = 'до 31.01.2024'
    # :step: Заполняем поле "Способ получения ПИН-кода" выбором значения из выпадающего списка
    value = 'ПИН-конверт'
    # :step: Заполняем поле "Регион выдачи" выбором значения из выпадающего списка
    value = 'Минск'
    # :step: Заполняем поле "Точка выдачи" выбором значения из выпадающего списка (=location_sales пользователя)
    value = 'Отдел розничных операций / г.Минск ул.Притыцкого 60/2'
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод иных параметров дополнительной платежной карточки" заполняем поле "Кодовое слово клиента"
    value = 'кодкод'
    # :step: Выбираем "Источник получения информации о продукте"
    value = 'Радиореклама'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Оформление заявления-анкеты" по ссылке "Печать Заявления-анкеты" формируем и проверяем документ заявление-анкету
    # :step: Устанавливаем чекбокс "Заявление-анкета оформлено"
    # :step: Нажимаем кнопку "Подтвердить"

    # :newpage: #######################################################################################################

    # :step: На форме "Завершение оформления дополнительной карточки" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: В Профиле клиента Продолжаем заявку
    # :step: Нажимаем кнопку "Далее" на форме "Выбор получателя платежной карточки" с предустановленным значением "Владелец счета"

     # :newpage: #######################################################################################################

    # :step: На форме "Выдача платежной карточки" устанавливаем чекбокс "Выдача платежной карточки оформлена в заявлении-анкете"
    # :step: Нажимаем кнопку "Завершить выдачу карточки"
    # :assert: На форме "Выдача платежной карточки" отображается текст «Выдача карточки невозможна. Завершите задачу по подписанию дополнительного соглашения №(доп. условие APPL_ID_CHANGE на овердрафтном контракте)»
    # :assert: Кнопка "Завершить выдачу карточки" заблокирована, кнопка "Отмена" активна
    # :step: Нажимаем кнопку "Отмена"

    # :newpage: #######################################################################################################

    # :assert: Осуществляется переход в Профиль Клиента
    # :step: Завершаем кредитную заявку №(доп. условие APPL_ID_CHANGE на овердрафтном контракте)
    # :step: Нажимаем "Продолжить" на текущей заявке
    # :step: На форме "Выдача платежной карточки" устанавливаем чекбокс "Выдача платежной карточки оформлена в заявлении-анкете"
    # :step: Нажимаем кнопку "Завершить выдачу карточки"

    # :newpage: #######################################################################################################

    # :step: На форме "Подготовка документов к передаче на хранение" устанавливаем чекбокс "Документы по заявке подготовлены"
    # :step: Нажимаем кнопку "Далее"
    # :assert: В СКЗ заявка завершается исполнением, статус "Окончена обработка"
    # :assert: В Форпост на открытом карточном договоре доп. условиe USER_OPEN = UPKASSES (frf_142)

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_54353_1(app, credo_db):
    """
    {#
        :id:                54353_1
        :priority:          Средний
        :module:            Ядро
        :description:       Проверка в справочнике "Информационные блоки ЕФР" (close_card_acc_text_block) наличия и заполнения по умолчанию новых строк по сканированию с идентификаторами блока: hint_find_form, hint_sopr_doc, name_sopr_doc, sopr_doc_start_scan, _Scanning, _Export, wait_end_scan, cancel_scan, error_scan, next_page_scan, fail_dul_scan, error_scan_code_3, error_scan_code_4. (57563) Проверка "Информационные блоки ЕФР" (close_card_acc_text_block) наличия и заполнения по умолчанию новых строк по операциям с базовыми счетами с идентификаторами блока: error_code_fio, error_code_other. (57657)Новые строки для процесса Проверка KYC. (58026) Добавление новых строк справочника по лимитам карт. (57775) Добавление в справочник нового блока "_RenewalAddLess10Months".
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      У пользователя СКЗ параметр useNewCabinet ("Использование нового интерфейса") = "нет"
        :source_point:      54353, 54355, 54868, 56105, 57563, 57657, 57775, 58026
        :comment:           
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 101 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 100 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 100 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = ''

    VARIANT = ''


    # :newpage: #######################################################################################################

    # :step: Заходим в "Меню"\"Список справочников"
    # :step: Заходим в список строк справочника close_card_acc_text_block "Информационные блоки ЕФР"
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "hint_find_form" и наименованием «(Поиск карточки клиента в учетной системе Банка) Подсказка на форме поиска Клиента» и с текстом уведомления «Для поиска клиента укажите критерий поиска, либо выполните сканирование документа, удостоверяющего личность клиента, начиная с последней страницы»
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "hint_sopr_doc" и наименованием «(Сканирование) Подсказка для сопроводительного документа» с текстом уведомления «Чтобы отсканировать сопроводительный документ клиента поместите его в сканер и укажите выбранный способ сканирования:<br/>- Лоток<br/>- Планшет<br/>Внимание! В лоток допустимо помещать только расшитые документы. Для сканирования сшитых сопроводительных документов, которые нельзя расшить воспользуйтесь планшетным способом сканирования.», где <br/> - переход на новую строку.
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "name_sopr_doc" и наименованием «(Сканирование) Название сопроводительного документа» с текстом уведомления «Введите название сопроводительного документа»
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "sopr_doc_start_scan" и наименованием «(Сканирование) Текст при сканировании сопроводительного документа» с текстом уведомления «Запущен процесс сканирования сопроводительного документа. После окончания выполнения нажмите на кнопку "Завершить"<br/>В случае необходимости сканирования документа в несколько этапов, пожалуйста, дождитесь завершения сканирования первой части, затем, поместите следующую часть документа в сканер, используя выбранный ранее способ сканирования и нажмите на кнопку "Продолжить сканирование". После окончания выполнения процесса сканирования документа нажмите на кнопку "Завершить".», где <br/> - переход на новую строку.
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "_Scanning" и наименованием «(Сканирование) Ошибка получения сопроводительного документа» с текстом уведомления «Не удалось получить сопроводительный документ».
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "_Export" и наименованием «(Сканирование) Ошибка экспорта документов» с текстом уведомления «Не удалось экспортировать сопроводительный документ».
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "wait_end_scan" и наименованием «(Сканирование) Ожидания завершения сканирования» с текстом уведомления «Пожалуйста, подождите. Запущен процесс сканирования.».
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "cancel_scan" и наименованием «(Сканирование) Отмена сканирования» с текстом уведомления «Вы действительно хотите прервать процесс сканирования документа? Данные не будут сохранены!».
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "error_scan" и наименованием «(Сканирование) Ошибка в процессе сканирования» с текстом уведомления «Во время сканирования произошла техническая ошибка. Код».
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "next_page_scan" и наименованием «(Сканирование) Сканирование следующей страницы» с текстом уведомления «Отсканировать следующую страницу документа?».
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "fail_dul_scan" и наименованием «(Сканирование) Не удалось получить распознанный ДУЛ» с текстом уведомления «Результат распознавания не получен».
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "error_scan_code_3" и наименованием «(Сканирование) Ошибка в процессе сканирования код 3» с текстом уведомления «Во время сканирования произошла техническая ошибка. Код 3. Не запущена станция сканирования».
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "error_scan_code_4" и наименованием «(Сканирование) Ошибка в процессе сканирования код 4» с текстом уведомления «Во время сканирования произошла техническая ошибка. Код 4. Пожалуйста, проверьте, включен ли сканер».
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "error_code_fio" и наименованием «(Операции с базовыми счетами) Необходимость сверки ФИО» с текстом уведомления «Выполните сверку ФИО с данными, указанными в документе, удостоверяющем личность физического лица. В случае соответствия данных нажмите «Подтвердить», в случае наличия расхождений нажмите «Изменить данные».»
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "error_code_other" и наименованием «(Операции с базовыми счетами) Подсказка для сотрудника о дальнейших действиях» с текстом уведомления «Текст с инструкцией для сотрудника»
    # :assert: добавлена запись для хранения уведомления о совпадении со списками в Siron KYC: строка "Уведомления о совпадении со списками в Siron KYC" с Текстом уведомления "Ожидайте результат проверки УФМ.<br/>Режим работы УФМ:<br/>Пн-Чт: 08:30 – 17:30*<br/>Пт: 08:30 – 16:15*.<br/>Сб-Вскр – выходные.<br/>*в предпраздничные дни режим работы сокращен на 1 час.", процесс "Проверка KYC".
    # :assert: добавлена запись для хранения уведомления о блокировке продукта в результате проверки в Siron KYC: строка "Уведомление о блокировке продукта в результате проверки в Siron KYC" с Текстом уведомления "УФМ принято решение о запрете на установление договорных отношений.<br/>Ожидайте уведомление по электронной почте.", процесс "Проверка KYC".
    # :assert: В справочнике присутствует cтрока "(Выпуск ДБО и ЕФР)Уведомление о достижении максимального количества активных карточек" с текстом "Достигнуто ограничение максимального количество карточек. Для выпуска новых карточек, закройте текущие неиспользуемые карточки."
    # :assert: В справочнике присутствует cтрока "(Перевыпуск ДБО и ЕФР)Уведомление о достижении максимального количества активных карточек" с текстом "Достигнуто ограничение максимального количество карточек. Для перевыпуска новых карточек, закройте текущие неиспользуемые карточки."
    # :assert: В справочнике "Информационные блоки ЕФР" присутствует строка с идентификатором блока "_RenewalAddLess10Months" и наименованием «(Продление доп.карты) Выбор счета, срок действия основной карты истекает менее чем через 10 месяцев» и с текстом уведомления «Для продления срока действия дополнительной карты необходимо первоначально осуществить продление основной карты по данному карточному контракту»

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_54353_3(app, credo_db):
    """
    {#
        :id:                54353_3
        :priority:          Средний
        :module:            Ядро
        :description:       На продукте EFR (Платежные карточки): проверка переименования параметра "Логин инициатора в системе форпост" (initiator_login_forpost), проверка удаления параметров с мнемоникой %Scan% и %Sopr%. (58026) Проверка добавления новых параметров card_limit и enable_card_limit_check
        :precondition:      У пользователя СКЗ параметр useNewCabinet ("Использование нового интерфейса") = "нет"
        :source_point:      54353, 58026
        :comment:           Продукт\Вариант СКЗ "Платежные карточки"\"Оформление расчетной карточки"
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.04.2021
        :client_env:        Google Chrome 91 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 89 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 91 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = ''

    VARIANT = ''


    # :newpage: #######################################################################################################

    # :step: В СКЗ заходим в список параметров продукта EFR (Платежные карточки)

    # :newpage: #######################################################################################################

    # :assert: В списке параметров продукта содержится параметр с мнемоникой initiator_login_forpost и наименованием "Логин инициатора". Параметр с мнемоникой "Логин инициатора в системе форпост" отсутствует
    # :assert: В списке параметров продукта отсутствуют следующие параметры: Timer_Scan (Периодичность обращения к Smartcapture), Timer_Error_Scan (Количество повторения обращений к сканеру при возникновении ошибки), Text_Error_Scan (Шаблон сообщения об ошибке в процессе сканирования документа, удостоверяющего личность), ErrorCode_Scan (Код ошибки при сканировании), ErrorText_Scan (Текст ошибки при сканировании), DocTypeСhoiceScan (Выбранный тип документа (Сканирование)), DocTypeScanEnd (Отсканированный тип документа), ErrorCodeSopr (Код ошибки при сканировании сопроводительного документа), ErrorTextSopr (Текст ошибки при сканировании сопроводительного документа), UsedScannerTypes (Используемые типы сканера), SoprDocsNames (Наименование отсканированных сопроводительных документов), DisplayErrorsScanning (Отображение на форме реквизитов клиента результата проверки от Smartcapture)
    # :assert: На продукте создан настроечный логический параметр enable_card_limit_check (Включение проверки на лимит карточек) с значением "Да"
    # :assert: На продукте создан настроечный числовой параметр card_limit (Лимит количества карт для выпуска\перевыпуска) с значением "30"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_57368_5(app, credo_db):
    """
    {#
        :id:                57368_5
        :priority:          Средний
        :module:            ЕФР
        :description:       Проверка сохранения клиента в ЕРК, сохранение сессии и отправка данных на контент-сервер в заявке использующей сканирование. Перевыпуск основной персонифицированной расчетной карточки на аналогичную(Вариант P4_A4ReissueCard4). (58026) Параметр enable_card_limit_check = "Нет", проверка на лимит не выполняется
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Параметр пользователя using_scanner (Доступность сканирования) = "да"
        :precondition:      Тестовый клиент существует в учетной системе банка, все ключевые данные присутствуют
        :precondition:      Станция администратора сканирования, внешние серверы SmartCapture и контент-сервер запущены
        :precondition:      Справочник «Типы документов удостоверяющих личность для выбора при сканировании» (docTypesForScan) заполнен
        :precondition:      В itwCredo-scanner.properties прописаны scanner.proxy.host, scanner.proxy.port
        :precondition:      Параметр Клиента doActualization = да
        :precondition:      У Клиента есть карточный контракт для перевыпуска персонифицированной карточки
        :precondition:      На варианте параметр pinCodeMethodsPersCard = ПИН-конверт SMS-сообщение
        :precondition:      FATCA-идентификации клиента не требуется
        :precondition:      В файле itwCredo-scanner.properties присутствует параметр с путём к файлу "fake_response scanner.fakeresponsefile=d:/fake_response.xml"
        :precondition:      У клиента имеются активные расчётные карты числом превышающим значение параметра card_limit
        :precondition:      На варианте "P4_A4ReissueCard4 (Перевыпуск основной расчетной карточки)" параметр enable_card_limit_check = "Нет"
        :precondition:      На варианте "P4_A4ReissueCard4 (Перевыпуск основной расчетной карточки)" заполнен параметр card_limit
        :precondition:      На варианте параметр needPreActualization = нет
        :source_point:      57368, 58026
        :comment:           Для эмуляции получения данных паспорта от сканера используем fake_response
        :tc_type:           +
        :db_env:            База: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Chrome 100 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 98 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 100 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'EFR'

    VARIANT = 'P4_A4ReissueCard4'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" нажимаем кнопку-список «Сканировать документ»
    # :step: Из списка ДУЛ кнопки «Сканировать документ» выбираем сканируемый документ
    value = 'Паспорт гражданина РБ'

    # :newpage: #######################################################################################################

    # :step: В диалоговом окне с предложением отсканировать следующую страницу документа нажимаем кнопку "Да"

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" с результатами поиска нажимаем на найденную краткую карточку клиента

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Платежные карточки'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Перевыпуск основной расчетной карточки'
    # :step: Нажимаем кнопку "Выполнить"
    # :assert: Проверка на ограничение количества выпускаемых карточек не производится, оформление заявки продолжается

    # :newpage: #######################################################################################################

    # :step: Нажимаем кнопку "Далее" на форме "Реквизиты клиента"

    # :newpage: #######################################################################################################

    # :step: На форме "ВЫБОР СЧЕТА КЛИЕНТА ПРИ ПЕРЕВЫПУСКЕ ОСНОВНОЙ ПЛАТЕЖНОЙ КАРТОЧКИ" выбираем радиобаттон со счетом, по которому необходимо перевыпустить основную платежную карточку.
    value = 'Номер счета: BY37OLMP30140900000602821752'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ВВОД ПАРАМЕТРОВ ПЕРЕВЫПУСКА ОСНОВНОЙ ПЛАТЕЖНОЙ КАРТОЧКИ" заполняем поле "Причина перевыпуска"
    value = 'Техническая неисправность карточки'
    # :step: Заполняем поле "Вариант Продукта"
    value = 'Расчетная карточка "Классическая"'
    # :step: Заполняем поле "Тип карточки"
    value = 'Visa CashAlot PayWave'
    # :step: Заполняем поле "Изменение срока действия"
    value = 'Без изменения срока действия'
    # :step: Заполняем поле "Регион выдачи", соблюдая условие - точка выдачи совпадает с точкой продаж
    value = 'Минск'
    # :step: Заполняем поле "Точка выдачи", соблюдая условие - точка выдачи совпадает с точкой продаж
    value = 'Отдел розничных операций / г.Минск ул.Притыцкого 60/2'
    # :step: Заполняем поле "Способ получения ПИН-кода"
    value = 'SMS-сообщение'
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ВВОД ИНЫХ ПАРАМЕТРОВ ПЛАТЕЖНОЙ КАРТОЧКИ" заполняем "Кодовое слово клиента"
    value = 'КОДКОД'
    # :step: Заполняем "Источник получения информации о продукте"
    value = 'Радиореклама'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ОФОРМЛЕНИЕ ЗАЯВЛЕНИЯ-АНКЕТЫ" нажимаем "Печать Заявления-анкеты"
    # :step: Заполняем чекбокс "Заявление-анкета оформлено"
    # :step: Нажимаем кнопку "Подтвердить"
    # :assert: Проверка на ограничение количества выпускаемых карточек не производится, оформление заявки продолжается

    # :newpage: #######################################################################################################

    # :step: Нажимаем кнопку "Далее" на форме "СВЕДЕНИЯ О КОНТРАКТЕ"

    # :newpage: #######################################################################################################

    # :step: Нажимаем кнопку "Далее" на форме "ВЫБОР ПОЛУЧАТЕЛЯ ПЛАТЕЖНОЙ КАРТОЧКИ"

    # :newpage: #######################################################################################################

    # :step: На форме "ВЫДАЧА ПЛАТЕЖНОЙ КАРТОЧКИ" устанавливаем чекбокс "Выдача платежной карточки оформлена в заявлении-анкете"
    # :step: Нажимаем кнопку "Завершить выдачу карточки"

    # :newpage: #######################################################################################################

    # :step: На форме "ПОДГОТОВКА ДОКУМЕНТОВ К ПЕРЕДАЧЕ НА ХРАНЕНИЕ" устанавливаем чекбокс "Документы по заявке подготовлены"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Заявка в статусе "Карточка выдана"
    # :assert: В истории выполнения процесса по заявке время создания записи "Сохранение сессии и отправка данных на контент-сервер" = 14:22:07
    # :assert: В истории выполнения процесса по заявке время окончания записи "Сохранение сессии и отправка данных на контент-сервер" = 14:22:10
    # :assert: В истории выполнения процесса по заявке время создания записи "Сохранение данных клиента" = 14:22:17
    # :assert: В истории выполнения процесса по заявке время окончания записи "Сохранение данных клиента" = 14:22:21
    # :assert: В истории выполнения процесса по заявке сначала выполняется блок «Сохранение сессии и отправка данных на контент-сервер», затем блок сохранения клиента в ЕРК

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_58026_2(app, credo_db):
    """
    {#
        :id:                58026_2
        :priority:          Средний
        :module:            ЕФР
        :description:       Оформление расчётной карточки. Параметр enable_card_limit_check = "Да" - анализ и проверка на ограничение количества карточек происходит.
        :precondition:      Пользователь petrukovich авторизирован в СКЗ со всеми правами
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      У клиента имеются активных БПК количеством более, чем значение параметра card_limit на варианте, в том числе и карточки оформленные на Клиента, как на третье лицо
        :precondition:      У клиента имеется 1 расчётная карта со статусом "Задолженность" в forpost
        :precondition:      У клиента имеется 1 кредитная карта со статусом "Персонализация" в forpost
        :precondition:      У клиента имеется 1 зарплатная карта со статусом "Не обслуживается" в forpost
        :precondition:      У клиента имеется 1 расчётная карта со статусом "Украдена" в forpost
        :precondition:      У клиента имеется 1 расчётная карта со статусом "Утеряна" в forpost
        :precondition:      У клиента имеется 1 расчётная карта со статусом "В стоп списке" в forpost
        :precondition:      У клиента имеется 1 расчётная карта со статусом "Изъята" в forpost
        :precondition:      У клиента имеется, как минимум, 1 карточный контракт с активной карточкой, где он не является картодержателем
        :precondition:      На варианте "P1_A1PaymentCard (Оформление расчётной карточки)" параметр enable_card_limit_check = "Да"
        :precondition:      На варианте "P1_A1PaymentCard (Оформление расчётной карточки)" параметр card_limit = "2"
        :precondition:      В справочнике "Информационные блоки ЕФР" (close_card_acc_text_block) заполнен "Текст уведомления" для строки "(Выпуск ДБО и ЕФР)Уведомление о достижении максимального количества активных карточек"
        :precondition:      На варианте параметр needPreActualization = нет
        :precondition:      У пользователя levdanskij есть только роль admins
        :precondition:      У пользователя maslov есть только роль front_office
        :precondition:      У пользователя semenov отсутствуют роли admins и front_office
        :source_point:      58026
        :comment:           Для полного прохождения заявки выполняется апдейт по выпущенной карточке в ФОРПОСТ с установкой  crd_embossed = 'YES' и  crd_prod_status = 'M'
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 104 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 104 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 104 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'EFR'

    VARIANT = 'P1_A1PaymentCard'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '7838713A440PB9'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Платёжные карточки'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Оформление расчётной карточки'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :assert: Переход на форму "Ошибка ограничения на количество возможных выпускаемых БПК" с текстом ошибки из справочника close_card_acc_text_block для "(Выпуск ДБО и ЕФР)Уведомление о достижении максимального количества активных карточек" (Достигнуто ограничение максимального количество карточек. Для выпуска новых карточек, закройте текущие неиспользуемые карточки.)
    # :assert: Задача с ошибкой доступна пользователям с ролью "admins" и\или "front_office" (petrukovich, levdanskij, maslov - доступна, semenov - недоступна)
    # :assert: В request.log логируются данные проверки (количество активных карт, лимит, результат проверки)
    # :step: В Форпост устанавливаем активным карточкам Клиента статус != "A", чтобы общее количество активных карточек для котрорых Клиент является картодержателем было = параметру card_limit
    # :step: Нажимаем кнопку "Завершить"
    # :assert: Проверка повторяется - достигнуто ограничение максимального количество карточек. Остаемся на форме "Ошибка ограничения на количество возможных выпускаемых БПК"
    # :assert: В request.log логируются данные проверки (количество активных карт, лимит, результат проверки)
    # :step: Нажимаем кнопку "Отмена"

    # :newpage: #######################################################################################################

    # :assert: Выполнился переход в профиль клиента
    # :step: В Форпост устанавливаем активным карточкам Клиента статус != "A", чтобы общее количество активных карточек для котрорых Клиент является картодержателем было < параметр card_limit
    # :step: На задаче с ошибкой нажимаем "Продолжить"

    # :newpage: #######################################################################################################

    # :step: На форме "Ошибка ограничения на количество возможных выпускаемых БПК" нажимаем кнопку "Завершить"
    # :assert: Оформление заявки продолжается, в request.log логируется данные проверки (количество активных карт, лимит, результат проверки)

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров расчётной карточки" выбираем "Вариант продукта"
    value = 'Расчётная карточка "Классическая"'
    # :step: Выбираем "Тип карточки"
    value = 'Visa CashAlot PayWave'
    # :step: Выбираем "Способ получения ПИН-кода"
    value = 'ПИН-конверт'
    # :step: Выбираем "Регион выдачи"
    value = 'Минск'
    # :step: Выбираем "Точка выдачи"
    value = 'Отдел розничных операций /г.Минск ул.Притыцкого 60/2'
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ВВОД ИНЫХ ПАРАМЕТРОВ ПЛАТЕЖНОЙ КАРТОЧКИ" заполняем "Кодовое слово клиента"
    value = 'Pass'
    # :step: Выбираем "Источник получения информации о продукте"
    value = 'Сайт банка'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ОФОРМЛЕНИЕ ЗАЯВЛЕНИЯ-АНКЕТЫ" устанавливаем чек-бокс "Заявление-анкета оформлено"
    # :step: Устанавливаем одной из неактивых карточек Клиента статус "Активная" в Forpost
    # :step: Нажимаем кнопку "Подтвердить"

    # :newpage: #######################################################################################################

    # :assert: Переход на форму "Ошибка ограничения на количество возможных выпускаемых БПК" с текстом ошибки из справочника close_card_acc_text_block для "(Выпуск ДБО и ЕФР)Уведомление о достижении максимального количества активных карточек" (Достигнуто ограничение максимального количество карточек. Для выпуска новых карточек, закройте текущие неиспользуемые карточки.)
    # :step: Устанавливаем одной из активных карт Клиента статус != "A" в Forpost
    # :step: Нажимаем кнопку "Завершить"
    # :assert: Оформление заявки продолжается, в request.log логируется данные проверки (количество активных карт, лимит, результат проверки)

    # :newpage: #######################################################################################################

    # :step: На форме "ВВОД ПАРАМЕТРОВ ДЛЯ ФОРМИРОВАНИЯ ДОГОВОРОВ" выбираем "Код доверенности"
    value = 'Доверенность №1, подразделение ORO, FIO200165721257'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: На форме "ОФОРМЛЕНИЕ ДОГОВОРА" устанавливаем чек-бокс "Договор оформлен"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: В списке задач на задаче "Выбор получателя платёжной карточки" по тестовой заявке нажимаем кнопку "Продолжить"

    # :newpage: #######################################################################################################

    # :step: На форме "ВЫБОР ПОЛУЧАТЕЛЯ ПЛАТЕЖНОЙ КАРТОЧКИ" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ВЫДАЧА ПЛАТЕЖНОЙ КАРТОЧКИ" устанавливаем чек-бокс "Выдача платежной карточки оформлена в заявлении-анкете"
    # :step: Нажимаем кнопку "Завершить выдачу карточки"

    # :newpage: #######################################################################################################

    # :step: На форме "ПОДГОТОВКА ДОКУМЕНТОВ К ПЕРЕДАЧЕ НА ХРАНЕНИЕ" устанавливаем чек-бокс "Документы по заявке подготовлены"
    # :step: Нажимаем кнопку "Далее"
    # :assert: Заявка завершается исполнением

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_58026_5(app, credo_db):
    """
    {#
        :id:                58026_5
        :priority:          Средний
        :module:            ЕФР
        :description:       Оформление дополнительной карточки. Параметр enable_card_limit_check = "Да" - анализ и проверка на ограничение количества карточек происходит.
        :precondition:      Пользователь petrukovich авторизирован в СКЗ со всеми правами
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      У клиента имеются активных БПК количеством более, чем значение параметра card_limit на варианте, в том числе и карточки оформленные на Клиента, как на третье лицо
        :precondition:      У клиента имеется 1 расчётная карта со статусом "Задолженность" в forpost
        :precondition:      У клиента имеется 1 кредитная карта со статусом "Персонализация" в forpost
        :precondition:      У клиента имеется 1 зарплатная карта со статусом "Не обслуживается" в forpost
        :precondition:      У клиента имеется 1 расчётная карта со статусом "Украдена" в forpost
        :precondition:      У клиента имеется 1 расчётная карта со статусом "Утеряна" в forpost
        :precondition:      У клиента имеется 1 расчётная карта со статусом "В стоп списке" в forpost
        :precondition:      У клиента имеется 1 расчётная карта со статусом "Изъята" в forpost
        :precondition:      У клиента имеется, как минимум, 1 карточный контракт с активной карточкой, где он не является картодержателем
        :precondition:      На варианте "P3_A3AdditionalCard3 (Оформление дополнительной карточки)" параметр enable_card_limit_check = "Да"
        :precondition:      На варианте "P3_A3AdditionalCard3 (Оформление дополнительной карточки)" параметр card_limit = "2"
        :precondition:      В справочнике "Информационные блоки ЕФР" (close_card_acc_text_block) заполнен "Текст уведомления" для строки "(Выпуск ДБО и ЕФР)Уведомление о достижении максимального количества активных карточек"
        :precondition:      На варианте параметр needPreActualization = нет
        :precondition:      У пользователя levdanskij есть только роль admins
        :precondition:      У пользователя maslov есть только роль front_office
        :precondition:      У пользователя semenov отсутствуют роли admins и front_office
        :source_point:      58026
        :comment:           Для полного прохождения заявки выполняется апдейт по выпущенной карточке в ФОРПОСТ с установкой  crd_embossed = 'YES' и  crd_prod_status = 'M'
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 104 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 104 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 104 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'EFR'

    VARIANT = 'P3_A3AdditionalCard3'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '7838713A440PB9'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Платёжные карточки'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Оформление дополнительной карточки'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :assert: Переход на форму "Ошибка ограничения на количество возможных выпускаемых БПК" с текстом ошибки из справочника close_card_acc_text_block для "(Выпуск ДБО и ЕФР)Уведомление о достижении максимального количества активных карточек" (Достигнуто ограничение максимального количество карточек. Для выпуска новых карточек, закройте текущие неиспользуемые карточки.)
    # :assert: Задача с ошибкой доступна пользователям с ролью "admins" и\или "front_office" (petrukovich, levdanskij, maslov - доступна, semenov - недоступна)
    # :assert: В request.log логируются данные проверки (количество активных карт, лимит, результат проверки)
    # :step: В Форпост устанавливаем активным карточкам Клиента статус != "A", чтобы общее количество активных карточек для котрорых Клиент является картодержателем было = параметру card_limit
    # :step: Нажимаем кнопку "Завершить"
    # :assert: Проверка повторяется - достигнуто ограничение максимального количество карточек. Остаемся на форме "Ошибка ограничения на количество возможных выпускаемых БПК"
    # :assert: В request.log логируются данные проверки (количество активных карт, лимит, результат проверки)
    # :step: Нажимаем кнопку "Отмена"

    # :newpage: #######################################################################################################

    # :assert: Выполнился переход в профиль клиента
    # :step: В Форпост устанавливаем активным карточкам Клиента статус != "A", чтобы общее количество активных карточек для котрорых Клиент является картодержателем было < параметр card_limit
    # :step: На задаче с ошибкой нажимаем "Продолжить"

    # :newpage: #######################################################################################################

    # :step: На форме "Ошибка ограничения на количество возможных выпускаемых БПК" нажимаем кнопку "Завершить"
    # :assert: Оформление заявки продолжается, в request.log логируется данные проверки (количество активных карт, лимит, результат проверки)

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Выбор счёта" выбираем счёт, по которому необходимо выпустить дополнительную карточку
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров дополнительной карточки" выбираем держателя карточки
    value = 'Владелец счёта'
    # :step: Выбираем "Тип карточки"
    value = 'Visa CashAlot PayWave'
    # :step: Выбираем "Способ получения ПИН-кода"
    value = 'ПИН-конверт'
    # :step: Выбираем "Регион выдачи"
    value = 'Минск'
    # :step: Выбираем "Точка выдачи"
    value = 'Отдел розничных операций / г.Минск ул.Притыкого 60/2'
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ВВОД ИНЫХ ПАРАМЕТРОВ ПЛАТЕЖНОЙ КАРТОЧКИ" заполняем "Кодовое слово клиента"
    value = 'Pass'
    # :step: Выбираем "Источник получения информации о продукте"
    value = 'Сайт банка'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ОФОРМЛЕНИЕ ЗАЯВЛЕНИЯ-АНКЕТЫ" устанавливаем чек-бокс "Заявление-анкета оформлено"
    # :step: Устанавливаем одной из неактивых карточек Клиента статус "Активная" в Forpost
    # :step: Нажимаем кнопку "Подтвердить"

    # :newpage: #######################################################################################################

    # :assert: Переход на форму "Ошибка ограничения на количество возможных выпускаемых БПК" с текстом ошибки из справочника close_card_acc_text_block для "(Выпуск ДБО и ЕФР)Уведомление о достижении максимального количества активных карточек" (Достигнуто ограничение максимального количество карточек. Для выпуска новых карточек, закройте текущие неиспользуемые карточки.)
    # :step: Устанавливаем одной из активных карт Клиента статус != "A" в Forpost
    # :step: Нажимаем кнопку "Завершить"
    # :assert: Оформление заявки продолжается, в request.log логируется данные проверки (количество активных карт, лимит, результат проверки)

    # :newpage: #######################################################################################################

    # :step: На форме "ОФОРМЛЕНИЕ ДОГОВОРА" устанавливаем чек-бокс "Договор оформлен"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: В списке задач на задаче "Выбор получателя платёжной карточки" по тестовой заявке нажимаем кнопку "Продолжить"

    # :newpage: #######################################################################################################

    # :step: На форме "ВЫБОР ПОЛУЧАТЕЛЯ ПЛАТЕЖНОЙ КАРТОЧКИ" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ВЫДАЧА ПЛАТЕЖНОЙ КАРТОЧКИ" устанавливаем чек-бокс "Выдача платежной карточки оформлена в заявлении-анкете"
    # :step: Нажимаем кнопку "Завершить выдачу карточки"

    # :newpage: #######################################################################################################

    # :step: На форме "ПОДГОТОВКА ДОКУМЕНТОВ К ПЕРЕДАЧЕ НА ХРАНЕНИЕ" устанавливаем чек-бокс "Документы по заявке подготовлены"
    # :step: Нажимаем кнопку "Далее"
    # :assert: Заявка завершается исполнением

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_58026_8(app, credo_db):
    """
    {#
        :id:                58026_8
        :priority:          Средний
        :module:            ЕФР
        :description:       Перевыпуск основной расчётной карточки. Параметр enable_card_limit_check = "Да" - анализ и проверка на ограничение количества карточек происходит.
        :precondition:      Пользователь petrukovich авторизирован в СКЗ со всеми правами
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      У клиента имеются активных БПК количеством более, чем значение параметра card_limit на варианте, в том числе и карточки оформленные на Клиента, как на третье лицо
        :precondition:      У клиента имеется 1 расчётная карта со статусом "Задолженность" в forpost
        :precondition:      У клиента имеется 1 кредитная карта со статусом "Персонализация" в forpost
        :precondition:      У клиента имеется 1 зарплатная карта со статусом "Не обслуживается" в forpost
        :precondition:      У клиента имеется 1 расчётная карта со статусом "Украдена" в forpost
        :precondition:      У клиента имеется 1 расчётная карта со статусом "Утеряна" в forpost
        :precondition:      У клиента имеется 1 расчётная карта со статусом "В стоп списке" в forpost
        :precondition:      У клиента имеется 1 расчётная карта со статусом "Изъята" в forpost
        :precondition:      У клиента имеется, как минимум, 1 карточный контракт с активной карточкой, где он не является картодержателем
        :precondition:      У пользователя levdanskij есть только роль admins
        :precondition:      У пользователя maslov есть только роль front_office
        :precondition:      У пользователя semenov отсутствуют роли admins и front_office
        :precondition:      На варианте "P4_A4ReissueCard4 (Перевыпуск основной расчетной карточки)" параметр enable_card_limit_check = "Да"
        :precondition:      На варианте "P4_A4ReissueCard4 (Перевыпуск основной расчетной карточки)" параметр card_limit = "2"
        :precondition:      В справочнике "Информационные блоки ЕФР" (close_card_acc_text_block) заполнен "Текст уведомления" для строки "(Перевыпуск ДБО и ЕФР)Уведомление о достижении максимального количества активных карточек" с текстом "Достигнуто ограничение максимального количество карточек. Для перевыпуска новых карточек, закройте текущие неиспользуемые карточки."
        :precondition:      На варианте параметр needPreActualization = нет
        :source_point:      58026
        :comment:           Для полного прохождения заявки выполняется апдейт по выпущенной карточке в ФОРПОСТ с установкой  crd_embossed = 'YES' и  crd_prod_status = 'M'
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 104 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 104 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 104 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'EFR'

    VARIANT = 'P4_A4ReissueCard4'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '7838713A440PB9'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Платёжные карточки'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Перевыпуск основной расчетной карточки'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :assert: Переход на форму "Ошибка ограничения на количество возможных выпускаемых БПК" с текстом ошибки из справочника close_card_acc_text_block для "(Перевыпуск ДБО и ЕФР)Уведомление о достижении максимального количества активных карточек" с текстом "Достигнуто ограничение максимального количество карточек. Для перевыпуска новых карточек, закройте текущие неиспользуемые карточки.
    # :assert: Задача с ошибкой доступна пользователям с ролью "admins" и\или "front_office" (petrukovich, levdanskij, maslov - доступна, semenov - недоступна)
    # :assert: В request.log логируются данные проверки (количество активных карт, лимит, результат проверки)
    # :step: Нажимаем кнопку "Завершить"
    # :assert: Проверка повторяется - достигнуто ограничение максимального количество карточек. Остаемся на форме "Ошибка ограничения на количество возможных выпускаемых БПК"
    # :assert: В request.log логируются данные проверки (количество активных карт, лимит, результат проверки)
    # :step: Нажимаем кнопку "Отмена"

    # :newpage: #######################################################################################################

    # :assert: Выполнился переход в профиль клиента
    # :step: В Форпост устанавливаем активным карточкам Клиента статус != "A", чтобы общее количество активных карточек для котрорых Клиент является картодержателем было = параметру card_limit
    # :step: На задаче с ошибкой нажимаем "Продолжить"

    # :newpage: #######################################################################################################

    # :step: На форме "Ошибка ограничения на количество возможных выпускаемых БПК" нажимаем кнопку "Завершить"
    # :assert: Оформление заявки продолжается, в request.log логируется данные проверки (количество активных карт, лимит, результат проверки)

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ВЫБОР СЧЕТА КЛИЕНТА ПРИ ПЕРЕВЫПУСКЕ ОСНОВНОЙ ПЛАТЕЖНОЙ КАРТОЧКИ" выбираем счёт, по которому необходимо перевыпустить основную платежную карточку
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров перевыпуска основной платежной карточки" выбираем причину перевыпуска
    value = 'По инициативе клиента'
    # :step: Выбираем "Вариант продукта"
    value = 'Расчётная карточка "Премиальная" скидка 60%'
    # :step: Выбираем "Тип карточки"
    value = 'MasterCard Gold PayPass'
    # :step: Выбираем "Изменение срока действия"
    value = 'Без изменения срока действия'
    # :step: Выбираем "Способ получения ПИН-кода"
    value = 'ПИН-конверт'
    # :step: Выбираем "Регион выдачи"
    value = 'Минск'
    # :step: Выбираем "Точка выдачи"
    value = 'Отдел розничных операций / г.Минск ул.Притыкого 60/2'
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: Нажимаем кнопку "Далее""

    # :newpage: #######################################################################################################

    # :step: На форме "ВВОД ИНЫХ ПАРАМЕТРОВ ПЛАТЕЖНОЙ КАРТОЧКИ" заполняем "Кодовое слово клиента"
    value = 'Pass'
    # :step: Выбираем "Источник получения информации о продукте"
    value = 'Сайт банка'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ОФОРМЛЕНИЕ ЗАЯВЛЕНИЯ-АНКЕТЫ" устанавливаем чек-бокс "Заявление-анкета оформлено"
    # :step: В Форпост устанавливаем активным карточкам Клиента статус != "A", чтобы общее количество активных карточек для котрорых Клиент является картодержателем было < параметра card_limit
    # :step: Нажимаем кнопку "Подтвердить"

    # :newpage: #######################################################################################################

    # :step: Нажимаем кнопку "Завершить"
    # :assert: Оформление заявки продолжается, в request.log логируется данные проверки (количество активных карт, лимит, результат проверки)

    # :newpage: #######################################################################################################

    # :step: На форме "СВЕДЕНИЯ О КОНТРАКТЕ" нажмаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: В списке задач на задаче "Выбор получателя платёжной карточки" по тестовой заявке нажимаем кнопку "Продолжить"

    # :newpage: #######################################################################################################

    # :step: На форме "ВЫБОР ПОЛУЧАТЕЛЯ ПЛАТЕЖНОЙ КАРТОЧКИ" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ВЫДАЧА ПЛАТЕЖНОЙ КАРТОЧКИ" устанавливаем чек-бокс "Выдача платежной карточки оформлена в заявлении-анкете"
    # :step: Нажимаем кнопку "Завершить выдачу карточки"

    # :newpage: #######################################################################################################

    # :step: На форме "ПОДГОТОВКА ДОКУМЕНТОВ К ПЕРЕДАЧЕ НА ХРАНЕНИЕ" устанавливаем чек-бокс "Документы по заявке подготовлены"
    # :step: Нажимаем кнопку "Далее"
    # :assert: Заявка завершается исполнением

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)



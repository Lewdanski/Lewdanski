# :suit_description: #58550 
# :revision_date: 21.12.2022

@pytest.mark.skip(reason="Template")
def test_46487_33(app, credo_db):
    """
    {#
        :id:                46487_33
        :priority:          Средний
        :module:            Переводы
        :description:       Проверка формы актуализации отправителя перевода (существующий клиент). ЕФР Профиль клиента: подключение клиента к ДБО. Проверка клиента в KYC(Siron), если check_status = check, check_status = pending, check_status = release. Проверка доступа к задаче «Проверка клиента в KYC(Siron)». Проверка кнопки "Обновить" на форме «Проверка клиента в KYC(Siron)», если check_status = check. Проверка автоматического обновления результата на форме задачи «Проверка клиента в KYC(Siron)», если check_status = pending. Проверка автоматического обновления результата в нерабочее время на форме задачи «Проверка клиента в KYC(Siron)», если check_status = pending (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь (инициатор заявки) находится в Профиле клиента, авторизован со всеми прами, ролями
        :precondition:      Параметр клиента formPassed = нет
        :precondition:      Клиент (отправитель) не подключен к СДБО
        :precondition:      Отправитель существует в учетной системе банка
        :precondition:      Статус клиента в Siron KYC равен check
        :precondition:      В списке параметров продукта "Transfers" присутствует параметр needPreActualization ("Необходима предварительная актуализация клиента") со значением "нет"
        :precondition:      На варианте параметр doKyc = Да
        :precondition:      Пользователь maslovа только с ролью admins
        :precondition:      Пользователь semenov только с ролью front_office
        :precondition:      У пользователя hominskaya все роли, кроме admins и  front_office
        :precondition:      В файле itwcredo-kyc.properties параметр workingTimeRole=front_office
        :precondition:      Для роли front_office установлено начало рабочего времени = 13:00
        :precondition:      Системное время = 12:30
        :precondition:      В itwCredo-kyc.properties внесены соответствующие настройки (kyc.url, emails=credospam@itworks.by, timeout=300, workingTimeRole=front_office)
        :source_point:      46487, 56006, 57657, 58550
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :comment:           Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 101 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 102 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'Transfers'

    VARIANT = 'SwiftTransfer'


    # :newpage: #######################################################################################################

    # :step: Переходим к форме "Ввод параметров заявки на оформление перевода"
    # :assert: На параметрах заявки присутствуют параметры doKyc ([KYC] Проверять клиента в KYC) со значением "да"
    # :step: На варианте  изменяем значение параметра doKyc ([KYC] Проверять клиента в KYC) = нет
    # :step: Вводим Сумму
    value = '1000'
    # :step: Выбираем валюту
    value = 'ЕВРО'
    # :step: Нажимаем кнопку "Рассчитать размер комиссии"
    # :step: Нажимаем кнопку "Отправитель"

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента", изменяем фамилию
    value = 'Петрова'
    # :step: Изменяем имя
    value = 'Инна'
    # :step: Изменяем отчество
    value = 'Петровна'
    # :step: Изменяем пол
    value = 'Женский'
    # :step: Изменяем имя латинскими буквами
    value = 'INNA'
    # :assert: Поле "Имя латинскими буквами" обязательно для заполнения
    # :step: заполняем фамилию латинскими буквами
    value = 'PETROVA'
    # :assert: Поле "Фамилия латинскими буквами" обязательно для заполнения
    # :step: Изменяем гражданство
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Изменяем дату рождения
    value = '15.06.1989'
    # :step: Нажимаем кнопку "Деактивировать"
    # :step: заполняем "Тип докумета"
    value = 'Паспорт'
    # :step: заполняем серия и номер документа
    value = 'UH4567112'
    # :step: заполняем кем выдан документ
    value = 'Ленинский РОВД, г.Брест'
    # :step: заполняем дату выдачи
    value = '14.03.2019'
    # :step: заполняем срок действия документа
    value = '14.03.2029'
    # :step: Изменяем страну рождения
    value = 'BLR РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Изменяем тип населенного пункта
    value = 'Город'
    # :step: Изменяем населенный пункт
    value = 'Брест'
    # :step: Изменяем страну места регистрации
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Изменяем город или населенный пункт
    value = 'БРЕСТ г, БРЕСТСКАЯ обл'
    # :step: Изменяем улицу
    value = 'МОЛОДЕЖНАЯ УЛ'
    # :step: Изменяем дом
    value = '12'
    # :step: Изменяем квартиру
    value = '1'
    # :step: устанавливаем флаг место проживания аналогично месту регистрации
    # :step: Изменяем мобильный телефон
    value = '+375297416952'
    # :step: указываем "Согласие на осуществление рекламных рассылок"
    value = 'Согласие получено'
    # :step: "Логин ДБО" нажимаем кнопку "Создать"
    value = '375297416952'
    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На форму ввода параметров заявки подтянулись данные отправителя с параметров СКЗ
    # :assert: Клиент был обновлен в СКЗ, в параметрах клиента присутствуют все введенные на форме значения
    # :assert: Вернулись к форме ввода данных заявки, на заявке установлен статус "Ввод параметров заявки на оформление перевода"

    # :newpage: #######################################################################################################

    # :step: Выбираем Код банка-получателя
    value = 'BELBBY2XXXX'
    # :step: Нажимаем кнопку "Получатель"
    # :assert: Заявка переходит в статус "Выбор получателя перевода"

    # :newpage: #######################################################################################################

    # :step: Вводим наименование
    value = 'ИП ИВАНОВ'
    # :step: Выбираем найденную карточку

    # :newpage: #######################################################################################################

    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: Выбираем назначение платежа
    value = 'Частный перевод'
    # :step: Нажимаем Далее

    # :newpage: #######################################################################################################

    # :step: Нажимаем Печать документов
    # :step: Устанавливаем чекбокс "Документы подписаны"
    # :step: Нажимаем "Далее"
    # :assert: В истории выполнения процесса после окончания сохранения клиента создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: На параметрах заявки присутствуют параметры kycId ([KYC] ID для проверки в Siron) = EFR2455865_fa986
    # :assert: Результат проверки сохранен в параметрах на заявки kycStatus ([KYC] Статус проверки клиента в KYC) = check, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-06T16:46:38, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус check успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)»
    # :assert: На форме «Проверка клиента в KYC(Siron)» в поле «Результат проверки» получен статус "На проверке УФМ (произошло совпадение)"
    # :assert: Кнопка "Завершить" не доступна для нажатия
    # :step: В Siron KYC устанавливаем статус pending
    # :step: Нажимаем кнопку "Обновить" на форме «Проверка клиента в KYC(Siron)»
    # :assert: В истории выполнения процесса создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: На параметрах заявки присутствуют параметры kycId ([KYC] ID для проверки в Siron) = EFR2456099_fce99
    # :assert: Результат проверки сохранен в параметрах на заявки kycStatus ([KYC] Статус проверки клиента в KYC) = pending, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-06T16:46:38, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус pending успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)», в поле «Результат проверки» получен статус "Отложен УФМ"
    # :step: В Siron KYC устанавливаем статус release
    # :step: Ожидаем 300 секунд (timeout=300)
    # :assert: Результат не обновляется на форме автоматически
    # :step: Ожидаем наступления рабочего времени
    # :assert: Результат обновился на форме автоматически, без обновления страницы браузера
    # :assert: В истории выполнения процесса создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: На параметрах заявки присутствуют параметры kycId ([KYC] ID для проверки в Siron) = EFR2455829_cc558
    # :assert: Результат проверки сохранен в параметрах на заявки kycStatus ([KYC] Статус проверки клиента в KYC) = release, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-06T16:46:38, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус release успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)»
    # :assert: На форме «Проверка клиента в KYC(Siron)» в поле «Результат проверки» получен статус "Совпадений нет по результатам проверки УФМ"
    # :step: Нажимаем кнопку "Отмена"
    # :assert: заявка доступна инициатору заявки
    # :assert: заявка доступна пользователю с ролью admins (maslova)
    # :assert: заявка доступна пользователю с ролью front_office (semenov)
    # :assert: заявка недоступна пользователю без роли admins или front_office (hominskaya)
    # :step: На форме «Проверка клиента в KYC(Siron)» нажимаем "Завершить"

    # :newpage: #######################################################################################################

    # :assert: Переходим на форму "Выгрузка платежей"
    # :step: Нажимаем кнопку "Передать выбраные платежи в кассу"
    # :step: В СОФЛ в таблице SWIFT_TRANSFERS устанавливаем статус заявки PAID
    # :step: Нажимаем кнопку "Проверить статус операции"
    # :step: Устанавливаем чекбокс Платежное поручение передано клиенту
    # :step: Нажимаем "Завершить"
    # :assert: Заявка завершилась со статусом "Окончена обработка"
    # :assert: Данные клиента отправителя были обновлены в учетной системе банка
    # :assert: На параметрах заявки "Создание логина в ДБО" (create_login_dbo) = "Да"
    # :assert: На параметрах клиента в ЕРК и СКЗ сохранился loginSDBO (Логин СДБО) = "375297416952"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_48979_24(app, credo_db):
    """
    {#
        :id:                48979_24
        :priority:          Средний
        :module:            ЕФР
        :description:       Перевыпуск основной расчетной карточки. Проверка определения параметра checkAccountArrest ("Проверка ареста/приостановления операций по счету (за исключением ареста на сумму)") с продукта "Платежные карточки" на заявке "Перевыпуск основной расчетной карточки" для карточки, по счету которой установлен арест на часть суммы. Проверка возможности прохождения заявки, если на продукте checkAccountArrest = "да", а на варианте параметр не создан. Проверка уведомления с текстом из справочника "Информационные блоки ЕФР" идентификатора блока _ReissueAccountArrest.(57657)Проверка клиента в KYC(Siron), check_status = «block» + текст «block», отказ в исполнении. (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь авторизирован в СКЗ со всеми правами, ролями
        :precondition:      В справочнике "Информационные блоки ЕФР" колонка "Текст уведомления" идентификатора блока _ReissueAccountArrest ((Перевыпуск расчетной) Выбор счета, уведомление об аресте карточного счета) процесса ReissueCard заполнена значением «ТЕСТ Перевыпуск карточки недоступен по причине ареста карточного счета.»
        :precondition:      У тестового клиента есть в наличии контракт с арестом карточного счета (1)
        :precondition:      У тестового клиента есть в наличии активная расчетная карточка. На действующем карточном контракте с активной картой устанавливаем арест на часть суммы карт-счета (2)
        :precondition:      На продукте "Платежные карточки" параметр checkAccountArrest ("Проверка ареста/приостановления операций по счету (за исключением ареста на сумму)") = "да"
        :precondition:      На варианте "Перевыпуск основной расчетной карточки" параметр checkAccountArrest ("Проверка ареста/приостановления операций по счету (за исключением ареста на сумму)") не создан.
        :precondition:      На варианте параметр doKyc ("Проверять клиента в KYC") = да
        :precondition:      На варианте параметр needPreActualization ("Необходима предварительная актуализация клиента") = "нет"
        :precondition:      В Siron KYC тестовый Клиент со статусом check_status = block («block» + текст «block state successfully set»)
        :precondition:      В справочнике сlose_card_acc_text_block для строки "Уведомление о блокировке продукта в результате проверки в Siron KYC" заполнен "Текст уведомления" = "УФМ принято решение о запрете на установление договорных отношений Проверка"
        :precondition:      В itwCredo-kyc.properties внесены соответствующие настройки (kyc.url, emails, timeout, workingTimeRole)
        :source_point:      48979, 57112, 57657, 58550
        :comment:           Тестовая карта: договор RS/269322 (счёт BY28OLMP30140900000602822399), карта 530422******6084 - арест на сумму
        :comment:           Тестовая карта: договор II/391020689 (счёт BY44OLMP30140900000302638927), карта 501621******0302 - арест карточного счета
        :comment:           Для возможности завершения заявки (активации карточки) выполняется апдейт карточки по номеру crd_code с установкой  crd_embossed = 'YES' и  crd_prod_status = 'M'
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :comment:           Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 100 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 102 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'EFR'

    VARIANT = 'P4_A4ReissueCard4'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный (идентификационный) номер"
    value = '7525360A663PB5'
    # :step: нажать кнопку "Искать"
    # :step: выбрать Клиента - кликнуть по отображенной карточке тестового Клиента

    # :newpage: #######################################################################################################

    # :step: выбрать продукт на форме "Профиль клиента"
    value = 'Платежные карточки'
    # :step: выбрать вариант
    value = 'Перевыпуск основной расчетной карточки'
    # :step: нажать кнопку "Выполнить"
    # :assert: Создается заявка, параметр doKyc = да

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Выбор счета клиента при перевыпуске основной платежной карточки" заполняем радиобаттон выбранного карт-счета с арестом (1)
    # :step: Нажимаем кнопку "Далее"
    # :assert: проверка checkAccountArrest ("Проверка ареста/приостановления операций по счету (за исключением ареста на сумму)") из продукта сработала на арест карт-счета. Остаемся на форме и отображается "Ошибка выполнения задачи: ТЕСТ Перевыпуск карточки недоступен по причине ареста карточного счета."
    # :step: На форме "Выбор счета клиента при перевыпуске основной платежной карточки" заполняем радиобаттон выбранного карт-счета с арестом части суммы (2)
    # :step: Нажимаем кнопку "Далее"
    # :assert: Карт-счет выбран, проверка checkAccountArrest ("Проверка ареста/приостановления операций по счету (за исключением ареста на сумму)") из продукта не сработала для ареста счета на часть суммы. Осуществляется переход на форму "Ввод параметров перевыпуска основной платежной карточки".

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров перевыпуска основной платежной карточки" заполняем поле "Причина перевыпуска"
    value = 'По инициативе Клиента'
    # :step: Заполняем поле "Вариант продукта" выбором значения из выпадающего списка
    value = 'Расчетная карточка "Премиальная"'
    # :step: Заполняем поле "Тип карточки" выбором значения из выпадающего списка
    value = 'MasterCard Gold PayPass'
    # :step: Заполняем поле "Изменение срока действия" выбором значения из выпадающего списка
    value = 'Без изменения срока действия'
    # :step: Заполняем поле "Способ получения ПИН-кода" выбором значения из выпадающего списка
    value = 'ПИН-конверт'
    # :step: Заполняем поле "Регион выдачи" выбором значения из выпадающего списка, несовпадающим с точкой продаж пользователя (параметр location_sales)
    value = 'Брест, Брестская область'
    # :step: Заполняем поле "Точка выдачи" выбором значения из выпадающего списка
    value = 'Отдел розничного бизнеса Брестской ОД / г.Брест ул.Московская, 174А'
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод иных параметров платежной карточки" заполняем поле "Кодовое слово клиента"
    value = 'кодкод'
    # :step: Заполняем поле "Источник получения информации о продукте"
    value = 'Радиореклама'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Оформление заявления-анкеты" по ссылке "Печать Заявления-анкеты" формируем и проверяем документ заявление-анкету
    # :step: Заполняем чекбокс "Заявление-анкета оформлено"
    # :step: Нажимаем кнопку "Подтвердить"

    # :newpage: #######################################################################################################

    # :assert: Создается задача "Проверка клиента в KYC(Siron)".
    # :assert: Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office (Служебная информация о заявке - "Performers: <инициатор заявки>, admins, front_office.")
    # :assert: Перешли на форму "Проверка клиента в KYC(Siron)", на которой отображаются:
    # :assert: ИД заявки,
    # :assert: Результат проверки = "Клиент [ФИО Клиента] Произошло совпадение УФМ (принято решение о блокировке),
    # :assert: активные кнопки "Завершить" и "Отмена", неактивная кнопка "Обновить",
    # :assert: текст из справочника lose_card_acc_text_block «Информационные блоки ЕФР» для строки "Уведомление о блокировке продукта в результате проверки в Siron KYC" = "УФМ принято решение о запрете на установление договорных отношений. Ожидайте уведомление по электронной почте Проверка"
    # :assert: На заявке созданы параметры kycStatus = "block", kycCompleted = "да", kycId = ID для проверки в Siron, kycComment = "block state successfully set", kycDate = [дата_время] выполнения проверки
    # :step: Нажимаем "Отмена"

    # :newpage: #######################################################################################################

    # :assert: переход в профиль клиента с доступной для продолжения задачей "Проверка клиента в KYC(Siron)" по тестовой заявке
    # :step: Продолжаем заявку

    # :newpage: #######################################################################################################

    # :step: Нажимаем "Завершить" на форме "Проверка клиента в KYC(Siron)"
    # :assert: заявка завершается отказом, статус "Клиент не соответствует требованиям ЛНПА"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_48979_26(app, credo_db):
    """
    {#
        :id:                48979_26
        :priority:          Средний
        :module:            ЕФР
        :description:       Перевыпуск основной кредитной карточки. Проверка определения параметра checkOverdueDebt ("Проверка наличия статуса «Задолженность» по основной платежной карточке") с варианта "Перевыпуск основной кредитной карточки" для карточки в статусе «Задолженность». Проверка возможности прохождения заявки, если на варианте checkOverdueDebt = "нет", а на продукте "да". (57657)Проверка клиента в KYC(Siron), check_status = check/undef. Регламент автоматической проверки результата обработки УФМ. Установка статуса через Событие [KYC]. (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь авторизирован в СКЗ со всеми правами, ролями
        :precondition:      Заявка инициируется до начала рабочего времени роли из itwCredo-kyc.properties
        :precondition:      У тестового клиента есть кредитная карточка со статусом "E" (Задолженность) (1)
        :precondition:      На варианте "Перевыпуск основной кредитной карточки" создаем и заполняем параметр checkOverdueDebt ("Проверка наличия статуса «Задолженность» по основной платежной карточке") = "нет". На продукте "Платежные карточки" параметр checkOverdueDebt ("Проверка наличия статуса «Задолженность» по основной платежной карточке") = "да"
        :precondition:      В справочнике close_card_acc_text_block "Информационные блоки ЕФР" для "Уведомления о совпадении со списками в Siron KYC" Текст уведомления = "Ожидайте результат проверки УФМ.<br/>Режим работы УФМ:<br/>Пн-Чт: 08:30 – 17:30*<br/>Пт: 08:30 – 16:15*.<br/>Сб-Вскр – выходные.<br/>*в предпраздничные дни режим работы сокращен на 1 час."
        :precondition:      в Siron KYC тестовый Клиент со статусом check_status = check
        :precondition:      На варианте параметр doKyc ("Проверять клиента в KYC") = да
        :precondition:      На варианте параметр needPreActualization ("Необходима предварительная актуализация клиента") = "нет"
        :precondition:      На варианте заполнен параметр kycEmailTemplate "[KYC] Текст уведомления УФМ(Siron)"
        :precondition:      В itwCredo-kyc.properties внесены соответствующие настройки (kyc.url, emails, timeout, workingTimeRole)
        :source_point:      48979, 57112, 57657, 58550
        :comment:           Тестовая карта: договор II/1125433 (счет BY45OLMP30140900000602821511), карта 486818******1500 (неперс.), статус "Задолженность"
        :comment:           Для полного прохождения заявки выполняется апдейт по выпущенной карточке в ФОРПОСТ с установкой  crd_embossed = 'YES' и  crd_prod_status = 'M'
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :comment:           Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 100 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 102 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'EFR'

    VARIANT = 'P4_A4ReissueCreditCard'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный (идентификационный) номер"
    value = '3050996C005PB7'
    # :step: нажать кнопку "Искать"
    # :step: выбрать Клиента - кликнуть по отображенной карточке тестового Клиента
    # :step: выбрать продукт на форме "Профиль клиента"
    value = 'Платежные карточки'
    # :step: выбрать вариант
    value = 'Перевыпуск основной кредитной карточки'
    # :step: нажать кнопку "Выполнить"
    # :assert: создается заявка, параметр заявки doKyc = "да"

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Выбор счета клиента при перевыпуске основной платежной карточки" заполняем радиобаттон тестового счета (1)
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На форме "ВЫВОД СООБЩЕНИЯ" отображается "Карточка в статусе "Задолженность". Проинформируйте Клиента"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров перевыпуска основной платежной карточки" заполняем поле "Причина перевыпуска"
    value = 'По инициативе Клиента'
    # :step: Заполняем поле "Способ получения ПИН-кода" выбором значения из выпадающего списка
    value = 'ПИН-конверт'
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод иных параметров платежной карточки" заполняем поле "Кодовое слово клиента"
    value = 'кодкод'
    # :step: Заполняем поле "Источник получения информации о продукте"
    value = 'Радиореклама'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: по ссылке "Печать Заявления-анкеты" скачиваем документ "ЗАЯВЛЕНИЕ-АНКЕТА НА ОФОРМЛЕНИЕ ПЛАТЕЖНОЙ КАРТОЧКИ"
    # :step: Заполняем чекбокс "Заявление-анкета оформлено"
    # :step: Нажимаем кнопку "Подтвердить"

    # :newpage: #######################################################################################################

    # :assert: После Сохранения Клиента создается задача "Проверка клиента в KYC(Siron)"
    # :assert: Статус заявки - "Отправлена на дополнительную проверку"
    # :assert: Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office (Служебная информация о заявке - "Performers: <инициатор заявки>, admins, front_office.")
    # :assert: Перешли на форму "Проверка клиента в KYC(Siron)", на которой отображаются:
    # :assert: ИД заявки,
    # :assert: Результат проверки = "Клиент [ФИО Клиента] На проверке УФМ (произошло совпадение)",
    # :assert: активные кнопки "Обновить" и "Отмена", неактивная кнопка "Завершить",
    # :assert: текст из справочника «Информационные блоки ЕФР» для "Уведомления о совпадении со списками в Siron KYC"
    # :assert: На заявке созданы параметры kycCompleted = "нет", kycStatus = "check", kycId = ID для проверки в Siron, kycComment = "Статус check успешно установлен", kycDate = [дата_время] выполнения проверки
    # :assert: на пользователей с ролью admins и email-адреса из itwCredo-kyc.properties отправлено уведомление с темой "Совпадение в ЕФР со списками по заявке [№заявки]" и текстом из параметра на варианте параметр kycEmailTemplate
    # :step: до начала наступления рабочего времени для роли з itwCredo-kyc.properties нажимаем "Обновить"
    # :assert: происходит обновление проверки, обновляется параметр заявки kycDate
    # :step: Ожидаем наступления рабочего времени для роли з itwCredo-kyc.properties
    # :assert: с наступлением рабочего времени запускается автоматическое обновление проверки результата обработки УФМ с интервалом из itwCredo-kyc.properties
    # :assert: На заявке обновляется параметр kycDate

    # :newpage: #######################################################################################################

    # :step: Имитируем ошибку работы с Siron (невалидный ответ - xml)
    # :assert: Статус заявки - Ошибка проверки клиента в KYC(Siron)
    # :assert: Создается задача "Ошибка проверки клиента в KYC(Siron)", назначена инициатору заявки и пользователям с ролью admins
    # :assert: отправляется email на пользователей с ролью admins с темой «Ошибка проверки клиента в KYC(Siron) по заявке <#>» и текстом ошибки (тема: "Ошибка проверки клиента в KYC(Siron) по заявке ...", текст: "Ошибка сервиса").
    # :step: Нажимаем кнопку "Отмена'

    # :newpage: #######################################################################################################

    # :assert: в профиле клиента по заявке 2 задачи - "Ошибка проверки клиента в KYC(Siron)", "Проверка клиента в KYC(Siron)"
    # :step: Продолжаем заявку с задачей "Ошибка проверки клиента в KYC(Siron)"
    # :assert: переход на форму "Ошибка проверки клиента в KYC(Siron)", на которой отображаются:
    # :assert: ИД заявки:
    # :assert: Данные ошибки: Ошибка сервиса. См. подробности в логах
    # :assert: Действие: страните указанную ошибку и выполните задачу
    # :assert: Активнае кнопки "Завершить", "Отмена"
    # :step: Нажимаем "Отмена"
    # :assert: переход в Профиль клиента

    # :newpage: #######################################################################################################

    # :assert: по завке доступны события со всеми возможными результатами проверки:
    # :assert: "[KYC] Установка статуса undef"
    # :assert: "[KYC] Установка статуса inconspic"
    # :assert: "[KYC] Установка статуса release"
    # :assert: "[KYC] Установка статуса pending"
    # :assert: "[KYC] Установка статуса block(комментарий block)"
    # :assert: "[KYC] Установка статуса block(комментарий permit)"
    # :assert: "[KYC] Установка статуса block(иной комментарий)"
    # :step: Создаем событие на заявке выбором из выпадающего списка на форме "Создать событие"
    value = '[KYC] Установка статуса undef'
    # :step: Нажимаем "Создать"
    # :assert: статус заявки = Отправлена на дополнительную проверку
    # :assert: На заявке обновлены параметры kycCompleted = "да", kycStatus = "undef", kycComment = "by signal", kycDate = [дата_время] выполнения проверки

   # :newpage: #######################################################################################################

    # :step: Продолжаем заявку в Профиле клиента (задача "Проверка клиента в KYC(Siron)")
    # :assert: на форме Проверка клиента в KYC(Siron) по клиенту выводится "Запрос в KYC не выполнялся"
    # :assert: кнопка "Обновить" неактивна
    # :step: Нажимаем кнопку "Завершить'

    # :newpage: #######################################################################################################

    # :step: На форме "Выдача платежной карточки" заполняем поле чекбокс "Выдача платежной карточки оформлена в заявлении-анкете"
    # :step: Нажимаем кнопку "Завершить выдачу карточки"

    # :newpage: #######################################################################################################

    # :step: На форме "Подготовка документов к передаче на хранение" заполняем поле чекбокс "Документы по заявке подготовлены"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: В СКЗ заявка завершена исполнением, статус "Окончена обработка".

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_50167_1(app, credo_db):
    """
    {#
        :id:                50167_1
        :priority:          Средний
        :module:            ЕФР
        :description:       Оформление расчетной карточки. Сохранение в доп. условие USER_OPEN логина пользователя СКЗ в БИС "Форпост" при открытии контракта ФОРПОСТ. (57657)Проверка клиента в KYC(Siron), check_status = check/inconspic. Автоматическое обновление проверки результата обработки УФМ. (58026) Параметр enable_card_limit_check = "Нет", проверка на лимит не выполняется (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Заявка оформляется в рабочее время для роли, указанной в itwCredo-kyc.properties
        :precondition:      Пользователь авторизирован в СКЗ со всеми правами, ролями
        :precondition:      Параметры пользователя: login_forpost= UPKASSES, location_sales= Отдел розничных операций / г.Минск ул.Притыцкого 60/2, post= БАНКОВСКИЙ СЛУЖАЩИЙ, contactPhone заполнен
        :precondition:      Существующий Клиент со всеми обязательными параметрами
        :precondition:      в Siron KYC тестовый Клиент со статусом check_status = check
        :precondition:      На варианте параметр doKyc ("Проверять клиента в KYC") = да
        :precondition:      На варианте заполнен параметр kycEmailTemplate "[KYC] Текст уведомления УФМ(Siron)" = "Произошло совпадение в ЕФР со списками ${thirdPerson?request.third_person_fio:client.name} (ID ${thirdPerson?request.kycId_thirdperson:request.kycId}) при оформлении заявки ${requestId} по варианту (${product}) ${variant}. <br/>Продукт: ${request.card_variant} (${request.currency_account}) <br/><br/>Работник банка: ${user_initiator_username.name}. Телефон: ${user_initiator_username.contactPhone}ТЕСТИРОВАНИЕ"
        :precondition:      На варианте параметр needPreActualization ("Необходима предварительная актуализация клиента") = "нет"
        :precondition:      В справочнике close_card_acc_text_block «Информационные блоки ЕФР» для "Уведомления о совпадении со списками в Siron KYC" "Текст уведомления" = "Ожидайте результат проверки УФМ. Тестирование"
        :precondition:      В itwCredo-kyc.properties внесены соответствующие настройки (kyc.url, emails=credospam@itworks.by, timeout=300, workingTimeRole=front_office)
        :precondition:      На варианте "P1_A1PaymentCard (Оформление расчётной карточки)" параметр enable_card_limit_check = "Нет"
        :precondition:      На варианте "P1_A1PaymentCard (Оформление расчётной карточки)" заполнен параметр card_limit
        :precondition:      На варианте параметр needPreActualization = нет
        :source_point:      50167, 57112, 57657, 58026, 58550
        :comment:           Для полного прохождения заявки выполняется апдейт по выпущенной карточке в ФОРПОСТ с установкой  crd_embossed = 'YES' и  crd_prod_status = 'M'
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :comment:           Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 101 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 100 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 101 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'EFR'

    VARIANT = 'P1_A1PaymentCard'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный (идентификационный) номер"
    value = '3050996C005PB7'
    # :step: нажать кнопку "Искать"
    # :step: выбрать Клиента - кликнуть по отображенной карточке тестового Клиента

    # :newpage: #######################################################################################################

    # :step: выбрать продукт на форме "Профиль клиента"
    value = 'Платежные карточки'
    # :step: выбрать вариант
    value = 'Оформление расчетной карточки'
    # :step: нажать кнопку "Выполнить"
    # :assert: Создается заявка "Платежные карточки/Оформление расчетной карточки". Статус "Начата обработка". На заявке сохранен параметр doKyc = да
    # :assert: Проверка на ограничение количества выпускаемых карточек не производится, оформление заявки продолжается
    # :step: на параметре варианта устанавливаем doKyc = нет

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров расчетной карточки" заполняем поле "Вариант продукта" выбором значения из выпадающего списка
    value = 'Расчетная карточка "Классическая""'
    # :step: Заполняем поле "Тип карточки" выбором значения из выпадающего списка (перс. карта)
    value = 'UnionPay Classic'
    # :step: Заполняем поле "Валюта счета" выбором значения из выпадающего списка
    value = 'Белорусский рубль'
    # :step: Заполняем поле "Способ получения ПИН-кода" выбором значения из выпадающего списка
    value = 'SMS-сообщение'
    # :step: Заполняем поле "Регион выдачи" выбором значения из выпадающего списка
    value = 'Минск'
    # :step: Заполняем поле "Точка выдачи" выбором значения из выпадающего списка (=location_sales пользователя)
    value = 'Отдел розничных операций / г.Минск ул.Притыцкого 60/2'
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод иных параметров платежной карточки" заполняем поле "Кодовое слово клиента"
    value = 'кодкод'
    # :step: Выбираем "Источник получения информации о продукте"
    value = 'Радиореклама'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Оформление заявления-анкеты" по ссылке "Печать Заявления-анкеты" скачиваем документ
    # :step: Устанавливаем чекбокс "Заявление-анкета оформлено"
    # :step: Нажимаем кнопку "Подтвердить'
    # :assert: Проверка на ограничение количества выпускаемых карточек не производится, оформление заявки продолжается

    # :newpage: #######################################################################################################

    # :assert: После Сохранения Клиента создается задача "Проверка клиента в KYC(Siron)" - значение doKyc = да (берется из параметров заявки).
    # :assert: Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office (Служебная информация о заявке - "Performers: <инициатор заявки>, admins, front_office.")
    # :assert: Перешли на форму "Проверка клиента в KYC(Siron)", на которой отображаются:
    # :assert: ИД заявки,
    # :assert: Результат проверки = "Клиент [ФИО Клиента] На проверке УФМ (произошло совпадение)",
    # :assert: активные кнопки "Обновить" и "Отмена", неактивная кнопка "Завершить",
    # :assert: текст из справочника «Информационные блоки ЕФР»  ("Ожидайте результат проверки УФМ. Тестирование.")
    # :assert: Заявка находится в статусе "Отправлена на дополнительную проверку"
    # :assert: На заявке созданы параметры kycStatus = "check", kycCompleted = "нет", kycId = ID для проверки в Siron, kycComment = "Статус check успешно установлен", kycDate = [дата_время] выполнения проверки
    # :assert: на пользователей с ролью admins и email-адреса из itwCredo-kyc.properties отправлено уведомление с темой "Совпадение в ЕФР со списками по заявке [№заявки]" и текстом из параметра на варианте параметр kycEmailTemplate ("Произошло совпадение в ЕФР со списками АБРАМЧУК АНДРЕЙКАА ЙЙЙЙЙЙЙЙЙЙЙЙЙЙЙ (ID EFR2456178_92680) при оформлении заявки 2456178 по варианту (Платежные карточки) Оформление расчетной карточки. Продукт: Расчетная карточка "Классическая"(Белорусский рубль)Работник банка: Петрукович Ольга Ивановна. Телефон: +375297222333 ТЕСТИРОВАНИЕ")
    # :assert: запускается автоматическая проверка результата обработки УФМ и обновление с учетом рабочего времени роли и интервала из itwCredo-kyc.propert (период, сек. = значению timeout)

    # :newpage: #######################################################################################################

    # :step: Меняем статус проверки Siron у клиента на "Совпадений после проверки нет" (inconspic)
    # :assert: Результат проверки на форме становится "Совпадений нет после проверки" - конечный статус KYC inconspic (автоматически по регламенту проверки, без обновления страницы с формой пользователем)
    # :assert: Кнопка "Обновить" становится неактивной, кнопка "Завершить" активируется
    # :assert: обновляются параметры заявки: kycCompleted=да, kycStatus = inconspic, kycComment = Статус inconspic успешно установлен, kycDate
    # :step: Нажимаем кнопку "Отмена"

    # :newpage: #######################################################################################################

    # :assert: переход в Профиль клиента
    # :step: Продолжаем заявку

    # :newpage: #######################################################################################################

    # :step: Нажимаем кнопку "Завершить" на форме "Проверка клиента в KYC(Siron)"
    # :assert: задача "Проверка KYC" завершается, автоматическая проверка прекращается

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров для формирования договоров" выбираем "Код доверенности"
    value = 'Доверенность №1, подразделение ORO...'
    # :step: Нажимаем кнопку "Завершить'

    # :newpage: #######################################################################################################

    # :step: На форме "Оформление договора" по ссылке "Печать договора" скачиваем договор
    # :step: Устанавливаем чекбокс "Договор оформлен"
    # :step: Устанавливаем чекбокс "Документы по заявке подготовлены"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: переход в Профиль клиента
    # :step: продолжаем тестовую заявку
    # :step: Нажимаем кнопку "Далее" на форме "Выбор получателя платежной карточки" с предустановленным значением "Владелец счета"

    # :newpage: #######################################################################################################

    # :step: На форме "Выдача платежной карточки" по ссылке "Печать расписки" скачиваем расписку
    # :step: Устанавливаем чекбокс "Расписка оформлена'
    # :step: Нажимаем кнопку "Завершить выдачу карточки'

    # :newpage: #######################################################################################################

    # :step: На форме "Подготовка документов к передаче на хранение" устанавливаем чекбокс "Документы по заявке подготовлены"
    # :step: Нажимаем кнопку "Далее"
    # :assert: В СКЗ заявка завершается исполнением, статус "Окончена обработка"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_51465_14(app, credo_db):
    """
    {#
        :id:                51465_14
        :priority:          Средний
        :module:            ЕФР
        :description:       Оформление дополнительной карточки. (51465_14) Проверка отсутствия дубликатов и отсутствия корректировки моб. телефонов-дубликатов на других Клиентах, если на форме реквизитов клиентов - Владелец карт-счета, Третье лицо (пользователь карточки), Получатель карточки - производилось редактирование моб. телефона. Проверка отражения в логах заявки новых блока поиска дубликатов и блока изменения приоритетов дубликатов номера моб. телефона в ЕРК. (53345_2) Проверка обновления значения поля EMAIL в ЕРК при актуализаии существующей карточки клиента Владельца карт-счета, Третьего лица и Доверенного лица, если в СКЗ поле E-mail заполнено пустым значением. (57657)Проверка клиента в KYC(Siron) - проверяются Клиент -владелец счета(check_status = inconspic) и Клиент - третье лицо(check_status = check/pending/inconspic). Обновление результатов - автоматически, по кнопке "Обновить". (57840) Проверка отсутствия блока "Подключение к ДБО" на форме реквизитов третьего лица
        :precondition:      Пользователь авторизирован в СКЗ со всеми правми, ролями
        :precondition:      заявка оформляется в рабочее время роли из параметра workingTimeRole в itwCredo-kyc.properties
        :precondition:      Тестовые клиенты - Владелец карт-счета, Третье лицо, на кого оформляется карточка, и Получатель карточки - существуют в ЕРК, все ключевые данные присутствуют. Поле "EMAIL" у всех клиентов заполнено.
        :precondition:      В справочнике close_card_acc_text_block "Информационные блоки ЕФР" для "Уведомления о совпадении со списками в Siron KYC" заполнен "Текст уведомления"
        :precondition:      в Siron KYC тестовый Клиент со статусом check_status = inconspic
        :precondition:      в Siron KYC тестовый Клиент -третье лицо со статусом check_status = check
        :precondition:      На варианте параметр doKyc ("Проверять клиента в KYC") = да
        :precondition:      На варианте параметр needPreActualization ("Необходима предварительная актуализация клиента") = "нет"
        :precondition:      На варианте заполнен параметр kycEmailTemplate "[KYC] Текст уведомления УФМ(Siron)"
        :precondition:      В itwCredo-kyc.properties внесены соответствующие настройки (kyc.url, emails, timeout, workingTimeRole)
        :precondition:      У клиента есть карточный счёт, к которому возможно выпустить дополнительную карточку
        :precondition:      Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins
        :source_point:      51465, 53345, 57112, 57657, 57840, 58550
        :comment:           Для полного прохождения заявки выполняется апдейт по выпущенной карточке в ФОРПОСТ с установкой  crd_embossed = 'YES' и  crd_prod_status = 'M'
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 108 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 106 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 106 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'EFR'

    VARIANT = 'P3_A3AdditionalCard3'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный (идентификационный) номер"
    value = '3050996C005PB7'
    # :step: нажать кнопку "Искать"
    # :step: выбрать Клиента - кликнуть по отображенной карточке тестового Клиента

    # :newpage: #######################################################################################################

    # :step: выбрать продукт на форме "Профиль клиента"
    value = 'Платежные карточки'
    # :step: выбрать вариант
    value = 'Оформление дополнительной карточки'
    # :step: нажать кнопку "Выполнить"
    # :assert: создается заявка, параметр заявки doKyc = "да"

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента" изменяем Имя
    value = 'АНДРЕЙКАА'
    # :step: редактируем поле "Мобильный телефон" уникальным значением, по которому в ЕРК НЕ будут найдены дубликаты
    value = '+375295189592'
    # :step: Очищаем поле "E-mail"
    value = ''
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Выбор счёта" заполняем радиобаттон выбранного карт-счета
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров дополнительной карточки" заполняем поле "Держатель карточки"
    value = 'Совершеннолетнее третье лицо'
    # :step: Заполняем поле "Тип карточки" выбором значения из выпадающего списка (перс.карта)
    value = 'MasterCard Standard PayPass'
    # :step: Заполняем поле "Способ получения ПИН-кода" выбором значения из выпадающего списка
    value = 'ПИН-конверт'
    # :step: Заполняем поле "Регион выдачи" выбором значения из выпадающего списка (несовпадающим с точкой продаж пользователя)
    value = 'Брест, Брестская область'
    # :step: Заполняем поле "Точка выдачи" выбором значения из выпадающего списка
    value = 'Отдел розничного бизнеса Брестской ОД / г.Брест ул.Московская, 174А'
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск третьего лица в учетной системе Банка" вводим личный номер клиента
    value = '5200464C569GB0'
    # :step: Нажимаем на кнопку "Поиск карточки клиента"
    # :step:  На форме "Поиск третьего лица по реквизитам" нажимаем на найденную краткую карточку клиента

    # :newpage: #######################################################################################################

    # :assert: На форме "Реквизиты клиента" отсутствует блок "Подключение к ДБО"
    # :step: Рредактируем поле "Мобильный телефон" уникальным значением, по которому в ЕРК НЕ будут найдены дубликаты
    value = '+375291918598'
    # :step: Очищаем поле "E-mail"
    value = ''
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод иных параметров дополнительной платежной карточки" заполняем поле "Кодовое слово клиента"
    value = 'кодкод'
    # :step: Заполняем поле "Источник получения информации о продукте"
    value = 'Радиореклама'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Оформление заявления-анкеты" по ссылке "Печать Заявления-анкеты" формируем и проверяем документ заявление-анкету по владельцу счета
    # :step: По ссылке "Печать анкеты" формируем и проверяем документ анкету третьего лица
    # :step: Заполняем чекбокс "Заявление-анкета оформлено"
    # :step: Заполняем чекбокс "Анкета оформлена"
    # :step: Заполняем чекбокс "Копия документа, удостоверяющего личность владельца счета, изготовлена"
    # :step: Заполняем чекбокс "Копия документа, удостоверяющего личность третьего лица, изготовлена"
    # :step: Нажимаем кнопку "Подтвердить"
    # :assert: В ЕРК не найдены клиенты с моб. телефонами дубликатами обновленного моб. телефона клиента Владельца счета
    # :assert: В логах заявки request.log перед блоком сохранения данных "id='_18' name='Сохранение данных клиента' action='onEntry'" отображаются логи блока поиска дубликатов номера моб. телефона в ЕРК "id='_5' name='Поиск дублирования Мобильного телефона'", с параметрами запроса к ЕРК. В блоке отображается пустой список ЕРК кодов клиентов с дубликатами моб. номера клиента Владельца карточки ("dubilcateErkCodes="). Логи блока корректировки дубликатов не отображаются.
    # :assert: В ЕРК у клиента Владельца карточки значение параметра "Мобильный телефон" (sprCode = "PHONE_MOBILE") обновилось (PhoneNumber = "375336810762", в соответствии с ранее введеным значением на форме реквизитов клиента Владельца счета, приоритет параметра Priority = "0"
    # :assert: В ЕРК не найдены клиенты с моб. телефонами дубликатами обновленного моб. телефона клиента Третьего лица - владельца карточки
    # :assert: В логах заявки request.log перед блоком сохранения данных "id='_18' name='Сохранение данных клиента' action='onEntry'" отображаются логи блока поиска дубликатов номера моб. телефона в ЕРК "id='_5' name='Поиск дублирования Мобильного телефона'", с параметрами запроса к ЕРК. В блоке отображается пустой список ЕРК кодов клиентов с дубликатами моб. номера клиента Третьего лица ("dubilcateErkCodes="). Логи блока корректировки дубликатов не отображаются.
    # :assert: В ЕРК у клиента Третьего лица значение параметра "Мобильный телефон" (sprCode = "PHONE_MOBILE") обновилось ( PhoneNumber = "375257929919"), в соответствии с ранее введеным значением на форме реквизитов клиента Третьего лица, приоритет параметра Priority = "0"
    # :assert: В ЕРК у клиента Владельца карт-счета значение параметра "Электронный почтовый ящик" (sprCode = "EMAIL") с наименьшим приоритетом изменилось на значение Value = "Не определено"
    # :assert: В ЕРК у клиента Третьего лица значение параметра "Электронный почтовый ящик" (sprCode = "EMAIL") с наименьшим приоритетом изменилось на значение Value = "Не определено"
    # :assert: Создается задача "Проверка клиента в KYC(Siron)" после Сохранения клиентов.
    # :assert: Статус заявки "Отправлена на дополнительную проверку"
    # :assert: Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admin
    # :assert: Перешли на форму "Проверка клиента в KYC(Siron)", на которой отображаются:
    # :assert: ИД заявки,
    # :assert: в блоке "Результат проверки" отображаются результаты по обоим Клиентам:
    # :assert: "Клиент [ФИО Клиента] Совпадений нет после проверки"
    # :assert: "Клиент [ФИО Клиента третьего лица] На проверке УФМ (произошло совпадение"),
    # :assert: текст из справочника "Информационные блоки ЕФР" для "Уведомления о совпадении со списками в Siron KYC"
    # :assert: активные кнопки "Обновить" и "Отмена", неактивная кнопка "Завершить".
    # :assert: На заявке созданы параметры kycCompleted = "нет", kycId = ID для проверки в Siron ("EFR2456090_3e785" - сгенерирован по маске «EFR[№ заявки]_[N рандомных символов]», общая длина не превышает 16 символов), kycStatus = "inconspic",  kycComment = "Статус inconspic успешно установлен", kycDate = [дата_время] выполнения проверки,
    # :assert: kycId_thirdperson = ID для проверки в Siron по третему лицу("EFR2456090_5ee4e" - сгенерирован по маске «EFR[№ заявки]_[N рандомных символов]», общая длина не превышает 16 символов), kycStatus_thirdperson = "check",  kycComment_thirdperson = "Статус check успешно установлен", kycDate_thirdperson = [дата_время] выполнения проверки
    # :assert: на пользователей с ролью admins и email-адреса из itwCredo-kyc.properties отправлено уведомление с темой "Совпадение в ЕФР со списками по заявке [№заявки]" и текстом из параметра на варианте параметр kycEmailTemplate
    # :assert: происходит автоматическое обновление проверки результата обработки УФМ учетом рабочего времени роли и интервала из itwCredo-kyc.properties
    # :step: Меняем статус проверки Siron у Клиента-третьего лица на "Отложен УФМ" (pending)
    # :assert: Пользователь находится на форме задачи, по таймеру (timeout из itwCredo-kyc.properties)результат обновился на форме автоматически, без обновления страницы браузера пользователем
    # :assert: форма обновилась: по третему лицу результат проверки изменяется на "Отложен УФМ", текст с уведомлением убирается
    # :assert: активируется кнопка "Завершить"
    # :assert: изменяются параметры заявки kycStatus_thirdperson = "pending",  kycComment_thirdperson = "Статус pending успешно установлен", kycDate_thirdperson
    # :assert: автоматическое обновление проверки результата обработки УФМ учетом рабочего времени роли и интервала из itwCredo-kyc.properties продолжается
    # :step: Меняем статус проверки Siron у Клиента-третьего лица на "Совпадений нет после проверки" (inconspic) в период между автоматическими проверками
    # :assert: Результат проверки на форме по третьему лицу становится "Совпадений нет после проверки" - конечный статус KYC inconspic
    # :assert: Кнопка "Обновить" становится неактивной
    # :assert: изменяются параметры заявки: kycStatus_thirdperson = "inconspic",  kycComment_thirdperson = "Статус inconspic успешно установлен", kycDate_thirdperson
    # :step: Нажимаем кнопку "Завершить"
    # :assert: автоматическое обновление проверки результата обработки УФМ прекращается

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров для формирования договоров" выбираем "Код доверенности"
    value = 'Доверенность №1...'
    # :step: Нажимаем кнопку "Завершить'

    # :newpage: #######################################################################################################

    # :step: На форме "Завершение оформления дополнительной карточки" по ссылке "Печать доверенности" скачиваем документ
    # :step: Устанавливаем чекбокс "Доверенность оформлена"
    # :step: Устанавливаем чекбокс "Документы по заявке подготовлены"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: В профиле клиента Продолжаем заявку (задача "Выбор получателя платежной карточки")

    # :newpage: #######################################################################################################

    # :step: На форме "Выбор получателя платежной карточки" выбираем "Получатель"
    value = 'Доверенное лицо'
    # :step: Заполняем "№ доверенности"
    value = '123УК56-1'
    # :step: Нажимаем кнопку "Поиск клиента"

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск третьего лица в учетной системе Банка" заполняем поле "Личный номер"
    value = '7905456A553PB1'
    # :step: Нажимаем кнопку "Поиск карточки клиента"
    # :step: Нажимаем на найденную карточку клиента

    # :newpage: #######################################################################################################
   # :assert: На форме "Реквизиты клиента" отсутствует блок "Подключение к ДБО"
    # :step: На форме "Реквизиты клиента" редактируем поле "Мобильный телефон" уникальным значением, по которому в ЕРК НЕ будут найдены дубликаты
    value = '+375338710926'
    # :step: Очищаем поле "E-mail"
    value = ''
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Выдача платежной карточки", устанавливаем чекбокс "Копия документа, удостоверяющего личность доверенного лица, изготовлена"
    # :step: Устанавливаем чекбокс "Копия нотариальной доверенности изготовлена"
    # :step: Печатаем расписку по ссылке на форме
    # :step: Устанавливаем чекбокс "Расписка оформлена"
    # :step: Нажимаем кнопку "Завершить выдачу карточки"

    # :newpage: #######################################################################################################

    # :step: На форме "Подготовка документов к передаче на хранение", устанавливаем чекбокс "Документы по заявке подготовлены"
    # :step: Нажимаем кнопку "Далее"
    # :assert: заявка завершается исполнением, статус "Окончена обработка"
    # :assert: В ЕРК не найдены клиенты с моб. телефонами дубликатами обновленного моб. телефона клиента Получателя карточки
    # :assert: В логах заявки request.log перед блоком сохранения данных "id='_18' name='Сохранение данных клиента' action='onEntry'" отображаются логи блока поиска дубликатов номера моб. телефона в ЕРК "id='_5' name='Поиск дублирования Мобильного телефона'", с параметрами запроса к ЕРК. В блоке отображается пустой список ЕРК кодов клиентов с дубликатами моб. номера клиента Получателя карточки ("dubilcateErkCodes="). Логи блока корректировки дубликатов не отображаются.
    # :assert: В ЕРК у клиента Получателя карточки значение параметра "Мобильный телефон" (sprCode = "PHONE_MOBILE") обновилось, PhoneNumber = "375254319293", в соответствии с ранее введеным значением на форме реквизитов клиента Получателя карточки, приоритет параметра Priority = "0"
    # :assert: В ЕРК у клиента Получателя карточки значение параметра "Электронный почтовый ящик" (sprCode = "EMAIL") с наименьшим приоритетом изменилось на значение Value = "Не определено"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_51733_2(app, credo_db):
    """
    {#
        :id:                51733_2
        :priority:          Средний
        :module:            Кредитование
        :description:       Проверка срабатывания стоп-фактора А1, сохранение параметра заявки stop_factor «Найденный стоп-фактор». Проверка запроса в (KYC)Siron со статусом check, pending. Проверка работы кнопки "Обновить". Проверка автоматического запроса в (KYC)Siron (58486) Проверка передачи typeSubject в ЕРК для видов занятости (ИП, Собственник предприятия)
        :precondition:      Пользователь авторизирован в СКЗ только с ролями front_office, front_office_drive, front_office_factoring_ziko, сredit_expert, InsuranceBPK
        :precondition:      Подготовлен файл 6090883K383GB5.xml (Есть факты (1 и более) привлечения к уголовной ответственности за последние 5 лет и количество действующих и закрытых кредитов равно нулю)
        :precondition:      В справочнике "Настройки определения стоп-факторов" в строке "fast_money_NEW" присутствует стоп-фактор A1
        :precondition:      Параметр пользователя useNewCabinet ("Использование нового интерфейса") = "да"
        :precondition:      На параметрах варианта параметр useAutomaticMovementScheme = нет
        :precondition:      На параметрах варианта параметр forms_check_required = да
        :precondition:      У клиента отсутствуют данные о видах занятости
        :precondition:      На продукте/варианте параметр needPreActualization = нет
        :precondition:      На варианте параметр useExtendedForms (Использовать формы с доп. полями) = "нет"
        :precondition:      Справочник "Банки РБ" заполнен
        :precondition:      На продукте/варианте параметр doKyc = да
        :precondition:      в (KYC)Siron клиент имеет статус check
        :precondition:      в (KYC)Siron Комментарий = Статус check успешно установлен
        :precondition:      В файле itwcredo-kyc.properties параметр workingTimeRole=front_office
        :precondition:      В файле itwcredo-kyc.properties параметр timeout=300
        :precondition:      Системное время = 12:30
        :precondition:      Для роли front_office установлено начало рабочего времени = 13:00
        :precondition:      Пользователь maslova только с ролью admins
        :precondition:      У пользователя hominskaya есть все роли, кроме admins
        :precondition:      В справочнике "ИНФОРМАЦИОННЫЕ БЛОКИ ЕФР" в строке с Идентификатор блока = "wait_for_ufm" содердит текст = "Ожидайте результат проверки УФМ.<br/>Режим работы УФМ:<br/>Пн-Чт: 08:30 – 17:30*<br/>Пт: 08:30 – 16:15*.<br/>Сб-Вскр – выходные.<br/>*в предпраздничные дни режим работы сокращен на 1 час. <br/> Тест"
        :source_point:      51733, 57422, 57657, 58486, 58550
        :comment:           стоп-фактор A1 - Есть факты (1 и более) "Привлечения к уголовному судопроизводству за 5 лет" и количество "действующих" и "закрытых" кредитов равно нулю
        :comment:           Задача "Проверка клиента в KYC(Siron)" должна назначаться инициатору, роли admins
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 105 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 105 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'CreditCardSales'

    VARIANT = 'fast_money'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный номер"
    value = '6090883K383GB5'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Предоставление кредита'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Быстрые деньги'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "ВВОД КЛЮЧЕВЫХ ДАННЫХ ЗАЯВИТЕЛЯ" нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: На форме "Отображение заявок и договоров клиента" выбираем тип заявки
    value = 'Новый кредит'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: Указываем "Семейное положение"
    value = 'Женат (замужем)'
    # :step: Указываем "Количество иждивенцев"
    value = '0'
    # :step: Выбираем новый вид занятости
    value = 'Индивидуальный предприниматель'
    # :step: Выбираем источник дохода
    value = 'справка'
    # :step: Заполняем регистрационный номер справки
    value = '1234'
    # :step: Заполняем дату регистрации справки
    value = '02.02.2022'
    # :step: Выбираем вид уплачиваемых налогов
    value = 'единый налог'
    # :step: Заполняем налог к уплате (BYN)
    value = '500'
    # :step: Заполняем выручку по декларации (BYN)
    value = '1000'
    # :step: Заполняем сумму расходов по деятельности за отчётный период
    value = '300'
    # :step: Заполняем количество отчётных месяцев
    value = '2'
    # :step: Выбираем образование
    value = 'Высшее'
    # :step: Заполняем стаж на последнем месте работы (годы)
    value = '5'
    # :step: Заполняем стаж на последнем месте работы (месяцы)
    value = '7'
    # :step: Заполняем УНП организации
    value = '333333333'
    # :step: Выбираем новый второй вид занятости
    value = 'Собственник предприятия'
    # :step: Выбираем источник дохода
    value = 'Справка'
    # :step: Заполняем среднемесячный доход к выдаче
    value = '80000'
    # :step: Заполняем регистрационный номер справки
    value = '4321'
    # :step: Заполняем дату регистрации справки
    value = '02.02.2020'
    # :step: Заполняем наименование предприятия
    value = '123'
    # :step: Заполняем долю собственного участия, %
    value = '51'
    # :step: Выбираем образование
    value = 'Высшее'
    # :step: Заполняем стаж на последнем месте работы (годы)
    value = '6'
    # :step: Заполняем стаж на последнем месте работы (месяцы)
    value = '9'
    # :step: Заполняем УНП организации
    value = '212222222'
    # :step: Заполняем запрашиваемую сумму
    value = '500'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: На форме "ФОРМИРОВАНИЕ И ПЕЧАТЬ ДОКУМЕНТОВ" заполняем поле согласие на осуществление рекламных рассылок
    value = 'Согласие получено'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: Создана задача "Проверка клиента в KYC(Siron)"
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для инициатора заявки
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для пользователя с ролью admins (maslova)
    # :assert: Задача "Проверка клиента в KYC(Siron)" недоступна для пользователей без роли admins
    # :assert: По заявке установлен статус "Отправлена на дополнительную проверку"
    # :assert: На форме в блоке "Результат проверки" отображается текст: "На проверке УФМ (произошло совпадение)"
    # :assert: На форме отображается текст: "Ожидайте результат проверки УФМ. Режим работы УФМ: Пн-Чт: 08:30 – 17:30* Пт: 08:30 – 16:15*. Сб-Вскр – выходные. *в предпраздничные дни режим работы сокращен на 1 час. Тест"
    # :assert: На параметрах заявки параметр kycId = EFR2456374_7425d (EFR[№ заявки]_[N рандомных символов])
    # :assert: На параметрах заявки параметр kycStatus = check
    # :assert: На параметрах заявки параметр kycComment = Статус check успешно установлен
    # :assert: На пользователей с ролью admins и и на адресс credospam@itworks.by пришло сообщение "Произошло совпадение в ЕФР со списками ФАМР ФАМР ФАМР (ID EFR2456772_c98bb) при оформлении заявки 2456772 по варианту (Предоставление кредита) Быстрые деньги. Сумма: 500 BYN Работник банка: Маслов Вадим Алексеевич. Телефон:
    # :assert: Кнопка "Завершить" недоступна
    # :assert: Кнопка "Обновить" доступна
    # :step: в KYC(Siron) устанавливаем статус pending
    # :step: Ожидаем 300 с
    # :assert: Автоматическое обновление не произошло
    # :step: Нажимаем кнопку "Обновить"
    # :assert: На форме в блоке "Результат проверки" отображается текст: "Отложен УФМ"
    # :assert: На параметрах заявки параметр kycStatus = pending
    # :assert: Кнопка "Завершить" доступна
    # :assert: Кнопка "Обновить" доступна
    # :step: в KYC(Siron) устанавливаем статус check
    # :step: Ожидаем 300 с
    # :assert: Автоматическое обновление не произошло
    # :step: Нажимаем кнопку "Обновить"
    # :assert: На параметрах заявки параметр kycStatus = check
    # :step: Ожидаем наступления рабочего времени для роли front_office
    # :assert: Автоматическое обновление произошло
    # :assert: На параметрах заявки параметр kycStatus = pending
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: В ЕРК переданы значения для видов занятости заявителя typeSubject="3" (Индивидуальный предприниматель) и typeSubject="2" (Собственник предприятия)
    # :assert: Заявка в статусе "Общая форма кредитного эксперта"
    # :step: Переходим на форму кредитного эксперта
    # :assert: Обнаруженный стоп-фактор = А1
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: На заявке параметр stop_factor имеет знаение = А1

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_51733_10(app, credo_db):
    """
    {#
        :id:                51733_10
        :priority:          Средний
        :module:            Кредитование
        :description:       Автокредитование (КА). Проверка срабатывания стоп-фактора А1, сохранение параметра заявки stop_factor «Найденный стоп-фактор». Проверка запроса в (KYC)Siron со статусом check, pending. Првоерка работы кнопки "Обновить". (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь авторизирован в СКЗ только с ролями front_office, front_office_drive, front_office_factoring_ziko, credit_expert, InsuranceBPK
        :precondition:      На параметрах варианта параметр useAutomaticMovementScheme = нет
        :precondition:      На параметрах варианта параметр forms_check_required = да
        :precondition:      Подготовлен файл 6090883K383GB5.xml (Есть факты (1 и более) привлечения к уголовной ответственности за последние 5 лет и количество действующих и закрытых кредитов равно нулю)
        :precondition:      Подготовлен файл 6090883K383GB5_11012.xml (нет действующих и закрытых кредитов)
        :precondition:      В справочнике "Настройки определения стоп-факторов" в строке "default_NEW" присутствует стоп-фактор A1
        :precondition:      Параметр пользователя useNewCabinet ("Использование нового интерфейса") = "нет"
        :precondition:      Существующий Клиент. По Клиенту доступно оформление кредита «Автокредитование (КА)»
        :precondition:      На продукте/варианте параметр doKyc = да
        :precondition:      На продукте/варианте параметр needPreActualization = нет
        :precondition:      в (KYC)Siron клиент имеет статус check
        :precondition:      в (KYC)Siron Комментарий = Статус check успешно установлен
        :precondition:      В файле itwcredo-kyc.properties параметр workingTimeRole=front_office
        :precondition:      В файле itwcredo-kyc.properties параметр timeout=300
        :precondition:      Системное время = 12:30
        :precondition:      Для роли front_office установлено начало рабочего времени = 13:00
        :precondition:      Пользователь maslova только с ролью admins
        :precondition:      Пользователь semenov только с ролью front_office
        :precondition:      Пользователь savchuk только с ролью front_office_drive
        :precondition:      У пользователя hominskaya есть все роли, кроме admins, front_office, front_office_drive
        :precondition:      В справочнике "ИНФОРМАЦИОННЫЕ БЛОКИ ЕФР" в строке с Идентификатор блока = "wait_for_ufm" содердит текст = "Ожидайте результат проверки УФМ.<br/>Режим работы УФМ:<br/>Пн-Чт: 08:30 – 17:30*<br/>Пт: 08:30 – 16:15*.<br/>Сб-Вскр – выходные.<br/>*в предпраздничные дни режим работы сокращен на 1 час. <br/> Тест"
        :source_point:      51733, 57422, 57657, 58550
        :comment:           Стоп-фактор A1 - Есть факты (1 и более) "Привлечения к уголовному судопроизводству за 5 лет" и количество "действующих" и "закрытых" кредитов равно нулю
        :comment:           Задача "Проверка клиента в KYC(Siron)" должна назначаться инициатору, роли admins и роли "front_office%", найденной на пользователе, но не ролям "front_office_factoring%" при этом
        :tc_type:           +
        :db_env:            База: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 103 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 103 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'CreditCardSalesAuto'

    VARIANT = 'auto_credit_pos_credit'


    # :newpage: #######################################################################################################

    # :step: На форме "Ввод ключевых данных заявителя" поле "Страна резидентства" заполняется автоматически. Не доступно для редактирования
    value = 'БЕЛАРУСЬ'
    # :step: На форме "Ввод ключевых данных заявителя" заполняем поле "Личный номер (для граждан РБ)/Номер паспорта (для иностранных граждан)"
    value = '6090883K383GB5'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: На параметрах заявки создан параметр doKyc = Да
    # :step: На варианте изменяем параметр doKyc = Нет
    # :step: Выбираем значение поля Тип заявки
    value = 'Новый кредит'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: Заполняем поле "Имя латинскими буквами"
    value = 'ANNA'
    # :step: Заполняем поле "Фамилия латинскими буквами"
    value = 'OLUHEI'
    # :step: Заполняем поле "Домашний телефон"
    value = '+375653686318'
    # :step: Заполняем поле "Кодовое слово"
    value = 'код'
    # :step: Заполняем поле "Место проживания"
    value = 'Собственный дом'
    # :step: Заполняем поле "Семейное положение"
    value = 'Холост(не замужем)'
    # :step: Заполняем поле "Количество иждивенцев"
    value = '0'
    # :step: Заполняем поле "Источник дохода"
    value = 'справка'
    # :step: Заполняем поле "Среднемесячный доход к выдаче"
    value = '3000'
    # :step: Регистрационный номер справки
    value = '123456'
    # :step: Дата регистрации справки
    value = '12.12.2021'
    # :step: Заполняем поле Вид занятости
    value = 'По найму'
    # :step: Заполняем поле "Наименование предприятия"
    value = 'ОАО «Белгазпромбанк»'
    # :step: Заполняем поле "Форма трудоустройства"
    value = 'Контракт'
    # :step: Заполняем поле "Образование"
    value = 'Высшее'
    # :step: Заполняем поле "Должность"
    value = 'Делопроизводитель'
    # :step: Заполняем поле "Стаж на последнем месте работы (годы)"
    value = '2'
    # :step: Заполняем поле "Стаж на последнем месте работы (месяцы)"
    value = '5'
    # :step: Заполняем поле "УНП организации"
    value = '000000124'
    # :step: Заполняем поле "Запрашиваемая сумма"
    value = '1500'
    # :step: Заполняем поле "Стоимость автомобиля по договору"
    value = '2000'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: Скачиваем "Анкету и согласие клиента" на форме "Формирование и печать документов"
    # :step: Из выпадающего списка "Согласие на осуществление рекламных рассылок" выбираем значение
    value = 'Согласие получено'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: Создана задача "Проверка клиента в KYC(Siron)"
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для инициатора заявки
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для пользователя с ролью admins (maslova)
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для пользователя с ролью front_office (semenov)
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для пользователя с ролью front_office_drive (savchuk)
    # :assert: Задача "Проверка клиента в KYC(Siron)" недоступна для пользователей без роли admins или "front_office%", найденной на инициаторе заявки, но не с ролями "front_office_factoring%" (hominskaya)
    # :assert: По заявке установлен статус "Отправлена на дополнительную проверку"
    # :assert: На форме в блоке "Результат проверки" отображается текст: "На проверке УФМ (произошло совпадение)"
    # :assert: На форме отображается текст: "Ожидайте результат проверки УФМ. Режим работы УФМ: Пн-Чт: 08:30 – 17:30* Пт: 08:30 – 16:15*. Сб-Вскр – выходные. *в предпраздничные дни режим работы сокращен на 1 час. Тест"
    # :assert: На параметрах заявки параметр kycId = EFR2456374_7425d (EFR[№ заявки]_[N рандомных символов])
    # :assert: На пользователей с ролью admins и и на адресс credospam@itworks.by пришло сообщение "Произошло совпадение в ЕФР со списками ФАМР ФАМР ФАМР (ID EFR2456772_c98bb) при оформлении заявки 2456772 по варианту (Предоставление кредита) Быстрые деньги. Сумма: 500 BYN Работник банка: Маслов Вадим Алексеевич. Телефон:
    # :assert: На параметрах заявки параметр kycStatus = check
    # :assert: На параметрах заявки параметр kycComment = Статус check успешно установлен
    # :assert: Кнопка "Завершить" недоступна
    # :assert: Кнопка "Обновить" доступна
    # :step: в KYC(Siron) устанавливаем статус pending
    # :step: Ожидаем 300 с
    # :assert: Автоматическое обновление не произошло
    # :step: Нажимаем кнопку "Обновить"
    # :assert: На форме в блоке "Результат проверки" отображается текст: "Отложен УФМ"
    # :assert: На параметрах заявки параметр kycStatus = pending
    # :assert: Кнопка "Завершить" доступна
    # :assert: Кнопка "Обновить" доступна
    # :step: в KYC(Siron) устанавливаем статус check
    # :step: Ожидаем 300 с
    # :assert: Автоматическое обновление не произошло
    # :step: Нажимаем кнопку "Обновить"
    # :assert: На параметрах заявки параметр kycStatus = check
    # :step: Ожидаем наступления рабочего времени для роли front_office
    # :assert: Автоматическое обновление произошло
    # :assert: На параметрах заявки параметр kycStatus = pending
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: Переходим на форму кредитного эксперта
    # :assert: Обнаруженный стоп-фактор = А1
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: На заявке параметр stop_factor имеет знаение = А1

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_51733_17(app, credo_db):
    """
    {#
        :id:                51733_17
        :priority:          Средний
        :module:            Кредитование
        :description:       Предоставление кредита (КА). Проверка срабатывания стоп-фактора А1, сохранение параметра заявки stop_factor «Найденный стоп-фактор». Проверка запроса в (KYC)Siron со статусом check, pending. Првоерка работы кнопки "Обновить". Проверка автоматического запроса в (KYC)Siron (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь авторизирован в СКЗ только с ролями front_office, front_office_drive, front_office_factoring_ziko, credit_expert, InsuranceBPK
        :precondition:      На параметрах варианта параметр useAutomaticMovementScheme = нет
        :precondition:      На параметрах варианта параметр forms_check_required = да
        :precondition:      Подготовлен файл 6090883K383GB5.xml (Есть факты (1) привлечения к уголовной ответственности за последние 5 лет и количество действующих и закрытых кредитов равно нулю)
        :precondition:      В справочнике "Настройки определения стоп-факторов" в строке "cart_pokup_NEW" присутствует стоп-фактор A1
        :precondition:      Параметр пользователя useNewCabinet ("Использование нового интерфейса") = "нет"
        :precondition:      Существующий Клиент. По Клиенту доступно оформление кредита «Предоставление кредита (КА)»
        :precondition:      На продукте/варианте параметр doKyc = да
        :precondition:      На продукте/варианте параметр needPreActualization = нет
        :precondition:      в (KYC)Siron клиент имеет статус check
        :precondition:      в (KYC)Siron Комментарий = Статус check успешно установлен
        :precondition:      В файле itwcredo-kyc.properties параметр workingTimeRole=front_office
        :precondition:      В файле itwcredo-kyc.properties параметр timeout=300
        :precondition:      Системное время = 12:30
        :precondition:      Для роли front_office установлено начало рабочего времени = 13:00
        :precondition:      Пользователь maslova только с ролью admins
        :precondition:      Пользователь semenov только с ролью front_office
        :precondition:      Пользователь savchuk только с ролью front_office_drivee
        :precondition:      У пользователя hominskaya есть все роли, кроме admins, front_office, front_office_drive
        :precondition:      В справочнике "ИНФОРМАЦИОННЫЕ БЛОКИ ЕФР" в строке с Идентификатор блока = "wait_for_ufm" содердит текст = "Ожидайте результат проверки УФМ.<br/>Режим работы УФМ:<br/>Пн-Чт: 08:30 – 17:30*<br/>Пт: 08:30 – 16:15*.<br/>Сб-Вскр – выходные.<br/>*в предпраздничные дни режим работы сокращен на 1 час. <br/> Тест"
        :source_point:      51733, 57422, 57657, 58550
        :comment:           стоп-фактор A1 - Есть факты (1 и более) "Привлечения к уголовному судопроизводству за 5 лет" и количество "действующих" и "закрытых" кредитов равно нулю
        :comment:           Задача "Проверка клиента в KYC(Siron)" должна назначаться инициатору, роли admins и роли "front_office%", найденной на пользователе, но не ролям "front_office_factoring%" при этом
        :tc_type:           +
        :db_env:            База: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 103 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 103 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'CreditCardSalesAgent'

    VARIANT = 'cart_pokup_insaiel'


    # :newpage: #######################################################################################################

    # :step: На форме "Ввод ключевых данных заявителя" поле "Страна резидентства" заполняется автоматически. Не доступно для редактирования
    value = 'БЕЛАРУСЬ'
    # :step: На форме "Ввод ключевых данных заявителя" заполняем поле "Личный номер (для граждан РБ)/Номер паспорта (для иностранных граждан)"
    value = '6090883K383GB5'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: На параметрах заявки создан параметр doKyc = Да
    # :step: На варианте изменяем параметр doKyc = Нет
    # :step: Выбираем значение поля Тип заявки
    value = 'Новый кредит'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: Заполняем поле "Имя латинскими буквами"
    value = 'ANNA'
    # :step: Заполняем поле "Фамилия латинскими буквами"
    value = 'OLUHEI'
    # :step: Заполняем поле "Домашний телефон"
    value = '+375653686318'
    # :step: Заполняем поле "Кодовое слово"
    value = 'код'
    # :step: Заполняем поле "Место проживания"
    value = 'Собственный дом'
    # :step: Заполняем поле "Семейное положение"
    value = 'Холост(не замужем)'
    # :step: Заполняем поле "Количество иждивенцев"
    value = '0'
    # :step: Заполняем поле "Источник дохода"
    value = 'справка'
    # :step: Заполняем поле "Среднемесячный доход к выдаче"
    value = '3000'
    # :step: Регистрационный номер справки
    value = '123456'
    # :step: Дата регистрации справки
    value = '12.12.2021'
    # :step: Заполняем поле Вид занятости
    value = 'По найму'
    # :step: Заполняем поле "Наименование предприятия"
    value = 'ОАО «Белгазпромбанк»'
    # :step: Заполняем поле "Форма трудоустройства"
    value = 'Контракт'
    # :step: Заполняем поле "Образование"
    value = 'Высшее'
    # :step: Заполняем поле "Должность"
    value = 'Делопроизводитель'
    # :step: Заполняем поле "Стаж на последнем месте работы (годы)"
    value = '2'
    # :step: Заполняем поле "Стаж на последнем месте работы (месяцы)"
    value = '5'
    # :step: Заполняем поле "УНП организации"
    value = '000000124'
    # :step: Заполняем поле "Маска карты" заранее найденной незанятой болванки
    value = '530422xxxx003896'
    # :step: Заполняем поле "Запрашиваемая сумма"
    value = '1000'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: Скачиваем "Анкету и согласие клиента" на форме "Формирование и печать документов"
    # :step: Из выпадающего списка "Согласие на осуществление рекламных рассылок" выбираем значение
    value = 'Согласие получено'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: Создана задача "Проверка клиента в KYC(Siron)"
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для инициатора заявки
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для пользователя с ролью admins (maslova)
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для пользователя с ролью front_office (semenov)
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для пользователя savchuk
    # :assert: Задача "Проверка клиента в KYC(Siron)" недоступна для пользователей без роли admins или "front_office%", найденной на инициаторе заявки, но не с ролями "front_office_factoring%" (hominskaya)
    # :assert: По заявке установлен статус "Отправлена на дополнительную проверку"
    # :assert: На форме в блоке "Результат проверки" отображается текст: "На проверке УФМ (произошло совпадение)"
    # :assert: На форме отображается текст: "Ожидайте результат проверки УФМ. Режим работы УФМ: Пн-Чт: 08:30 – 17:30* Пт: 08:30 – 16:15*. Сб-Вскр – выходные. *в предпраздничные дни режим работы сокращен на 1 час. Тест"
    # :assert: На параметрах заявки параметр kycId = EFR2456374_7425d (EFR[№ заявки]_[N рандомных символов])
    # :assert: На параметрах заявки параметр kycStatus = check
    # :assert: На параметрах заявки параметр kycComment = Статус check успешно установлен
    # :assert: На пользователей с ролью admins и и на адресс credospam@itworks.by пришло сообщение "Произошло совпадение в ЕФР со списками ФАМР ФАМР ФАМР (ID EFR2456772_c98bb) при оформлении заявки 2456772 по варианту (Предоставление кредита) Быстрые деньги. Сумма: 500 BYN Работник банка: Маслов Вадим Алексеевич. Телефон:
    # :assert: Кнопка "Завершить" недоступна
    # :assert: Кнопка "Обновить" доступна
    # :step: в KYC(Siron) устанавливаем статус pending
    # :step: Ожидаем 300 с
    # :assert: Автоматическое обновление не произошло
    # :step: Нажимаем кнопку "Обновить"
    # :assert: На форме в блоке "Результат проверки" отображается текст: "Отложен УФМ"
    # :assert: На параметрах заявки параметр kycStatus = pending
    # :assert: Кнопка "Завершить" доступна
    # :assert: Кнопка "Обновить" доступна
    # :step: в KYC(Siron) устанавливаем статус check
    # :step: Ожидаем 300 с
    # :assert: Автоматическое обновление не произошло
    # :step: Нажимаем кнопку "Обновить"
    # :assert: На параметрах заявки параметр kycStatus = check
    # :step: Ожидаем наступления рабочего времени для роли front_office
    # :assert: Автоматическое обновление произошло
    # :assert: На параметрах заявки параметр kycStatus = pending
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: Переходим на форму кредитного эксперта
    # :assert: Обнаруженный стоп-фактор = А1
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: На заявке параметр stop_factor имеет знаение = А1

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_51733_31(app, credo_db):
    """
    {#
        :id:                51733_31
        :priority:          Средний
        :module:            Кредитование
        :description:       Поручительство. Проверка срабатывания стоп-фактора А1, сохранение параметра заявки stop_factor «Найденный стоп-фактор». Проверка запроса в (KYC)Siron со статусом check, pending. Првоерка работы кнопки "Обновить". Проверка автоматического запроса в (KYC)Siron (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь авторизирован в СКЗ только с ролями front_office, front_office_drive, front_office_factoring_ziko, credit_expert, InsuranceBPK
        :precondition:      Подготовлен файл 6090883K383GB5.xml (Есть факты (1 и более) привлечения к уголовной ответственности за последние 5 лет и количество действующих и закрытых кредитов равно нулю)
        :precondition:      В справочнике "Настройки определения стоп-факторов" в строке "default_NEW" присутствует стоп-фактор A1
        :precondition:      Параметр пользователя useNewCabinet ("Использование нового интерфейса") = "да"
        :precondition:      В системе есть заявка Предоставление кредита/ Скоро новоселье в статусе "Начата обработка" c пустым параметром guarantee (ИД заявки = 2451354)
        :precondition:      На параметрах варианта параметр useAutomaticMovementScheme = нет
        :precondition:      На параметрах варианта параметр forms_check_required = да
        :precondition:      Существующий Клиент. По Клиенту доступно оформление кредита "Предоставление кредита (Поручительство)"
        :precondition:      На продукте/варианте параметр doKyc = да
        :precondition:      На продукте/варианте параметр needPreActualization = нет
        :precondition:      в (KYC)Siron клиент имеет статус check
        :precondition:      в (KYC)Siron Комментарий = Статус check успешно установлен
        :precondition:      В файле itwcredo-kyc.properties параметр workingTimeRole=front_office
        :precondition:      В файле itwcredo-kyc.properties параметр timeout=300
        :precondition:      Системное время = 12:30
        :precondition:      Для роли front_office установлено начало рабочего времени = 13:00
        :precondition:      Пользователь maslova только с ролью admins
        :precondition:      Пользователь semenov только с ролью front_office
        :precondition:      Пользователь savchuk только с ролью front_office_drive
        :precondition:      У пользователя hominskaya есть все роли, кроме admins, front_office, front_office_drive
        :precondition:      В справочнике "ИНФОРМАЦИОННЫЕ БЛОКИ ЕФР" в строке с Идентификатор блока = "wait_for_ufm" содердит текст = "Ожидайте результат проверки УФМ.<br/>Режим работы УФМ:<br/>Пн-Чт: 08:30 – 17:30*<br/>Пт: 08:30 – 16:15*.<br/>Сб-Вскр – выходные.<br/>*в предпраздничные дни режим работы сокращен на 1 час. <br/> Тест"
        :source_point:      51733, 57422, 57657, 58550
        :comment:           стоп-фактор A1 - Есть факты (1 и более) "Привлечения к уголовному судопроизводству за 5 лет" и количество "действующих" и "закрытых" кредитов равно нулю
        :comment:           Задача "Проверка клиента в KYC(Siron)" должна назначаться инициатору, роли admins и роли "front_office%", найденной на пользователе, но не ролям "front_office_factoring%" при этом
        :tc_type:           +
        :db_env:            База: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 103 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 103 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'CreditCardSales'

    VARIANT = 'fast_money_novoselie_guarantee'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный номер"
    value = '6090883K383GB5'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Предоставление кредита'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Скоро новоселье - поручитель'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "ВВОД КЛЮЧЕВЫХ ДАННЫХ ЗАЯВИТЕЛЯ" нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: На параметрах заявки создан параметр doKyc = Да
    # :step: На варианте изменяем параметр doKyc = Нет
    # :step: На форме "Отображение заявок и договоров клиента" выбираем тип заявки
    value = 'Новый кредит'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: Заполняем поле "Место проживания"
    value = 'Собственный дом'
    # :step: Заполняем поле "Источник дохода"
    value = 'справка'
    # :step: Заполняем поле "Среднемесячный доход за последние 3 месяца"
    value = '1000'
    # :step: Регистрационный номер справки
    value = '123456'
    # :step: Дата регистрации справки
    value = '02.02.2022'
    # :step: Заполняем поле Вид занятости
    value = 'По найму'
    # :step: Заполняем поле "Наименование предприятия"
    value = 'ОАО «Белгазпромбанк»'
    # :step: Заполняем поле "Форма трудоустройства"
    value = 'Контракт'
    # :step: Заполняем поле "Стаж на последнем месте работы (годы)"
    value = '0'
    # :step: Заполняем поле "Стаж на последнем месте работы (месяцы)"
    value = '10'
    # :step: Заполняем поле "УНП организации"
    value = '000000124'
    # :step: Выбираем Поручителя по заявке
    value = '2451354, Скоро новоселье, Начата обработка,сумма 1500 руб.'
    # :step: Заполняем поле "Запрашиваемая сумма"
    value = '1500'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: На форме "ФОРМИРОВАНИЕ И ПЕЧАТЬ ДОКУМЕНТОВ" заполняем поле согласие на осуществление рекламных рассылок
    value = 'Согласие получено'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: Создана задача "Проверка клиента в KYC(Siron)"
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для инициатора заявки
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для пользователя с ролью admins (maslova)
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для пользователя с ролью front_office (semenov)
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для пользователя с ролью front_office_drive (savchuk)
    # :assert: Задача "Проверка клиента в KYC(Siron)" недоступна для пользователей без роли admins или "front_office%", найденной на инициаторе заявки, но не с ролями "front_office_factoring%" (hominskaya)
    # :assert: По заявке установлен статус "Отправлена на дополнительную проверку"
    # :assert: На форме в блоке "Результат проверки" отображается текст: "На проверке УФМ (произошло совпадение)"
    # :assert: На форме отображается текст: "Ожидайте результат проверки УФМ. Режим работы УФМ: Пн-Чт: 08:30 – 17:30* Пт: 08:30 – 16:15*. Сб-Вскр – выходные. *в предпраздничные дни режим работы сокращен на 1 час. Тест"
    # :assert: На параметрах заявки параметр kycId = EFR2456374_7425d (EFR[№ заявки]_[N рандомных символов])
    # :assert: На пользователей с ролью admins и и на адресс credospam@itworks.by пришло сообщение "Произошло совпадение в ЕФР со списками ФАМР ФАМР ФАМР (ID EFR2456772_c98bb) при оформлении заявки 2456772 по варианту (Предоставление кредита) Быстрые деньги. Сумма: 500 BYN Работник банка: Маслов Вадим Алексеевич. Телефон:
    # :assert: На параметрах заявки параметр kycStatus = check
    # :assert: На параметрах заявки параметр kycComment = Статус check успешно установлен
    # :assert: Кнопка "Завершить" недоступна
    # :assert: Кнопка "Обновить" доступна
    # :step: в KYC(Siron) устанавливаем статус pending
    # :step: Ожидаем 300 с
    # :assert: Автоматическое обновление не произошло
    # :step: Нажимаем кнопку "Обновить"
    # :assert: На форме в блоке "Результат проверки" отображается текст: "Отложен УФМ"
    # :assert: На параметрах заявки параметр kycStatus = pending
    # :assert: Кнопка "Завершить" доступна
    # :assert: Кнопка "Обновить" доступна
    # :step: в KYC(Siron) устанавливаем статус check
    # :step: Ожидаем 300 с
    # :assert: Автоматическое обновление не произошло
    # :step: Нажимаем кнопку "Обновить"
    # :assert: На параметрах заявки параметр kycStatus = check
    # :step: Ожидаем наступления рабочего времени для роли front_office
    # :assert: Автоматическое обновление произошло
    # :assert: На параметрах заявки параметр kycStatus = pending
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: Переходим на форму кредитного эксперта
    # :assert: Обнаруженный стоп-фактор = А1
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: На заявке параметр stop_factor имеет знаение = А1

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53610_68(app, credo_db):
    """
    {#
        :id:                53610_68
        :priority:          Средний
        :module:            Пенсии (пособия)
        :description:       Пенсии. Форма "Оформление документов" при способе оформления заявки "Доверенным лицом" и данные не изменялись. Проверка клиента в KYC(Siron), если статус клиента в Siron KYC равен check/pending/release, статус доверенного лица в Siron KYC равен inconspic. Проверка доступа к задаче «Проверка клиента в KYC(Siron)». Проверка кнопки "Обновить" на форме «Проверка клиента в KYC(Siron)», если check_status = check. Проверка автоматического обновления результата на форме задачи «Проверка клиента в KYC(Siron)», если check_status = pending. Проверка автоматического обновления результата в нерабочее время на форме задачи «Проверка клиента в KYC(Siron)», если check_status = pending (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Клиент существует в учетной системе банка
        :precondition:      Данные клиента совпадают с данными Мин. труда
        :precondition:      Заявление оформляет представитель получателя пенсии (пособия)
        :precondition:      Доверенное лицо существует в учетной системе банка
        :precondition:      У пользователя параметр  useNewCabinet "Использование нового интерфейса" = да
        :precondition:      Пользователь находится в Профиле клиента
        :precondition:      У клиента имеется контракт с базовым счётом в BYN
        :precondition:      Статус клиента в Siron KYC равен check
        :precondition:      Статус доверенного лица в Siron KYC равен inconspic
        :precondition:      В списке параметров продукта "Pension" присутствует параметр needPreActualization ("Необходима предварительная актуализация клиента") со значением "нет"
        :precondition:      На варианте параметр doKyc = Да
        :precondition:      Пользователь maslova только с ролью admins
        :precondition:      Пользователь semenov только с ролью front_office
        :precondition:      У пользователя hominskaya все роли, кроме admins, front_office
        :precondition:      В файле itwcredo-kyc.properties параметр workingTimeRole=front_office
        :precondition:      Для роли front_office установлено начало рабочего времени = 13:00
        :precondition:      Системное время = 12:30
        :precondition:      В itwCredo-kyc.properties внесены соответствующие настройки (kyc.url, emails=credospam@itworks.by, timeout=300, workingTimeRole=front_office)
        :source_point:      53610, 57657, 58550
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :comment:           Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 101 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 100 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 100 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'Pension'

    VARIANT = 'pensionApplicationRequest'


    # :newpage: #######################################################################################################

    # :assert: На параметрах заявки присутствуют параметры doKyc ([KYC] Проверять клиента в KYC) со значением "да"
    # :step: Нажимаем кнопку "Поиск назначений"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #####################################################################################################

    # :step: На форме "«Поиск карточки клиента – получателя пенсии (пособия)»" выбираем карточку клиента

    # :newpage: #####################################################################################################

    # :step: На форме «Заведение/актуализация карточки клиента – получателя пенсии (пособия)» нажимаем кнопку "Далее"

    # :newpage: #####################################################################################################

    # :step: На форме «Определение порядка оформления заявления о перечислении пенсии (пособия)» отмечаем радиобаттоном «Заявление оформляет представитель получателя пенсии (пособия)»
    # :step: Заполняем поле "Номер доверенности"
    value = '123'
    # :step: Заполняем поле "Дата выдачи доверенности"
    value = '08.04.2020'
    # :step: Заполняем поле "Кем выдана доверенность"
    value = 'Нотариус'
    # :step: Заполняем поле "Срок действия (ДД.ММ.ГГГГ)"
    value = '08.04.2023'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #####################################################################################################

    # :step: На форме «Поиск карточки доверенного лица» заполняем поле "Личный номер"
    value = '5080292K376PB4'
    # :step: Нажимаем кнопку "Поиск карточки клиента"
    # :step: Выбираем карточку клиента

    # :newpage: #####################################################################################################

    # :step: На форме «Заведение/актуализация карточки клиента – доверенного лица» нажимаем кнопку "Далее"

    # :newpage: #####################################################################################################

    # :step: Отмечаем радиобаттоном счет
    value = 'BY35OLMP30340000000100000282'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #####################################################################################################

    # :assert: Переходим на форму задачи «Оформление документов»
    # :assert: Установливается статус на заявке «Оформление документов».
    # :step: Нажимаем кнопку "Назад"
    # :assert: Осуществляется переход на форму "Выбор счета для оформления заявления о перечислении пенсии (пособия)"
    # :assert: Заявка переходит в статус «Выбор счета».
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #####################################################################################################

    # :assert: Переходим на форму задачи «Оформление документов»
    # :step: Нажимаем "Печать документов"
    # :assert: На форме отобразилось - Проставьте на форме заявления о перечислении пенсии (пособия) (пункт 3 заявления) - штамп банка; - свою должность; - фамилию и инициалы, - подпись.
    # :assert: На форме отобразилась ссылка для скачивания "Заявление о перечислении пенсии (пособия) на счет физического лица (2 экз.)"
    # :step: Нажимаем на ссылку для скачивания документа "Заявление о перечислении пенсии (пособия) на счет физического лица (2 экз.)"
    # :assert: Документ скачался в формате .pdf
    # :assert: На форме отобразилась ссылка для скачивания "Уведомление физического лица"
    # :step: Нажимаем на ссылку для скачивания документа "Уведомление физического лица"
    # :assert: Документ скачался в формате .pdf
    # :assert: Сформированные документы сохранились на параметры заявки
    # :step: Устанавливаем чекбокс "Документы подписаны, отметки мною проставлены"
    # :step: Нажимаем кнопку "Завершить"
    # :assert: На параметрах заявки создаются параметры kycId ([KYC] ID для проверки в Siron) = EFR2456420_18f31, kycStatus ([KYC] Статус проверки клиента в KYC) = check, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-19T09:41:53, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус check успешно установлен
    # :assert: На параметрах заявки создаются параметры kycId_thirdperson ([KYC] ID для проверки в Siron (третье лицо)) = EFR2456420_22eb6, kycStatus_thirdperson ([KYC] Статус проверки клиента в KYC (третье лицо) = inconspic, kycDate_thirdperson ([KYC] Время проверки клиента в KYC (третье лицо) = 2022-07-19T09:41:53, kycComment_thirdperson ([KYC] Комментарий к проверке клиента в KYC (третье лицо) = Статус inconspic успешно установлен

    # :newpage: #####################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)»
    # :assert: Кнопка "Завершить" не доступна для нажатия
    # :assert: На форме «Проверка клиента в KYC(Siron)» в поле «Результат проверки» отображаются результаты по обоим Клиентам: "Клиент [ФИО Клиента] На проверке УФМ (произошло совпадение)", "Клиент [ФИО Клиента третьего лица] Совпадений нет после проверки"
    # :step: В Siron KYC устанавливаем статус «pending» для клиента
    # :step: Нажимаем кнопку "Обновить" на форме «Проверка клиента в KYC(Siron)»
    # :assert: На параметрах заявки изменяются параметры kycId ([KYC] ID для проверки в Siron) = EFR2456420_18f31, kycStatus ([KYC] Статус проверки клиента в KYC) = pending, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-19T09:46:49, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус pending успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)», в поле «Результат проверки» получен статус по обоим Клиентам: "Клиент [ФИО Клиента] Отложен УФМ", "Клиент [ФИО Клиента третьего лица] Совпадений нет после проверки"
    # :step: В Siron KYC устанавливаем статус release для клиента
    # :step: Ожидаем 300 секунд (timeout=300)
    # :assert: Результат не обновляется на форме автоматически
    # :step: Ожидаем наступления рабочего времени
    # :assert: Результат обновился на форме автоматически, без обновления страницы браузера
    # :assert: На параметрах заявки изменяются параметры kycId ([KYC] ID для проверки в Siron) = EFR2456420_18f31, kycStatus ([KYC] Статус проверки клиента в KYC) = release, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-19T09:52:15, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус release успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)»
    # :assert: На форме «Проверка клиента в KYC(Siron)» в поле «Результат проверки» получен статус по обоим Клиентам: "Клиент [ФИО Клиента] Совпадений нет по результатам проверки УФМ", "Клиент [ФИО Клиента третьего лица] Совпадений нет после проверки"
    # :step: Нажимаем кнопку "Отмена"
    # :assert: заявка доступна инициатору заявки
    # :assert: заявка доступна пользователю с ролью admins (maslova)
    # :assert: заявка доступна пользователю с ролью front_office (semenov)
    # :assert: заявка недоступна пользователю без роли admins или front_office (hominskaya)
    # :step: На форме «Проверка клиента в KYC(Siron)» нажимаем "Завершить"
    # :assert: Статус на заявке «Окончена обработка»

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_54557_2(app, credo_db):
    """
    {#
        :id:                54557_2
        :priority:          Средний
        :module:            Депозиты
        :description:       Оформление НЕ "TERM%" вклада, наличными через Кассу третьим лицом (существующий клиент), в наличной форме пополнения, в иностранной валюте. (56006) Проверка блока "Подключение к ДБО" на форме "Реквизиты клиента". (56634) Проверка установки запрета на использование эл.почты @bgpb.by. (57567) Проверка клиента в KYC(Siron) (check - pending - release). (57840) Проверка отсутствия блока "Подключение к ДБО" на форме реквизитов третьего лица
        :precondition:      Пользователь авторизирован в СКЗ со всеми правами, ролями
        :precondition:      У пользователя СКЗ параметр useNewCabinet ("Использование нового интерфейса") = "Да"
        :precondition:      Владелец вклада - подключенный к ДБО Клиент. Клиент не числится в списках Siron (статус = inconspic (Совпадений нет после проверки)
        :precondition:      Клиент третье лицо - неподключенный к ДБО существующий Клиент. Клиент числится в списках Siron (статус = check (На проверке УФМ (произошло совпадение))
        :precondition:      На продукте\варианте "Банковские вклады"\"Оформление вклада" параметр needPreActualization ("Необходима предварительная актуализация клиента") = "нет", параметр doKyc ([KYC] Проверять клиента в KYC) = "да"
        :precondition:      На продукте\варианте "Банковские вклады"\"Оформление вклада" параметр mandatory_login_dbo = да
        :precondition:      Справочник "Варианты вкладов" заполнен, в справочнике присутствуют вклады в иностранной валюте с параметром "Оформление договора вклада на имя третьего лица" = Да
        :precondition:      В itwCredo-kyc.properties внесены настройки: kyc.url, emails=credospam@itworks.by, timeout=300
        :precondition:      Значение параметра kycEmailTemplate на варианте OpenDeposit - "ТЕСТ - Произошло совпадение в ЕФР со списками [ФИО] (ID [ kycId]]) при оформлении заявки [№заявки] по варианту [(Продукт) Вариант]. Вклад: [depositVariants] ([depositCurrency]) Работник банка: [ФИО сотрудника, оформлявшего заявку]. Телефон: [телефон сотрудника]"
        :precondition:      Текст записи "Уведомления о совпадении со списками в Siron KYC" из справочника «Информационные блоки ЕФР» - "ТЕСТ - Ожидайте результат проверки УФМ. Режим работы УФМ: Пн-Чт: 08:30 – 17:30* Пт: 08:30 – 16:15*. Сб-Вскр – выходные. *в предпраздничные дни режим работы сокращен на 1 час."
        :source_point:      51465, 52812, 53345, 53597, 54355, 54557, 55008, 56006, 56105, 56162, 56564, 56634, 56792, 56953, 57657, 57840, 58550
        :comment:           Вклад "На 3 года безотзывный-стабильный" USD
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :comment:           Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 108 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 106 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 106 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'Deposits'

    VARIANT = 'OpenDeposit'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный (идентификационный) номер" тестового Клиента
    value = '5151161M990GB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Нажимаем на найденную краткую карточку клиента

    # :newpage: #######################################################################################################

    # :step: В профиле клиента в разделе "Действия с продуктами" заполняем поле "Продукт"
    value = 'Банковские вклады'
    # :step: В профиле клиента в разделе "Действия с продуктами" заполняем поле "Вариант"
    value = 'Оформление вклада'
    # :step: Нажимаем кнопку "Выполнить"
    # :assert: На заявке создан параметр doKyc = "да"
    # :step: На варианте "Оформление вклада" продукта "Банковские вклады" параметр doKyc устанавливаем = "нет"

    # :newpage: #######################################################################################################

    # :step: на форме "Реквизиты клиента" заполняем поле E-mail
    value = 'NOVYI@BGPB.BY'
    # :step: нажимаем кнопку "Далее"
    # :assert: Выводится ошибка -"На форме имеются ошибки".
    # :step: На форме "Ошибка" Нажимаем кнопку "Закрыть".
    # :assert: Напротив поля E-mail выводится сообщение - "Использование электронной почты ОАО "Белгазпромбанк" не в служебных целях запрещено. Введите иной адрес электронной почты"
    # :assert: Кнопка "Далее" недоступна, отсутствует возможность завершить заявку.
    # :step: Заполняем поле E-mail
    value = 'N1_V-YI@local.BY'
    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На параметрах Клиента Владельца вклада сохраняется параметр sou_id = SDBONum из ответа ЕРК
    # :step: На форме "Подбор вклада" выставляем фильтр подбора "Оформление договора вклада на имя третьего лица"
    value = 'Да'
    # :step: Нажимаем кнопку "Подобрать"
    # :step: В таблице "Перечень вкладов" выбираем активный вклад (См. комментарий)
    # :step: Заполняем поле "Источник информирования"
    value = 'Радиореклама'
    # :step: Заполняем чекбокс "Клиент является Вносителем денежных средств на имя третьего лица"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск третьего лица в учетной системе Банка" заполняем поле "Личный номер" тестового Клиента
    value = '7689438A748PB0'
    # :step: Нажимаем кнопку "Поиск карточки клиента"
    # :step: Нажимаем на найденную краткую карточку клиента

    # :newpage: #######################################################################################################

    # :assert: На форме "Реквизиты клиента" отсутствует блок "Подключение к ДБО"
    # :step: Нажимаем кнопу "Далее"

    # :newpage: #######################################################################################################

    # :assert: Осуществляется переход на форму "Определение способа внесения первоначального взноса на вклад"
    # :step: На форме "Определение способа внесения первоначального взноса на вклад" из списка касс выбираем радиобаттон кассы Банка
    value = '1010'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Переходим на форму "Проверка клиента в KYC(Siron)"
    # :assert: При оформлении заявки используется значение параметра doKyc на заявке
    # :assert: На форме выводитсян ИД заявки, Результат проверки - Клиент ГУПОЛОВИЧ ЗАРДАР ВАЛЕРЬЕВИЧ На проверке УФМ (произошло совпадение), Клиент ГОРИН ЛИДИЙ ЕФИМОВИЧ Совпадений нет после проверки, активные кнопки "Обновить" и "Отмена", кнопка "Завершить" - неактивна. Выведен текст из справочника «Информационные блоки ЕФР» записи "Уведомления о совпадении со списками в Siron KYC")
    # :assert: Создается задача "Проверка клиента в KYC(Siron)"
    # :assert: В истории выполнения процесса после окончания сохранения клиента создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: Заявка находится в статусе "Отправлена на дополнительную проверку"
    # :assert: Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office (Служебная информация о заявке - "Performers: <инициатор заявки>, admins, front_office.")
    # :assert: На пользователей с ролью admins и email-адреса из itwCredo-kyc.properties разосланы email с темой "Совпвдение в ЕФР со списками по заявке 2455927" и с текстом "ТЕСТ - Произошло совпадение в ЕФР со списками ГУПОЛОВИЧ ЗАРДАР ВАЛЕРЬЕВИЧ (ID EFR2456121_de4c7) при оформлении заявки 2456121 по варианту (Банковские вклады) Оформление вклада. Вклад: На 3 года безотзывный-стабильный (USD) Работник банка: Сычевская Анна Степановна. Телефон: +3754471552233". Текст сообщения = значение параметра kycEmailTemplate на варианте OpenDeposit (см.комментарий)
    # :assert: На заявке созданы параметры: doKyc = "да", kycId = EFR2456121_39c45, kycStatus = inconspic, kycComment = Статус inconspic успешно установлен, kycDate = 2022-07-13T16:31:09, kycId = kycId_thirdperson = EFR2456121_de4c7, kycStatus_thirdperson = check, kycComment_thirdperson = Статус check успешно установлен, kycDate_thirdperson = 2022-07-13T16:31:09
    # :step: Меняем статус проверки в Siron по клиенту ГУПОЛОВИЧ ЗАРДАР ВАЛЕРЬЕВИЧ на "Отложен УФМ (pending)"
    # :assert: По истечении таймера результат обновился на форме автоматически, без обновления страницы браузера: Результат проверки - Клиент ГУПОЛОВИЧ ЗАРДАР ВАЛЕРЬЕВИЧ Отложен УФМ, Клиент ГОРИН ЛИДИЙ ЕФИМОВИЧ Совпадений нет после проверки, активные кнопки "Обновить", "Завершить" и "Отмена"
    # :assert: Обновлены параметры на заявке: doKyc = "да", kycId = EFR2456121_39c45, kycStatus = inconspic, kycComment = Статус inconspic успешно установлен, kycDate = 2022-07-13T16:31:09, kycId = kycId_thirdperson = EFR2456121_de4c7, kycStatus_thirdperson = pending, kycComment_thirdperson = Статус pending успешно установлен, kycDate_thirdperson = 2022-07-13T16:47:36
    # :step: Меняем статус проверки в Siron по клиенту ГУПОЛОВИЧ ЗАРДАР ВАЛЕРЬЕВИЧ на "Совпадений нет по результатам проверки УФМ (release)"
    # :step: Нажимаем кнопку "Обновить"
    # :assert: Результат на форме обновился: Результат проверки - Клиент ГУПОЛОВИЧ ЗАРДАР ВАЛЕРЬЕВИЧ Совпадений нет по результатам проверки УФМ, Клиент ГОРИН ЛИДИЙ ЕФИМОВИЧ Совпадений нет после проверки, активные кнопки "Завершить" и "Отмена", кнопка "Обновить" - неактивна
    # :assert: Обновлены параметры на заявке: doKyc = "да", kycId = EFR2456121_39c45, kycStatus = inconspic, kycComment = Статус inconspic успешно установлен, kycDate = 2022-07-13T16:53:12, kycId = kycId_thirdperson = EFR2456121_de4c7, kycStatus_thirdperson = release, kycComment_thirdperson = Статус release успешно установлен, kycDate_thirdperson = 2022-07-13T16:53:12
    # :step: Нажимаем кнопку "Завершить"
    # :assert: Осуществляется переход на форму "Оформление документов при открытии вклада"

    # :newpage: #######################################################################################################

    # :step: На форме "Оформление документов при открытии вклада" по кнопке "Печать договора вклада" формируем и проверяем договор
    # :step: по кнопке "Печать приходного валютного ордера" формируем и проверяем ордер
    # :step: Заполняем чекбокс "Документы оформлены"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На фороме "Завершение оформления вклада" заполняем чекбокс "Приходный ордер проверен"
    # :step: Заполняем чекбокс "Документы переданы клиенту"
    # :step: Нажимаем кнопку "Завершить оформление"
    # :assert: Заявка завершается исполнением, статус "Окончена обработка".
    # :assert: В БИС Forpost произошло открытие договора вклада, договор в состоянии «WAIT», сумма взноса отражена в «BOOK остатке», приходная кассовая операция не акцептована. Договор вклада в валюте выбранного ранее в заявке вклада. Договор оформлен на третье лицо.
    # :step: Для проверки дальнейшего открытия на стороне Forpost акцептуем кассовую операцию. На договоре выполняем акцию CHECK (Контроль ожидания поступления средств на счет контракта) или сервис ручной активации контракта.
    # :assert: Договор вклада в состоянии «EXECUTE», пристуствуют транзакция (со счета Кассы на основной счет контракта) и акция «PRINCIPAL_IN» на сумму взноса. График акций расчитан до конца срока.
    # :assert: Доп. условия на договоре добавлены в соответствии с вариантом вклада (Forpost). В доп. условиях договора присутствует APPL_ID (Номер заявки СКЗ). Значения доп. условий соответствуют выбранным Клиентом настройкам вклада в заявке СКЗ. По текущим проверкам тест-кейса присутствуют следующие доп. условия: AMOUNT_SOURCE (Способ внесения средств) = "CASH", AMOUNT_SOURCE_TXT = "Вносим сразу через кассу", PAYER_DOC (Требование предъявлено?) = "NO", PAYER_DOC_TXT = "Требование НЕ предъявлено"
    # :step: На договоре вклада в БИС Forpost выполняем сервис "Доверенные лица контракта"
    # :assert: В списке доверенностей на управлени присутствует оформитель вклада (ФИО) с типом документа «Оформитель вклада на третье лицо» и датами начала/окончания, которые соответствуют сроку действия вклада
    # :step: В БИС Forpost переходим на форму (107) клиента оформителя вклада
    # :assert: Среди документов клиента оформителя присутствует документ "ОФОРМИТЕЛЬ_ВКЛАДА" со сроком равным сроку действия договора контракта

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_54637_16(app, credo_db):
    """
    {#
        :id:                54637_16
        :priority:          Средний
        :module:            ЕФР
        :description:       Закрытие карточного счета. (54637) Проверка создания параметров changeAuthor и changeDT. (56953) Проверка создания и заполнения параметров location_sales и issue_point для заявок созданных по варианту "Закрытие карточного счета" продукта EFR ("Платежные карточки"). (56634) Проверка установки запрета на использование эл.почты @bgpb.by. (57657)Проверка клиента в KYC(Siron), check_status = «block» + текст «permit». (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь petrukovich авторизирован в СКЗ со всеми правми, ролями
        :precondition:      У пользователя petrukovich параметр useNewCabinet ("Использование нового интерфейса") = "да"
        :precondition:      У пользователя petrukovich параметр location_sales ("Точка продаж") = "Отдел розничных операций / г.Минск ул.Притыцкого 60/2"
        :precondition:      У пользователя garanin параметр useNewCabinet ("Использование нового интерфейса") = "да"
        :precondition:      У пользователя garanin параметр location_sales ("Точка продаж") = "Банк ЦБУ №105;224025 г.Брест, ул. Лейтенанта Рябцева, 110"
        :precondition:      У пользователя garanin присутствует роль front_office, admins
        :precondition:      Клиент существует в учетной системе банка
        :precondition:      У клиента присутствует тестовый карт-счет без ограничений на закрытие счета, без незавершенных транзакций и с сальдо = 0
        :precondition:      На варианте параметр doKyc ("Проверять клиента в KYC") = да
        :precondition:      На варианте параметр needPreActualization ("Необходима предварительная актуализация клиента") = "нет"
        :precondition:      В Siron KYC тестовый Клиент со статусом check_status = block («block» + текст «permit state successfully set»)
        :precondition:      В itwCredo-kyc.properties внесены соответствующие настройки (kyc.url, emails, timeout, workingTimeRole)
        :source_point:      54637, 56634, 56953, 57657, 58550
        :comment:           Чтобы очистить поле владельца задачи, тем самым удерживающего её, требуется выполнить в БД СКЗ скрипт: UPDATE task SET status = 'Ready', actualowner_id = null WHERE id = «Номер задачи»; COMMIT;
        :comment:           Чтобы узнать номер задачи в БД нужно воспользоваться скриптом и выбрать нужную: SELECT t.id AS "Номер задачи", i18.TEXT AS "Наименование задачи", t.status AS "Статус" FROM TABLE(itw_util.getProcessIdList(«Номер заявки»))pil, task t, I18NTEXT i18 WHERE t.PROCESSINSTANCEID = pil.id AND i18.TASK_DESCRIPTIONS_ID = t.ID AND t.status != 'Completed';
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :comment:           Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office
        :tc_type:           +
        :db_env:            База FORPOST: forp_d8; Тестовая дата: 10.04.2021
        :client_env:        Google Chrome 95 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 94 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 95 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'EFR'

    VARIANT = 'P6_A6CloseCardAcc_v2'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный (идентификационный) номер" тестового Клиента
    value = '3050996C005PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Нажимаем на найденную краткую карточку клиента

    # :newpage: ######################################################################################################

    # :step: Выбираем продукт на форме "Профиль клиента"
    value = 'Платежные карточки'
    # :step: Выбрать вариант
    value = 'Закрытие карточного счета'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :assert: В параметрах созданной заявки присутствует параметр location_sales ("Точка продаж") = "Отдел розничных операций / г.Минск ул.Притыцкого 60/2", где значение равно значению параметра location_sales ("Точка продаж") пользователя-инициатора заявки - petrukovich
    # :assert: параметр заявки doKyc = да
    # :step: На форме "Реквизиты клиента" редактируем поле "Имя латинскими буквами"
    value = 'TESTNAME'
    # :step: на форме "Реквизиты клиента" заполняем поле E-mail
    value = 'NOVYI@BGPB.BY'
    # :step: нажимаем кнопку "Далее"
    # :assert: Выводится ошибка -"На форме имеются ошибки".
    # :step: На форме "Ошибка" Нажимаем кнопку "Закрыть".
    # :assert: Напротив поля E-mail выводится сообщение - "Использование электронной почты ОАО "Белгазпромбанк" не в служебных целях запрещено. Введите иной адрес электронной почты"
    # :assert: Кнопка "Далее" недоступна, отсутствует возможность завершить заявку.
    # :step: Заполняем поле E-mail
    value = 'N_VYI@local.BY'
    # :step: Нажать кнопку "Далее"
    # :assert: параметр заявки changeAuthor = ФИО текущего пользователя (Петрукович Ольга Ивановна)

    # :newpage: #######################################################################################################

    # :step: На форме "Выбор карточного счета для закрытия" заполняем радиобаттон выбранного счета клиента
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Оформление заявления на закрытие карточного счета" через меню-гамбургер осуществляем выход из системы
    # :step: Отвязываем задачу по заявке от пользователя-владельца через редактирование в БД (см. Комментарий)
    # :step: Авторизуемся и заходим в Профиль клиента под пользователем garanin

    # :newpage: ######################################################################################################

    # :step: Продолжаем текущую заявку под пользователем garanin 

    # :newpage: ######################################################################################################

    # :step: На форме "Оформление заявления на закрытие карточного счета" нажимаем кнопку "Сформировать отчет о составе текущего сальдо"
    # :assert: параметр заявки issue_point ("Точка выдачи БПК") = "Банк ЦБУ №105;224025 г.Брест, ул. Лейтенанта Рябцева, 110", где значение равно значению параметра location_sales ("Точка продаж") последнего пользователя-исполнителя по заявке, который прошёл задачу "Оформление заявления на закрытие карточного счета" - garanin
    # :step: Нажимаем "Печать заявления на закрытие карточного счета"
    # :step: Заполняем чекбокс "Заявление на закрытие карточного счета оформлено"
    # :step: Заполняем чекбокс "Копия документа, удостоверяющего личность клиента, изготовлена"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Создается задача "Проверка клиента в KYC(Siron)" перед задачей "Выполнение операций в форпост".
    # :assert: Статус заявки = "Ввод информации"
    # :assert: Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office (Служебная информация о заявке - "Performers: <инициатор заявки>, admins, front_office.")
    # :assert: На заявке созданы параметры kycStatus = "block", kycCompleted = да, kycId = ID для проверки в Siron, kycComment = "permit state successfully set", kycDate = [дата_время] выполнения проверки

    # :newpage: #######################################################################################################

    # :assert: Перешли на форму "Проверка клиента в KYC(Siron)", на которой отображаются:
    # :assert: ИД заявки,
    # :assert: Результат проверки = "Клиент [ФИО Клиента] Произошло совпадение УФМ (Установление договорных отношений разрешено),
    # :assert: активные кнопки "Завершить" и "Отмена", неактивная кнопка "Обновить"
    # :step: Нажимаем "Завершить"
    # :assert: На параметрах заявки присутсвуют параметры changeAuthor = ФИО сотрудника выполнившего изменение карточки клиента и changeDT = Дата и время вызова сервиса, значение параметров совпадает со значениями одноименных тегов в ерк

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_54637_28(app, credo_db):
    """
    {#
        :id:                54637_28
        :priority:          Средний
        :module:            ЕФР
        :description:       Оформление зарплатной карточки. Проверка создания параметров changeAuthor и changeDT. (56634)Проверка установки запрета на использование эл.почты @bgpb.by. (57657)Проверка клиента в KYC(Siron), check_status = release. (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь авторизирован в СКЗ со всеми правами, ролями
        :precondition:      Параметр useNewCabinet "Использование нового интерфейса ЕФР" = да.
        :precondition:      По тестовому Предприятию одно зарплатное соглашение
        :precondition:      По выпускаемой карточке в справочнике card_for_variant "Срок действия карт" = 5 лет
        :precondition:      На варианте параметр pinCodeMethodsUnpersCard = ПИН-конверт SMS-сообщение
        :precondition:      На варианте параметр doKyc ("Проверять клиента в KYC") = да
        :precondition:      На варианте параметр needPreActualization ("Необходима предварительная актуализация клиента") = "нет"
        :precondition:      В Siron KYC тестовый Клиент со статусом check_status = release
        :precondition:      В itwCredo-kyc.properties внесены соответствующие настройки (kyc.url, emails, timeout, workingTimeRole)
        :source_point:      54637, 56634, 57657, 58550
        :comment:           Для полного прохождения заявки выполняется апдейт по выпущенной карточке в ФОРПОСТ с установкой  crd_embossed = 'YES' и  crd_prod_status = 'M'
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :comment:           Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 101 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 100 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 101 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'EFR'

    VARIANT = 'P2_A2SalaryCard'


    # :newpage: #######################################################################################################

    # :step: Ввести на форме "Поиск клиента" Личный номер тестового Клиента
    value = '5030683K616PB8'
    # :step: Нажать кнопку "Искать"
    # :step: Выбрать Клиента - кликнуть по отображенной карточке тестового Клиента

    # :newpage: #######################################################################################################

    # :step: Выбрать продукт на форме "Профиль клиента"
    value = 'Платежные карточки'
    # :step: Выбрать вариант
    value = 'Оформление зарплатной карточки'
    # :step: Нажать кнопку "Выполнить"
    # :assert: Создается заявка, параметр doKyc = да

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента" редактируем поле "Имя латинскими буквами"
    value = 'TESTNAME'
    # :step: на форме "Реквизиты клиента" заполняем поле E-mail
    value = 'NOVYI@BGPB.BY'
    # :step: нажимаем кнопку "Далее"
    # :assert: Выводится ошибка -"На форме имеются ошибки".
    # :step: На форме "Ошибка" Нажимаем кнопку "Закрыть".
    # :assert: Напротив поля E-mail выводится сообщение - "Использование электронной почты ОАО "Белгазпромбанк" не в служебных целях запрещено. Введите иной адрес электронной почты"
    # :assert: Кнопка "Далее" недоступна, отсутствует возможность завершить заявку.
    # :step: Заполняем поле E-mail
    value = 'N_VYI@local.BY'
    # :step: Нажать кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров зарплатной карточки" выбираем Предприятие
    value = 'Customer 1002228'
    # :step: Устанавливаем значение комбобокса Должность
    value = 'БАНКОВСКИЙ СЛУЖАЩИЙ'
    # :step: Выбираем Тип карточки
    value = 'MasterCard Standard PayPass Зарплатная'
    # :step: Выбираем Способ получения ПИН-кода
    value = 'ПИН-конверт'
    # :step: Устанавливаем значение комбобокса Регион выдачи
    value = 'Минск'
    # :step: Устанавливаем значение комбобокса Точка выдачи
    value = 'Отдел розничных операций / г.Минск ул.Притыцкого 60/2'
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: Устанавливаем значение поля Кодовое слово клиента
    value = 'СЛОВО'
    # :step: Выбираем Источник получения информации о продукте
    value = 'Радиореклама'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Оформление заявления-анкеты" нажимаем на ссылку "Печать Заявления-анкеты"
    # :step: Устанавливаем флаг Заявление-анкета оформлено
    # :step: Нажимаем кнопку "Подтвердить"

    # :newpage: #######################################################################################################

    # :assert: Создается задача "Проверка клиента в KYC(Siron)".
    # :assert: Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office (Служебная информация о заявке - "Performers: <инициатор заявки>, admins, front_office.")
    # :assert: Перешли на форму "Проверка клиента в KYC(Siron)", на которой отображаются:
    # :assert: ИД заявки,
    # :assert: Результат проверки = "Клиент [ФИО Клиента] Совпадений нет по результатам проверки УФМ",
    # :assert: активные кнопки "Завершить" и "Отмена", неактивная кнопка "Обновить",
    # :assert: Заявка находится в статусе "Ввод параметров клиента"
    # :assert: На заявке созданы параметры kycStatus = "release", kycCompleted = "да", kycId = ID для проверки в Siron, kycComment = "Статус release успешно установлен", kycDate = [дата_время] выполнения проверки
    # :step: Нажимаем "Завершить"

    # :newpage: #######################################################################################################

    # :step: Продолжаем заявку в Профиле клиента

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров для формирования договоров" выбираем доверенность из списка
    value = 'Доверенность №1, подразделение ORO, ...'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: Скачиваем по ссылке "Печать договора" договор на форме "Оформление договора"
    # :step: Устанавливаем флаг Договор оформлен
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: Продолжаем заявку в Профиле клиента

    # :newpage: #######################################################################################################

    # :step: На форме "Выбор получателя платежной карточки"с предустановленным значением Получатель = Владелец счета
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Выдача платежной карточки", устанавливаем флаг Выдача платежной карточки оформлена в заявлении-анкете
    # :step: Нажимаем кнопку "Завершить выдачу карточки"

    # :newpage: #######################################################################################################

    # :step: На форме "Подготовка документов к передаче на хранение", устанавливаем флаг Документы по заявке подготовлены
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Заявка завершается исполнением
    # :assert: На параметрах заявки сохранены параметры changeAuthor = "ФИО сотрудника выполнившего изменение карточки клиента) и changeDT = Дата и время вызова сервиса, значение параметров совпадает со значениями одноименных тегов в ерк

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_56258_4(app, credo_db):
    """
    {#
        :id:                56258_4
        :priority:          Средний
        :module:            Кредитование
        :description:       Факторинг. Проверка перерасчета значений полей блока "Характеристики товаров и условия рассрочки". Проверка возможности введения нескольких блоков данных по товарам по кнопке "Добавить товар". Проверка клиента в KYC(Siron), если check_status = check, check_status = pending, check_status = release. Проверка доступа к задаче «Проверка клиента в KYC(Siron)». Проверка кнопки "Обновить" на форме «Проверка клиента в KYC(Siron)», если check_status = check. Проверка автоматического обновления результата на форме задачи «Проверка клиента в KYC(Siron)», если check_status = pending. Проверка автоматического обновления результата в нерабочее время на форме задачи «Проверка клиента в KYC(Siron)», если check_status = pending (58486) Проверка передачи typeSubject в ЕРК для видов занятости (По найму с УНП из справочника Банки РБ, Пенсионер)
        :precondition:      У пользователя параметр "Использование нового интерфейса" = "нет". Пользователь "Агент банка" с параметром forpost_code = 1435381
        :precondition:      На продукте/варианте Факторинг/факторинг параметры loanTerm=6, request_issue_point = part_ziko, request_issue_point_group = твАГЕН
        :precondition:      В системе существует не менее 2-х ролей front_office_factoring% с правами на Факторинг (front_office_factoring_ziko, front_office_factoring_test)
        :precondition:      Пользователь авторизирован в СКЗ только с ролями front_office, front_office_drive, front_office_factoring_ziko, сredit_expert, InsuranceBPK
        :precondition:      Текущая дата 04.11.2021
        :precondition:      На варианте параметр general_crt_filter = 09.12.2021 (ближайшая дата открытия ФК_ГЕНЕРАЛЬНЫЙ_ДОГОВОР на клиенте с forpost_code = 1435381)
        :precondition:      Статус клиента в Siron KYC равен check
        :precondition:      На варианте параметр doKyc = Да
        :precondition:      Более 1-го варианта на продукте Факторинг
        :precondition:      Пользователь maslova только с ролью admins
        :precondition:      У пользователя hominskaya есть все роли, кроме admins
        :precondition:      В файле itwcredo-kyc.properties параметр workingTimeRole=front_office
        :precondition:      Для роли front_office установлено начало рабочего времени = 13:00
        :precondition:      Системное время = 12:30
        :precondition:      В itwCredo-kyc.properties внесены соответствующие настройки (kyc.url, emails=credospam@itworks.by, timeout=300, workingTimeRole=front_office)
        :precondition:      Справочник "Банки РБ" заполнен
        :precondition:      У клиента в ЕРК один вид занятости "По найму" с typeSubject="2"
        :source_point:      56258, 57657, 58486, 58550
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :comment:           Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, роли "front_office_factoring%", найденной на инициаторе
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 105 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 105 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'Factoring'

    VARIANT = 'factoring_ziko'


    # :newpage: #######################################################################################################

    # :step: В списке заявок нажимаем кнопку "Создать"
    # :step: Выбираем значение поля "Продукт"
    value = 'Факторинг'
    # :step: Выбираем значение поля "Вариант"
    value = 'Факторинг (Зико)'
    # :step: Нажимаем кнопку "Сохранить"

    # :newpage: #######################################################################################################

    # :step: Указываем личный номер
    value = '6250875E716PB5'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: На параметрах заявки присутствуют параметры doKyc ([KYC] Проверять клиента в KYC) со значением "да"
    # :step: На форме "Отображение заявок и договоров клиента" выбираем "Тип заявки"
    value = 'Новый кредит'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: Выбираем источник дохода
    value = 'справка'
    # :step: Заполняем среднемесячный доход к выдаче
    value = '80000'
    # :step: Заполняем регистрационный номер справки
    value = '1234'
    # :step: Заполняем дату регистрации справки
    value = '02.02.2022'
    # :step: Изменяем "Наименование предприятия"
    value = 'новая работа 1 в банке'
    # :step: Изменяем "УНП организации" на значен6ие из справочника "Банки РБ"
    value = '100429079'
    # :step: Выбираем второй вид занятости
    value = 'Пенсионер'
    # :step: Выбираем источник дохода
    value = 'без справки'
    # :step: Заполняем среднемесячный доход к выдаче
    value = '800'
    # :step: Выбираем образование
    value = 'Высшее'
    # :step: Выбираем должность
    value = 'IT-специалист'
    # :step: Заполняем стаж на последнем месте работы (годы)
    value = '7'
    # :step: Заполняем стаж на последнем месте работы (месяцы)
    value = '5'
    # :step: В поле "Наименование товара" вводим
    value = 'ноутбук'
    # :step: В поле "Марка" вводим
    value = 'HP ProBook 640'
    # :step: В поле "Модель" вводим
    value = '125Р 32M42EA'
    # :step: В поле "Цена, бел. руб" вводим
    value = '6520'
    # :step: В поле "Количество, шт" вводим
    value = '2'
    # :step: В поле "Сумма первого взноса, бел. руб." вводим
    value = '100'
    # :step: В поле "Цена товара при продаже в рассрочку, бел. руб." вводим
    value = '8500'
    # :assert: "Первый взнос %" = 1,18
    # :assert: "Сумма ежемесячного платежа, бел руб." = 1 400
    # :assert: "Запрашиваемая сумма" = 8400
    # :step: Меняем значение  в поле "Сумма первого взноса, бел. руб."
    value = '150'
    # :assert: Значение поля "Первый взнос %" автоматически пересчиталось = 1,76
    # :assert: Значение поля "Сумма ежемесячного платежа, бел руб." автоматически пересчиталось =1 391,67
    # :assert: Значение в поле "Запрашиваемая сумма" автоматически пересчиталось = 8 350,00
    # :step: Нажимаем кнопку "Добавить товар"
    # :assert: Форма дополняется еще одним блоком "Характеристики товаров и условия рассрочки" для Товара #2
    # :step: В поле "Наименование товара" вводим
    value = 'телефон'
    # :step: В поле "Марка" вводим
    value = 'Redmi'
    # :step: В поле "Модель" вводим
    value = '125Р@'
    # :step: В поле "Цена, бел. руб" вводим
    value = '985.26'
    # :step: В поле "Количество, шт" вводим
    value = '2'
    # :step: В поле "Сумма первого взноса, бел. руб." вводим
    value = '58'
    # :step: В поле "Цена товара при продаже в рассрочку, бел. руб." вводим
    value = '1300.26'
    # :assert: Товар #2, "Первый взнос %" = 4,46
    # :assert: Товар #2, "Сумма ежемесячного платежа, бел руб." =207,04
    # :assert: "Запрашиваемая сумма" =9 592,26
    # :step: Меняем значение  в поле "Цена товара при продаже в рассрочку, бел. руб." для товара #2
    value = '1450'
    # :assert: Товар #2, значение поля "Первый взнос %" автоматически пересчиталось = 4
    # :assert: Товар #2, значение поля "Сумма ежемесячного платежа, бел руб." автоматически пересчиталось =232
    # :assert: Значение в поле "Запрашиваемая сумма" автоматически пересчиталось = 9 742,00
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: На форме "Формирование и печать документов" нажимаем "Завершить"

    # :newpage: #######################################################################################################

    # :assert: В ЕРК переданы значения для видов занятости заявителя typeSubject="4" (По найму, УНП из справочника «Банки РБ») и typeSubject="2" (Пенсионер)
    # :assert: В истории выполнения процесса после окончания сохранения клиента создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: На параметрах заявки присутствуют параметры kycId ([KYC] ID для проверки в Siron) = EFR2456612_08572
    # :assert: Результат проверки сохранен в параметрах на заявки kycStatus ([KYC] Статус проверки клиента в KYC) = check, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-25T15:38:30, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус check успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)»
    # :assert: На форме «Проверка клиента в KYC(Siron)» в поле «Результат проверки» получен статус "На проверке УФМ (произошло совпадение)"
    # :assert: Кнопка "Завершить" не доступна для нажатия
    # :step: В Siron KYC устанавливаем статус pending
    # :step: Нажимаем кнопку "Обновить" на форме «Проверка клиента в KYC(Siron)»
    # :assert: В истории выполнения процесса создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: На параметрах заявки присутствуют параметры kycId ([KYC] ID для проверки в Siron) = EFR2456612_08572
    # :assert: Результат проверки сохранен в параметрах на заявки kycStatus ([KYC] Статус проверки клиента в KYC) = pending, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-25T15:40:02, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус pending успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)», в поле «Результат проверки» получен статус "Отложен УФМ"
    # :step: В Siron KYC устанавливаем статус release
    # :step: Ожидаем 300 секунд (timeout=300)
    # :assert: Результат не обновляется на форме автоматически
    # :step: Ожидаем наступления рабочего времени
    # :assert: Результат обновился на форме автоматически, без обновления страницы браузера
    # :assert: В истории выполнения процесса создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: На параметрах заявки присутствуют параметры kycId ([KYC] ID для проверки в Siron) = EFR2456612_08572
    # :assert: Результат проверки сохранен в параметрах на заявки kycStatus ([KYC] Статус проверки клиента в KYC) = release, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-25T15:45:05, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус release успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)»
    # :assert: На форме «Проверка клиента в KYC(Siron)» в поле «Результат проверки» получен статус "Совпадений нет по результатам проверки УФМ"
    # :step: Нажимаем кнопку "Отмена"
    # :assert: выходим из задачи
    # :assert: заявка доступна инициатору заявки
    # :assert: заявка доступна пользователю с ролью admins
    # :assert: заявка недоступна пользователям, у которых нет роли admins
    # :step: На форме «Проверка клиента в KYC(Siron)» нажимаем "Завершить"

    # :newpage: #######################################################################################################

    # :assert: Переходим на форму "Общая форма кредитного эксперта"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_56307_62(app, credo_db):
    """
    {#
        :id:                56307_62
        :priority:          Средний
        :module:            Страхование
        :description:       Страхование. Проверка валидации поля "Дата окончания срока действия:" при создании клиента с документа с типом ДУЛ = "Биометрический вид на жительство в РБ лица без гражданства" из файла 123493KENT022.xml. Проверка заполнения поля "Кем выдан" для клиента созданного из файла 123493KENT022.xml.Проверка запроса в (KYC)Siron со статусом check, pending. Проверка работы кнопки "Обновить". Проверка автоматического запроса в (KYC)Siron (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь авторизирован в СКЗ со всеми правами, ролями
        :precondition:      Имеется подготовленный файл с валидными данными для страхования 123493KENT022.xml
        :precondition:      В файле 123493KENT022.xml <EndDate>01.01.2020</EndDate> меньше даты выдачи
        :precondition:      В файле 123493KENT022.xml тип документа = <Type>17</Type>, "Кем выдан" = <Place>МВД</Place>
        :precondition:      На продукте/варианте параметр doKyc = да
        :precondition:      На продукте/варианте параметр needPreActualization = нет
        :precondition:      в (KYC)Siron клиент имеет статус check
        :precondition:      в (KYC)Siron Комментарий = Статус check успешно установлен
        :precondition:      В файле itwcredo-kyc.properties параметр workingTimeRole=front_office
        :precondition:      В файле itwcredo-kyc.properties параметр timeout=300
        :precondition:      Системное время = 12:30
        :precondition:      Для роли front_office установлено начало рабочего времени = 13:00
        :precondition:      Пользователь kosovec только c ролью InsuranceBPK
        :precondition:      Пользователь maslova только с ролью admins
        :precondition:      Пользователь semenov только с ролью front_office
        :precondition:      У пользователя hominskaya все роли, кроме admins, front_office, InsuranceBPK
        :precondition:      параметр autoOpenLoginForp = TROCKI
        :precondition:      В справочнике "ИНФОРМАЦИОННЫЕ БЛОКИ ЕФР" в строке с Идентификатор блока = "wait_for_ufm" содердит текст = "Ожидайте результат проверки УФМ.<br/>Режим работы УФМ:<br/>Пн-Чт: 08:30 – 17:30*<br/>Пт: 08:30 – 16:15*.<br/>Сб-Вскр – выходные.<br/>*в предпраздничные дни режим работы сокращен на 1 час. <br/> Тест"
        :source_point:      56307, 57657, 58550
        :comment:           Для варианта «RegisterInsurance_v%» задача "Проверка клиента в KYC(Siron)" назначается на пользователей с ролями InsuranceBPK, Admins, front_office
        :tc_type:           +
        :db_env:            База: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 103 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 103 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'Insurance'

    VARIANT = 'RegisterInsuranceKent'


    # :newpage: #######################################################################################################

    # :step: копируем файл 123493KENT022.xml в credo\nodes\node1\credo_data\_tmp\kentavr\in\
    # :assert: На параметрах заявки создан параметр doKyc = Да
    # :step: На варианте изменяем параметр doKyc = Нет
    # :step: в СКЗ в списке заявок выполняем задачу по текущей заявке

    # :newpage: #######################################################################################################

    # :step: На форме "СВЕРКА ДАННЫХ В ЗАЯВКЕ" нажимаем кнопку "Завершить"
    # :assert: Рядом с полем "Дата окончания срока действия:"  появляется надпись "Неправильно указан срок действия документа, удостоверяющего личность!"
    # :step: Изменяем дату действия документа (больше текущей)
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: Создана задача "Проверка клиента в KYC(Siron)"
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для инициатора заявки
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для пользователя с ролью InsuranceBPK (kosovec)
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для пользователя с ролью admins (maslova)
    # :assert: Задача "Проверка клиента в KYC(Siron)" доступна для пользователя с ролью front_office (semenov)
    # :assert: Задача "Проверка клиента в KYC(Siron)" недоступна для пользователей, у которых нет роли InsuranceBPK или admins, или front_office (hominskaya)
    # :assert: По заявке установлен статус "Отправлена на дополнительную проверку"
    # :assert: На форме в блоке "Результат проверки" отображается текст: "На проверке УФМ (произошло совпадение)"
    # :assert: На форме отображается текст: "Ожидайте результат проверки УФМ. Режим работы УФМ: Пн-Чт: 08:30 – 17:30* Пт: 08:30 – 16:15*. Сб-Вскр – выходные. *в предпраздничные дни режим работы сокращен на 1 час. Тест"
    # :assert: На параметрах заявки параметр kycId = EFR2456374_7425d (EFR[№ заявки]_[N рандомных символов])
    # :assert: На пользователей с ролью admins и и на адресс credospam@itworks.by пришло сообщение "Произошло совпадение в ЕФР со списками ФАМР ФАМР ФАМР (ID EFR2456768_12055) при оформлении заявки 2456768 по варианту (Страхование) [autoOpenLoginForp:ЗАСО КЕНТАВР] Вариант карточки: Входящий файл: 151210KENT001 Работник банка: ЗАСО КЕНТАВР. Телефон: -
    # :assert: На параметрах заявки параметр kycStatus = check
    # :assert: На параметрах заявки параметр kycComment = Статус check успешно установлен
    # :assert: Кнопка "Завершить" недоступна
    # :assert: Кнопка "Обновить" доступна
    # :step: в KYC(Siron) устанавливаем статус pending
    # :step: Ожидаем 300 с
    # :assert: Автоматическое обновление не произошло
    # :step: Нажимаем кнопку "Обновить"
    # :assert: На форме в блоке "Результат проверки" отображается текст: "Отложен УФМ"
    # :assert: На параметрах заявки параметр kycStatus = pending
    # :assert: Кнопка "Завершить" доступна
    # :assert: Кнопка "Обновить" доступна
    # :step: в KYC(Siron) устанавливаем статус check
    # :step: Ожидаем 300 с
    # :assert: Автоматическое обновление не произошло
    # :step: Нажимаем кнопку "Обновить"
    # :assert: На параметрах заявки параметр kycStatus = check
    # :step: Ожидаем наступления рабочего времени для роли front_office
    # :assert: Автоматическое обновление произошло
    # :assert: На параметрах заявки параметр kycStatus = pending
    # :step: Нажимаем кнопку "Завершить"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_57563_14(app, credo_db):
    """
    {#
        :id:                57563_14
        :priority:          Средний
        :module:            Базовый счет
        :description:       Операции с базовым счетом. Проверка прохождения заявки при выборе операции  с БС (Переоформление текущего счёта в базовый). Запрос ITW/GetAnswerForBA вернул err_code = 0 и ErrorText пусто. Переоформляется на неперсонифицированную карточку. Проверка клиента в KYC(Siron), если check_status = check, check_status = pending, check_status = release. Проверка доступа к задаче «Проверка клиента в KYC(Siron)». Проверка кнопки "Обновить" на форме «Проверка клиента в KYC(Siron)», если check_status = check. Проверка автоматического обновления результата на форме задачи «Проверка клиента в KYC(Siron)», если check_status = pending. Проверка автоматического обновления результата в нерабочее время на форме задачи «Проверка клиента в KYC(Siron)», если check_status = pending. (58155) Проверка добавления новых параметров "Вид выплаты остатка", "Код банка для перечисления остатка", "Номер счета для перечисления остатка" сохранения их на заявке и отображения новых полей (58550) Видимость задачи "Проверка клиента в KYC(Siron)" (58429) Проверка добавления на форме "Печать уведомления" кликабельной строчки "Лист архива" для формирования листа архива по контракту базового счета (Переоформление текущего счёта в базовый)
        :precondition:      Пользователь авторизирован со всеми правами, ролями
        :precondition:      У пользователя параметр "Использование нового интерфейса" = "да"
        :precondition:      На пользователе параметр location_sales = Отдел розничных операций / г.Минск ул.Притыцкого 60/2
        :precondition:      В справочнике Варианты продукта (card_variant) с "Продуктом для карт"= "Базовый счет" только "БЕЛКАРТ-ПРЕМИУМ"
        :precondition:      В справочнике Типы карт для вариантов (card_for_variant) для "Варианта продукта" = "БЕЛКАРТ-ПРЕМИУМ" настроены 2 варианта: "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ Instant issue" и "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ"
        :precondition:      (card_for_variant) "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ Instant issue": "Тип платежных карт" = "БЕЛКАРТ-ПРЕМИУМ Instant Issue Базовая", "Срок действия карт"="до пяти лет", "Продукт в Forpost"="BASE_ACCNT_CARD_INSTANT", "Вариант в Forpost"="RS_VIP_BELCART_PREMIUM", в "Отображение карточки в процессах" есть "Возможность открытия базового счёта", "Валюта счет"="Белорусский рубль"
        :precondition:      (card_for_variant) "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ": "Тип платежных карт" = "БЕЛКАРТ-ПРЕМИУМ Базовая", "Срок действия карт"="5 лет", "Продукт в Forpost"="BASE_ACCNT_CARD", "Вариант в Forpost"="RS_VIP_BELCART_PREMIUM", в "Отображение карточки в процессах" есть "Возможность открытия базового счёта", "Валюта счет"="Белорусский рубль"
        :precondition:      В справочнике Типы платежных карт (type_card) для  типа платежных карт "БЕЛКАРТ-ПРЕМИУМ Instant Issue": "Персонифицированная" = "Нет", "Продукт для PriorityPass в Forpost" и "Вариант для PriorityPass в Forpost" пустые.
        :precondition:      В справочнике Типы платежных карт (type_card) для  типа платежных карт "БЕЛКАРТ-ПРЕМИУМ": "Персонифицированная" = "Да", "Продукт для PriorityPass в Forpost" и "Вариант для PriorityPass в Forpost" пустые.
        :precondition:      На продукте\варианте параметр working_time_calendar_role = middle_office
        :precondition:      Для роли middle_office (Мидл-офис) устанавливаем на системную дату рабочее время 00:00 - 00:01
        :precondition:      Статус клиента в Siron KYC равен check
        :precondition:      Параметр варианта needPreActualization ("Необходима предварительная актуализация клиента") = "нет"
        :precondition:      На варианте параметр doKyc = Да
        :precondition:      Пользователь maslova только с ролью admins
        :precondition:      Пользователь semenov только с ролью front_office
        :precondition:      У пользователя hominskaya все роли, кроме admins и front_office
        :precondition:      В файле itwcredo-kyc.properties параметр workingTimeRole=front_office
        :precondition:      Для роли front_office установлено начало рабочего времени = 13:00
        :precondition:      Системное время = 12:30
        :precondition:      На варианте "Операции с базовыми счетами" значение параметра "pinCodeMethodsPersCard" = SMS-сообщение
        :precondition:      На варианте "Операции с базовыми счетами" значение параметра "pinCodeMethodsUnPersCard" = Пин-конверт
        :precondition:      Фатка-самоидентификация не требуется
        :precondition:      В itwCredo-kyc.properties внесены соответствующие настройки (kyc.url, emails=credospam@itworks.by, timeout=300, workingTimeRole=front_office)
        :source_point:      57563, 57657, 58155, 58429, 58550
        :comment:           Для возможности завершения заявки (активации карточки) выполняется апдейт карточки по номеру crd_code c установкой crd_embossed = 'YES', crd_prod_status = 'M'
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :comment:           У пользователя есть права доступа для продукта "Базовые счета" и параметра 'Использовать параметры для поля (Способ получения пин-кода для продукта "Базовые счета")'
        :comment:           Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 101 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 100 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 100 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'BasicAccounts'

    VARIANT = 'OperationsBasicAccount'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный номер"
    value = '6250875E716PB5'
    # :step: Нажимаем кнопку "Искать"
    # :step: Нажимаем на краткую карточку клиента

    # :newpage: #######################################################################################################

    # :step: Выбрать продукт на форме "Профиль клиента"
    value = 'Базовые счета'
    # :step: Выбрать вариант
    value = 'Операции с базовым счетом'
    # :step: Нажать кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: Нажать кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На параметрах заявки присутствуют параметры doKyc ([KYC] Проверять клиента в KYC) со значением "да"
    # :step: На варианте  изменяем значение параметра doKyc ([KYC] Проверять клиента в KYC) = нет
    # :step: Выбираем тип операции
    value = 'Переоформление текущего счёта в базовый'
    # :step: Выбираем счет
    # :assert: форма дополняется блоком "Выберите параметры выплаты остатка (при наличии)", поле "Вид выплаты остатка"  по умолчанию заполнено значением "Выдать наличными"
    # :step: В поле "Вид выплаты остатка" выбираем значение
    value = 'Перечислить остаток на счёт'
    # :assert: форма дополняется полями "Код банка для перечисления остатка"(не заполнено, активно), "Номер счёта для перечисления остатка" (Предзаполнено по маске  "BY__ ____ __ ____ ____ ____ ____", заблокировано)
    # :step: выбираем "Код банка для перечисления остатка" из открывающегося справочника "Коды банков" через "Поиск"
    value = 'OLMPBY2X'
    # :assert: Список ограничен страной "БЕЛАРУСЬ" и типом кода "BIC-BEL"
    # :assert: поле "Номер счёта для перечисления остатка" активно и предзаполнено по маске "BY__ AKBB __ ____ ____ ____ ____"
    # :step: заполняем "Номер счёта для перечисления остатка"
    value = 'BY86OLMP30140900000602823683'
    # :step: нажимаем кнопку "Далее"
    # :assert: В параметрах заявки сохранились значения type_transfer_remainder = ACCNT (Вид выплаты остатка), bank_code_for_transfer_remainder = AKBBBY21514 (Код банка для перечисления остатка), account_for_transfer_remainder = BY78AKBB97465114046544231747 (Номер счета для перечисления остатка), bank_name_for_transfer_remainder = BELARUSBANK (Наименование банка для перечисления остатка)

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров расчётной карточки заполняем поле "Тип карточки"
    value = 'БЕЛКАРТ-ПРЕМИУМ Базовая'
    # :assert: заполнилось поле "Валюта счета"  = "Белорусский рубль"
    # :assert: заполнилось поле "Срок действия"  = "5 лет"
    # :step: заполняем поле "Регион выдачи" = "Минск"
    # :step: заполняем поле "Точка выдачи" ="Центр премиального обслуживания / г.Минск ул.Притыцкого 60/2"
    # :assert: В поле "Способ получения ПИН-кода" доступно только одно значение = SMS-сообщение
    # :step: В поле "Тип карточки" выбираем неперсонифицированную карту
    value = 'БЕЛКАРТ-ПРЕМИУМ Instant Issue Базовая'
    # :assert: В поле "Способ получения ПИН-кода" доступно только одно значение = ПИН-конверт
    # :assert: заполнилось поле "Срок действия"  = "до 5 лет"
    # :assert: заполнилось поле "Регион выдачи"  = "Минск" и недоступно для редактирования
    # :assert: заполнилось поле "Точка выдачи"  = "Отдел розничных операций / г.Минск ул.Притыцкого 60/2" и недоступно для редактирования
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: заполняем поле Кодовое слово клиента
    value = 'код'
    # :step: заполняем поле Источник получения информации о продукте
    value = 'прочее'
    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: по ссылке "Заявление -анкета" скачиваем документ "ЗАЯВЛЕНИЕ-АНКЕТА НА ОФОРМЛЕНИЕ ПЛАТЕЖНОЙ КАРТОЧКИ"  в формате pdf
    # :step: по ссылке "Заявления на переоформление базового счета" скачиваем документ "ЗАЯВЛЕНИЕ о переоформлении текущего (расчетного) банковского счета в базовый счет" в формате pdf
    # :assert: В файле "Заявление на переоформление базового счета" присутствует новая строка заполненная ранее введёнными значениями "Остаток денежных средств на текущем счете (при наличии) прошу перечислить на счет №BY78AKBB97465114046544231747 в BELARUSBANK, БИК AKBBBY21514."
    # :step: Устанавливаем флаг Заявления оформлены
    # :step: Нажимаем кнопку "Подтвердить"
    # :assert: на параметры заявки сохранен параметр "Заявление на базовый счёт" (application_basic_accnt) с ссылкой для скачивания
    # :assert: Задача «Ожидание рабочего времени» создана
    # :assert: В истории выполнения процесса по заявке создана задача "Таймер ожидания рабочего времени"
    # :assert: По заявке доступно событие "Сброс таймера" и "Перезапуск таймера"
    # :step: Для роли middle_office (Мидл-офис) устанавливаем на системную дату рабочее время 00:00 - 23:59
    # :step:  выполняем событие "Перезапуск таймера"
    # :assert: После задачи «Ожидание рабочего времени» создана задача «Проверка возможности открытия БС» (ErrorText отсутствует - форма не отобразилась)
    # :assert: После задачи «Проверка возможности открытия БС» создана задача «Ожидание рабочего времени»

    # :newpage: #######################################################################################################

    # :assert: Выполняется запрос ITW/GetAnswerForBA, в котором передаются параметры: "reopen_blnc_transf_type" = ACCNT (Вид выплаты остатка), "reopen_blnc_transf_bic" = AKBBBY21514 (Код банка для перечисления остатка), "reopen_blnc_transf_accnt" = BY78AKBB97465114046544231747 (Номер счета для перечисления остатка)
    # :assert: В истории выполнения процесса после окончания сохранения клиента создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: На параметрах заявки присутствуют параметры kycId ([KYC] ID для проверки в Siron) = EFR2455865_fa986
    # :assert: Результат проверки сохранен в параметрах на заявки kycStatus ([KYC] Статус проверки клиента в KYC) = check, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-06T16:46:38, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус check успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)»
    # :assert: Кнопка "Завершить" не доступна для нажатия
    # :assert: На форме «Проверка клиента в KYC(Siron)» в поле «Результат проверки» получен статус "На проверке УФМ (произошло совпадение)"
    # :step: В Siron KYC устанавливаем статус pending
    # :step: Нажимаем кнопку "Обновить" на форме «Проверка клиента в KYC(Siron)»
    # :assert: В истории выполнения процесса создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: На параметрах заявки присутствуют параметры kycId ([KYC] ID для проверки в Siron) = EFR2456099_fce99
    # :assert: Результат проверки сохранен в параметрах на заявки kycStatus ([KYC] Статус проверки клиента в KYC) = pending, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-06T16:46:38, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус pending успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)», в поле «Результат проверки» получен статус "Отложен УФМ"
    # :step: В Siron KYC устанавливаем статус release
    # :step: Ожидаем 300 секунд (timeout=300)
    # :assert: Результат не обновляется на форме автоматически
    # :step: Ожидаем наступления рабочего времени
    # :assert: Результат обновился на форме автоматически, без обновления страницы браузера
    # :assert: В истории выполнения процесса создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: На параметрах заявки присутствуют параметры kycId ([KYC] ID для проверки в Siron) = EFR2455829_cc558
    # :assert: Результат проверки сохранен в параметрах на заявки kycStatus ([KYC] Статус проверки клиента в KYC) = release, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-06T16:46:38, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус release успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)»
    # :assert: На форме «Проверка клиента в KYC(Siron)» в поле «Результат проверки» получен статус "Совпадений нет по результатам проверки УФМ"
    # :step: Нажимаем кнопку "Отмена"
    # :assert: заявка доступна инициатору заявки
    # :assert: заявка доступна пользователю с ролью admins (maslova)
    # :assert: заявка доступна пользователю с ролью front_office (semenov)
    # :assert: заявка недоступна пользователю без роли admins или front_office (hominskaya)
    # :step: На форме «Проверка клиента в KYC(Siron)» нажимаем "Завершить"

    # :newpage: #######################################################################################################

    # :assert: переход на форму "ПЕЧАТЬ УВЕДОМЛЕНИЯ"
    # :assert: над чекбоксом "Заявление оформлено" выводится "В случае оформления заявления представителем владельца Базового счёта - направьте Уведомление письмом на адрес владельца Базового счёт" и "Передайте клиенту Заявление на переоформление базового счета для оформления расписки в получении Уведомления. Удостоверьтесь в подписании клиентом Заявление на переоформление базового счета и оформлении в нём расписки клиента в получении Уведомления, подтвердите оформление Заявление на переоформление базового счета:"
    # :assert: над ссылкой "Уведомление об открытии базового счёта" отображается текст "Распечатайте 1 экз. Уведомления об открытии базового счёта и его реквизитах, подпишите его со стороны Банка и передайте клиенту (в случае оформления заявления непосредственно владельцем Базового счёта):"
    # :assert: под ссылкой "Уведомление об открытии базового счёта" находится ссылка "Лист архива"
    # :step: переходим по ссылке "Лист архива"
    # :assert: сформировался лист архива по контракту базового счета
    # :step: Устанавливаем флаг Заявление оформлено
    # :assert: кнопка "Далее" активируется
    # :step: Нажимаем кнопку "Далее"
    # :assert: В параметрах заявки сохранен параметр "Уведомление об открытии базового счета" (notification_basic_accnt) с ссылкой для скачивания
    # :assert: В параметрах заявки сохранен параметр "Лист архива по контракту базового счета" (page_archive) с ссылкой для скачивания

    # :newpage: #######################################################################################################

    # :step: на форме "Выдача платежной карточки", устанавливаем флаг "Выдача платежной карточки оформлена в заявлении-анкете"
    # :step: Нажимаем на кнопку "Завершить выдачу карточки"

    # :newpage: #######################################################################################################

    # :assert: на форме "Подготовка документов к передаче на хранение" в списке документов для хранения есть "Заявление-анкета на оформление платежной карточки" и "Заявление на переоформление базового счета"
    # :assert: Присутствует текст "Передайте подготовленные документы в адрес ОСБПК УСРО ДРиСРБ"
    # :assert: Присутствует текст "Важно! Ответственность за правильность оформления и наличие всех необходимых документов по заявке несёт работник банка, который подтверждал оформление документов в ходе работы с заявкой и/или подтверждал их готовность в настоящей форме"
    # :step: устанавливаем флаг Документы по заявке подготовлены
    # :step: Нажимаем на кнопку "Далее"
    # :assert: заявка завершается исполнением, статус "Карточка выдана"
    # :assert: ФОРПОСТ. Открылся контракт на продукте/Варианте BASE_ACCNT_CARD_INSTANT/RS_VIP_BELCART_PREMIUM

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_57657_23(app, credo_db):
    """
    {#
        :id:                57657_23
        :priority:          Средний
        :module:            Депозиты
        :description:       Банковские вклады\ Оформление дополнительного взноса. Проверка клиента в KYC(Siron) в случае отката по ошибке при оформлении доп. взноса на вклад (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь авторизирован в СКЗ со всеми правами, ролями
        :precondition:      У пользователя СКЗ параметр useNewCabinet ("Использование нового интерфейса") = "Да"
        :precondition:      Клиент числится в списках Siron (статус = release (Совпадений нет по результатам проверки УФМ), клиент актуализирован
        :precondition:      На продукте\варианте "Банковские вклады"\"Оформление вклада" параметр needPreActualization ("Необходима предварительная актуализация клиента") = "да", параметр doKyc ([KYC] Проверять клиента в KYC) = "да"
        :precondition:      На тестового клиента оформлены вклады в национальной валюте и соответствующие следующим условиям: - Контракт вклада в статусе 'EXECUTE' или 'WORK'; - Возможно пополнение вклада (ITW_EFR_DP.REPLENISHABLE_DEP): для новых вкладов TERM% (- доп. условие 'REPLENISHABLE_MODE' контракта/варианта/продукта имеет значение 'YES' или 'MANUAL'; - не наступила дата с которой пополнение запрещено согласно доп. условия 'ADD_END_FROM_MONTHS' контракта/варианта/продукта (текущая дата + ADD_END_FROM_MONTHS < даты окончания вклада))
        :source_point:      57657, 58550
        :comment:           Вклад - "На 7 месяцев безотзывный - выгодный" (7 мес.) BYN, доп. взнос разрешен
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :comment:           Для создания тестового случая, после выбора счета для списания денежных средств, в БИС Forpost делаем расходную операцию со счета списания
        :comment:           Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 103 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 103 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'Deposits'

    VARIANT = 'RefillDeposit'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный (идентификационный) номер" тестового Клиента
    value = '6090990C601PB4'
    # :step: Нажимаем кнопку "Искать"
    # :step: Нажимаем на найденную краткую карточку клиента

    # :newpage: #######################################################################################################

    # :step: В профиле клиента в разделе "Действия с продуктами" заполняем поле "Продукт"
    value = 'Банковские вклады'
    # :step: В профиле клиента в разделе "Действия с продуктами" заполняем поле "Вариант"
    value = 'Оформление дополнительного взноса'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "ВЫБОР СЧЕТА ДЛЯ ЗАЧИСЛЕНИЯ ДЕНЕЖНЫХ СРЕДСТВ" выбираем вклад (радиобатон), который необходимо пополнить
    value = 'BY59OLMP34140000000800415618'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ОПРЕДЕЛЕНИЕ УСЛОВИЙ ОСУЩЕСТВЛЕНИЯ ДОПОЛНИТЕЛЬНОГО ВЗНОСА" заполняем поле "Сумма дополнительного взноса"
    value = '20'
    # :step: Заполняем радиобаттон "Безналичное перечисление со счета Клиента"
    # :step: Отмечаем чекбокс "Документ, удостоверяющий личность, предоставлен"
    # :step: Отмечаем чекбокс "Владельцем счета:" в блоке "Вноситель денежных средств является:"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Осуществляется переход на форму "Определение счета клиента для списания денежных средств"
    # :step: В таблице "Доступные счета Клиента:" выбираем счет для списания денежных средств
    value = 'BY96OLMP30140900000602821466'
    # :step: Нажимаем копку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Переходим на форму "Проверка клиента в KYC(Siron)"
    # :assert: на форме выводитсян ИД заявки, Результат проверки - Клиент САМОРОВА-ЛЕПИНА ДИЗА-АЛЛА ИГОРЕВНА Совпадений нет по результатам проверки УФМ, активные кнопки "Завершить" и "Отмена", кнопка "Обновить" - неактивна
    # :assert: Создается задача "Проверка клиента в KYC(Siron)"
    # :assert: В истории выполнения процесса после окончания сохранения клиента создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: Заявка находится в статусе "Карточки заблокированы", в Smartvista статус карточки =13
    # :assert: Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office (Служебная информация о заявке - "Performers: <инициатор заявки>, admins, front_office.")
    # :assert: На заявке созданы параметры: doKyc = "да", kycId = EFR2456040_6c54e, kycStatus = release, kycDate = 2022-07-12T16:49:19, kycComment = Статус release успешно установлен, kycCompleted = да

    # :newpage: #######################################################################################################

    # :step: В БИС Forpost делаем расходную операцию со счета списания "BY96OLMP30140900000602821466"
    # :assert: Остаток счета меньше суммы операции
    # :step: Нажимаем кнопку "Завершить" на форме "Проверка клиента в KYC(Siron)"

    # :newpage: #######################################################################################################

    # :assert: Переходим на форму "Отображение ошибки"
    # :assert: На форме выводится ИД заявки, сообщение "Ошибка при выполнении операции пополнения вклада" и текстом "#Баланс дебетового счета меньше лимита !", Действие "Устраните указанную ошибку и выполните задачу(Повторить) или вернитесь к определению способа внесения взноса(Далее)", активные кнопки "Далее", "Завершить" и "Отмена"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Осуществляется возврат на форму "Определение счета клиента для списания денежных средств"
    # :step: Выбираем счет для списания денежных средств
    value = 'BY37OLMP30140900000602821461'
    # :step: Нажимаем копку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Переходим на форму "Проверка клиента в KYC(Siron)"
    # :assert: На форме Результат проверки -  Клиент САМОРОВА-ЛЕПИНА ДИЗА-АЛЛА ИГОРЕВНА Совпадений нет по результатам проверки УФМ
    # :assert: Запрос в KYC(Siron) не происходит, параметр заявки kycDate ([KYC] Время проверки клиента в KYC) не изменился
    # :step: Нажимаем кнопку "Завершить"
    # :assert: Статус заявки "Пополнение произведено", в Smartvista статус карточки = 00
    # :assert: Переходим на форму "Оформление документов при дополнительном взносе "

    # :newpage: #######################################################################################################

    # :step: Заполняем чекбокс "Документы оформлены"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На форме "Завершение оформления дополнительного взноса" заполняем чекбокс "Документы переданы клиенту"
    # :step: Нажимаем кнопку "Завершить оформление"

    # :newpage: #######################################################################################################

    # :assert: Заявка завершается исполнением, статус "Окончена обработка"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_57657_24(app, credo_db):
    """
    {#
        :id:                57657_24
        :priority:          Средний
        :module:            Депозиты
        :description:       Банковские вклады\Оформление возврата вклада по истечении срока возврата. Проверка создания задачи «Проверка клиента в KYC(Siron)», статус клиента «block» + текст произвольный с "block" в начале строки поля «kycComment»".Проверка на регистронезависимоть комментария с текстом «block» и «permit» в начале текста (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь авторизирован в СКЗ со всеми правми, ролями
        :precondition:      У пользователя СКЗ параметр useNewCabinet ("Использование нового интерфейса") = "Да"
        :precondition:      Контракт вклада должен быть в состоянии EXECUTE
        :precondition:      Дата окончания контракта = Текщей дате (дата филиала)
        :precondition:      В списке счетов отображаются все счета по вкладам,но кликабельны только счета в состоянии OVERDUE и EXECUTE, у которых дата завершения=текущей дате
        :precondition:      На счете вклада нет ареста (ITW_ACCNT.GET_ARREST).
        :precondition:      На продукте\варианте "Банковские вклады"\"Оформление вклада" параметр needPreActualization ("Необходима предварительная актуализация клиента") = "да", параметр doKyc ([KYC] Проверять клиента в KYC) = "да"
        :precondition:      Клиент числится в списках Siron (статус = block (текст = BloCk и PeRmiT (текст «block» в начале строки))), клиент актуализирован
        :precondition:      Текст записи "Уведомление о блокировке продукта в результате проверки в Siron KYC" из справочника «Информационные блоки ЕФР» - "ТЕСТ - УФМ принято решение о запрете на установление договорных отношений. Ожидайте уведомление по электронной почте."
        :source_point:      57657, 58550
        :comment:           Вклад "На 3 года отзывный - выгодный"_3 BYN (дата завершения равна текущей)
        :comment:           Текущая дата филиала 2021.12.09
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 103 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 103 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'Deposits'

    VARIANT = 'ReturnDeposit'


    # :newpage: #######################################################################################################

    # :step: Находим тестового клиента по личному номеру
    value = '6090990C601PB4'
    # :step: Нажимаем кнопку "Искать"
    # :step: Нажимаем на найденную краткую карточку клиента

    # :newpage: #######################################################################################################

    # :step: В профиле клиента в разделе "Действия с продуктами" заполняем поле "Продукт"
    value = 'Банковские вклады'
    # :step: В профиле клиента в разделе "Действия с продуктами" заполняем поле "Вариант"
    value = 'Оформление возврата вклада по истечении срока возврата'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "Выбор счета, по которому необходимо осуществить возврат вклада по истечении срока возврата вклада" выбираем вклад
    value = ' BY30OLMP34140000000800404694'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Определение способа возврата вклада по истечении срока возврата вклада" выбираем способ возврата вклада (чекбокс)
    value = 'В безналичной форме на счет Клиента'
    # :step: Выбираем  доступный счет Клиента, на который будет произведен перевод денежных средств (радиобаттон)
    value = 'BY37OLMP30140900000602821461'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Переходим на форму "Проверка клиента в KYC(Siron)"
    # :assert: на форме выводитсян ИД заявки, Клиент САМОРОВА-ЛЕПИНА ДИЗА-АЛЛА ИГОРЕВНА Произошло совпадение УФМ (принято решение о блокировке), активные кнопки "Завершить" и "Отмена", кнопка "Обновить" - неактивна. Выведен текст из справочника «Информационные блоки ЕФР» записи "Уведомление о блокировке продукта в результате проверки в Siron KYC"
    # :assert: Создается задача "Проверка клиента в KYC(Siron)"
    # :assert: В истории выполнения процесса после окончания сохранения клиента создались задачи "Проверка KYC", "Запуск процесса KycChecker", "Проверка клиента в KYC(Siron)"
    # :assert: Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office (Служебная информация о заявке - "Performers: <инициатор заявки>, admins, front_office.")
    # :assert: На заявке созданы параметры: doKyc = "да", kycId = EFR2456209_45e10, kycStatus = block, kycDate = 2022-07-14T12:04:02, kycComment = BloCk и PeRmiT
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: Заявка завершается отказом, статус "Клиент не соответствует требованиям ЛНПА'

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_57657_25(app, credo_db):
    """
    {#
        :id:                57657_25
        :priority:          Средний
        :module:            Депозиты
        :description:       Оформление возврата вклада по истечении срока возврата. Проверка создания задачи «Проверка клиента в KYC(Siron)», статус клиента «block» + текст произвольный в поле «kycComment» (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь авторизирован в СКЗ со всеми правами, ролями
        :precondition:      У пользователя СКЗ параметр useNewCabinet ("Использование нового интерфейса") = "Да"
        :precondition:      Контракт вклада должен быть в состоянии EXECUTE, Дата окончания контракта = Текщей дате (дата филиала), на счете вклада нет ареста (ITW_ACCNT.GET_ARREST)
        :precondition:      В списке счетов отображаются все счета по вкладам,но кликабельны только счета в состоянии OVERDUE и EXECUTE, у которых дата завершения=текущей дате
        :precondition:      На продукте\варианте "Банковские вклады"\"Оформление вклада" параметр needPreActualization ("Необходима предварительная актуализация клиента") = "да", параметр doKyc ([KYC] Проверять клиента в KYC) = "да"
        :precondition:      Клиент числится в списках Siron (статус = block (текст произвольный = Проверка BloCk и PeRmiT (текст «block» и текст «permit» не вначале строки))), клиент актуализирован
        :precondition:      Текст записи "Уведомление о блокировке продукта в результате проверки в Siron KYC" из справочника «Информационные блоки ЕФР» - "ТЕСТ - УФМ принято решение о запрете на установление договорных отношений. Ожидайте уведомление по электронной почте."
        :source_point:      57657, 58550
        :comment:           Текущая дата филиала 2021.12.09
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :comment:           Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 103 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 103 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'Deposits'

    VARIANT = 'ReturnDeposit'


    # :newpage: #######################################################################################################

    # :step: Находим тестового клиента по личному номеру
    value = '6090990C601PB4'
    # :step: Нажимаем кнопку "Искать"
    # :step: Нажимаем на найденную краткую карточку клиента

    # :newpage: #######################################################################################################

    # :step: В профиле клиента в разделе "Действия с продуктами" заполняем поле "Продукт"
    value = 'Банковские вклады'
    # :step: В профиле клиента в разделе "Действия с продуктами" заполняем поле "Вариант"
    value = 'Оформление возврата вклада по истечении срока возврата'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "Выбор счета, по которому необходимо осуществить возврат вклада по истечении срока возврата вклада" выбираем вклад
    value = 'BY30OLMP34140000000800404694'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Определение способа возврата вклада по истечении срока возврата вклада" выбираем способ возврата вклада (чекбокс)
    value = 'В безналичной форме на счет Клиента'
    # :step: Выбираем  доступный счет Клиента, на который будет произведен перевод денежных средств (радиобаттон)
    value = 'BY37OLMP30140900000602821461'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Переходим на форму "Проверка клиента в KYC(Siron)"
    # :assert: на форме выводитсян ИД заявки, Клиент САМОРОВА-ЛЕПИНА ДИЗА-АЛЛА ИГОРЕВНА Произошло совпадение УФМ (принято решение о блокировке), активные кнопки "Завершить" и "Отмена", кнопка "Отменить" - неактивна. Выведен текст из справочника «Информационные блоки ЕФР» записи "Уведомление о блокировке продукта в результате проверки в Siron KYC"
    # :assert: Создается задача "Проверка клиента в KYC(Siron)"
    # :assert: В истории выполнения процесса после окончания сохранения клиента создались задачи "Проверка KYC", "Запуск процесса KycChecker", "Проверка клиента в KYC(Siron)"
    # :assert: Заявка находится в статусе "Способ внесения выбран"
    # :assert: Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office (Служебная информация о заявке - "Performers: <инициатор заявки>, admins, front_office.")
    # :assert: На заявке созданы параметры: doKyc = "да", kycId = EFR2456197_00ff4, kycStatus = block, kycDate = 2022-07-14T10:57:14. , kycComment = Проверка BloCk и PeRmiT
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: Заявка завершается отказом, статус "Клиент не соответствует требованиям ЛНПА'

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_57657_26(app, credo_db):
    """
    {#
        :id:                57657_26
        :priority:          Средний
        :module:            Депозиты
        :description:       Банковские вклады\Оформление дополнительного взноса. Проверка создания задачи «Проверка клиента в KYC(Siron)», статус клиента «block» + None (поле «kycComment» пустое) (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь авторизирован в СКЗ со всеми правами, ролями
        :precondition:      У пользователя СКЗ параметр useNewCabinet ("Использование нового интерфейса") = "Да"
        :precondition:      На продукте\варианте "Банковские вклады"\"Оформление вклада" параметр needPreActualization ("Необходима предварительная актуализация клиента") = "да", параметр doKyc ([KYC] Проверять клиента в KYC) = "да"
        :precondition:      Клиент числится в списках Siron (статус = block (None)), клиент актуализирован
        :precondition:      На тестового клиента оформлены вклады в национальной валюте и соответствующие следующим условиям: - Контракт вклада в статусе 'EXECUTE' или 'WORK'; - Возможно пополнение вклада (ITW_EFR_DP.REPLENISHABLE_DEP): для новых вкладов TERM% (- доп. условие 'REPLENISHABLE_MODE' контракта/варианта/продукта имеет значение 'YES' или 'MANUAL'; - не наступила дата с которой пополнение запрещено согласно доп. условия 'ADD_END_FROM_MONTHS' контракта/варианта/продукта (текущая дата + ADD_END_FROM_MONTHS < даты окончания вклада))
        :precondition:      Текст записи "Уведомление о блокировке продукта в результате проверки в Siron KYC" из справочника «Информационные блоки ЕФР» - "ТЕСТ - УФМ принято решение о запрете на установление договорных отношений. Ожидайте уведомление по электронной почте."
        :source_point:      57657, 58550
        :comment:           Вклад - "На 7 месяцев безотзывный - выгодный" (7 мес.) BYN
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 103 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 103 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'Deposits'

    VARIANT = 'RefillDeposit'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный (идентификационный) номер" тестового Клиента
    value = '6090990C601PB4'
    # :step: Нажимаем кнопку "Искать"
    # :step: Нажимаем на найденную краткую карточку клиента

    # :newpage: #######################################################################################################

    # :step: В профиле клиента в разделе "Действия с продуктами" заполняем поле "Продукт"
    value = 'Банковские вклады'
    # :step: В профиле клиента в разделе "Действия с продуктами" заполняем поле "Вариант"
    value = 'Оформление дополнительного взноса'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "ВЫБОР СЧЕТА ДЛЯ ЗАЧИСЛЕНИЯ ДЕНЕЖНЫХ СРЕДСТВ" выбираем вклад (радиобатон), который необходимо пополнить
    value = 'BY59OLMP34140000000800415618'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "ОПРЕДЕЛЕНИЕ УСЛОВИЙ ОСУЩЕСТВЛЕНИЯ ДОПОЛНИТЕЛЬНОГО ВЗНОСА" заполняем поле "Сумма дополнительного взноса"
    value = '10'
    # :step: Заполняем радиобаттон "Безналичное перечисление со счета Клиента"
    # :step: Отмечаем чекбокс "Документ, удостоверяющий личность, предоставлен"
    # :step: Отмечаем чекбокс "Владельцем счета:" в блоке "Вноситель денежных средств является:"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Осуществляется переход на форму "Определение счета клиента для списания денежных средств"
    # :step: В таблице "Доступные счета Клиента:" выбираем счет для списания денежных средств
    value = 'BY37OLMP30140900000602821461'
    # :assert: Карточка, привязанноя к выбранному счету, блокируется в SmartVista (status =13)
    # :step: Нажимаем копку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Переходим на форму "Проверка клиента в KYC(Siron)"
    # :assert: на форме выводитсян ИД заявки, Клиент САМОРОВА-ЛЕПИНА ДИЗА-АЛЛА ИГОРЕВНА Произошло совпадение УФМ (принято решение о блокировке), активные кнопки "Завершить" и "Отмена", кнопка "Обновить" - неактивна. Выведен текст из справочника «Информационные блоки ЕФР» записи "Уведомление о блокировке продукта в результате проверки в Siron KYC"
    # :assert: Создается задача "Проверка клиента в KYC(Siron)"
    # :assert: В истории выполнения процесса после окончания сохранения клиента создались задачи "Проверка KYC", "Запуск процесса KycChecker", "Проверка клиента в KYC(Siron)"
    # :assert: Заявка находится в статусе "Карточки заблокированы"
    # :assert: На заявке созданы параметры: doKyc = "да", kycId = EFR2456200_2eaa9, kycStatus = block, kycDate = 2022-07-14T11:31:52. Параметр kycComment отсутствует
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: Заявка завершается отказом, статус "Клиент не соответствует требованиям ЛНПА'

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_57657_27(app, credo_db):
    """
    {#
        :id:                57657_27
        :priority:          Средний
        :module:            Депозиты
        :description:       Оформление досрочного возврата части вклада. Проверка создания задачи «Проверка клиента в KYC(Siron)», статус клиента «block» + текст «block» (58550) Видимость задачи "Проверка клиента в KYC(Siron)"
        :precondition:      Пользователь авторизирован в СКЗ со всеми правами, ролями
        :precondition:      У пользователя СКЗ параметр useNewCabinet ("Использование нового интерфейса") = "да"
        :precondition:      На продукте\варианте "Банковские вклады"\"Оформление вклада" параметр needPreActualization ("Необходима предварительная актуализация клиента") = "да", параметр doKyc ([KYC] Проверять клиента в KYC) = "да"
        :precondition:      Клиент числится в списках Siron (статус = block (block state successfully set)), клиент актуализирован
        :precondition:      Контракт вклада в статусе 'EXECUTE' или 'WORK'
        :precondition:      Для старых вкладов: доп. условия 'DRAW_PRINCIPAL_MODE', 'PARTIAL_WD' контракта/варианта/продукта имеют значение 'YES'
        :precondition:      Вклады не 'DEP_CARD' открытые после '2013.06.17' доступны для списания (DAYS_FOR_DRAW_OK не 0 и дата открытия вклада + DAYS_FOR_DRAW_OK <= текущей даты)
        :precondition:      Сумма, доступная для списания больше нуля
        :precondition:      Для новых вкладов:доп. условие 'WITHDRAW_MODE' контракта/варианта/продукта имеет значение 'YES'
        :precondition:      Доступно списание согласно одного из доп. условий контракта/варианта/продукта 'WITHDRAW_START_FROM_MONTHS', 'WITHDRAW_START_FROM' (дата открытия вклада + WITHDRAW_START_FROM_MONTHS <= текущей даты или дата открытия вклада  WITHDRAW_START_FROM <= текущей даты)
        :precondition:      Остаток суммы вклада за вычетом процентов, доступных для снятия, больше неснижаемого (доп. условие контракта 'CRT_AMOUNT_MIN')
        :precondition:      Текст записи "Уведомление о блокировке продукта в результате проверки в Siron KYC" из справочника «Информационные блоки ЕФР» - "ТЕСТ - УФМ принято решение о запрете на установление договорных отношений. Ожидайте уведомление по электронной почте."
        :source_point:      57657, 58550
        :comment:           Вклад На 3 месяца (отзывный) - выгодный", валюта BYN. Выбран вклад с возможностью досрочного возврата части вклада
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 103 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 102 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 103 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'Deposits'

    VARIANT = 'PartWithdrawDeposit'


    # :newpage: #######################################################################################################

    # :step: Находим тестового клиента по личному номеру
    value = '6090990C601PB4'
    # :step: Нажимаем кнопку "Искать"
    # :step: Нажимаем на найденную краткую карточку клиента

    # :newpage: #######################################################################################################

    # :step: В профиле клиента в разделе "Действия с продуктами" заполняем поле "Продукт"
    value = 'Банковские вклады'
    # :step: В профиле клиента в разделе "Действия с продуктами" заполняем поле "Вариант"
    value = 'Оформление досрочного возврата части вклада'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "Выбор счета по списанию денежных средств" выбераем счет, по которому необходимо осуществить досрочный возврат части вклада
    value = 'BY30OLMP34140000000800404694'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Определение способа досрочного возврата части вклада" вводим сумму расходной операции
    value = '10'
    # :step: Выбираем способ перечисления средств (чекбокс)
    value = 'В наличной форме в кассе Банка'
    # :step: Выбираем кассу банка (радиобаттон)
    value = 'Касса 1010'
    # :step: Подтверждаем, что заявление на досрочный возврат части вклада оформлено (чекбокс)
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Переходим на форму "Проверка клиента в KYC(Siron)"
    # :assert: на форме выводитсян ИД заявки, Клиент САМОРОВА-ЛЕПИНА ДИЗА-АЛЛА ИГОРЕВНА Произошло совпадение УФМ (принято решение о блокировке), активные кнопки "Завершить" и "Отмена", кнопка "Обновить" - неактивна. Выведен текст из справочника «Информационные блоки ЕФР» записи "Уведомление о блокировке продукта в результате проверки в Siron KYC"
    # :assert: Создается задача "Проверка клиента в KYC(Siron)"
    # :assert: В истории выполнения процесса после окончания сохранения клиента создались задачи "Проверка KYC", "Запуск процесса KycChecker", "Проверка клиента в KYC(Siron)"
    # :assert: Задача назначена на инициатора заявки, на пользователей с ролью admins и пользователей с ролью front_office(Служебная информация о заявке - "Performers: ...")
    # :assert: На заявке созданы параметры: doKyc = "да", kycId = EFR2456196_d881d, kycStatus = block, kycDate = 2022-07-14T10:30:04, kycComment = block state successfully set
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: Заявка завершается отказом, статус "Клиент не соответствует требованиям ЛНПА'

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)



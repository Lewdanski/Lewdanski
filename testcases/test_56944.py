# :suit_description: #56944
# :revision_date: 03.08.2022

@pytest.mark.skip(reason="Template")
def test_53753_2(app, credo_db):
    """
    {#
        :id:                53753_2
        :priority:          Средний
        :module:            ЕФР
        :description:       Проверка формата полей, валидации и доступности кнопок на форме «Реквизиты клиента юридического лица» для юридического лица с "Типом субъекта ЕРК" = 2. Проверка создания клиента ЮЛ в СКЗ и ЕРК. (56944) Изменение название элемента «Наименование» на «Название»
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Пользователь имеет роль msb_front_office
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      В справочнике «Тип субъекта по классификации НБРБ» есть записи у которых «Тип субъекта ЕРК» = «2»
        :precondition:      Связанные субъекты ФЛ существуют в ЕРК, СКЗ, все ключевые данные присутствуют
        :precondition:      На продукте/варианте параметр doKyc (Проверять клиента в KYC) = нет
        :precondition:      В  разделе "Валюты" должны быть валюты, у которых в поле "Метки валют" указано значение "Карточка клиента юридического лица"
        :source_point:      53753, 55984, 56009, 56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :comment:           Текущая дата 09.02.2020
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 17.04.2020
        :client_env:        Google Chrome 87 [Windows 10; openSuSE Linux Leap 42.2]
        :client_env:        Mozilla Firefox 83 [Windows 10; openSuSE Linux Leap 42.2]
        :client_env:        Microsoft EDGE 87 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем значение поля "Наименование страны регистрации клиента"
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :assert: Значения в списке = справочник СКЗ countries "Страны и государства"
    # :step: На форме "Поиск карточки клиента в учетной системе Банка" заполняем поле "УНП/Идент. номер нерез."
    value = '123456789'
    # :step: Нажимаем кнопку "Поиск"
    # :step: Нажимаем кнопку "Заведение карточки клиента"

    # :newpage: #######################################################################################################

    # :assert: Осуществляется переход на форму "Реквизиты клиента юридического лица"
    # :assert: Отрабатывает процесс Corporate.Card - см. request.log
    # :assert: На форме предзаполнены поля "Наименование страны регистрации клиента" и "УНП/Идент. номер нерез." значениями, введенными на форме "Поиск карточки клиента в учетной системе Банка"
    # :assert: Кнопка "Далее" заблокирована
    # :assert: Поле "Основной вид деятельности (ОКЭД)" заблокировано
    # :step: Выбираем значение поля "Наименование страны регистрации клиента" не равное "РЕСПУБЛИКА БЕЛАРУСЬ"
    value = 'РОССИЙСКАЯ ФЕДЕРАЦИЯ'
    # :step: Заполняем "УНП/Идент. номер нерез." валидным значением  < 100 символов
    value = '12345678*/#'
    # :step: Пытаемся заполнить "УНП/Идент. номер нерез." невалидным значением  > 100 символов (101)
    value = 'Равным образом рамки и место обучения кадров способствует подготовки и реализации существенных финанс'
    # :assert: Значение поля "УНП/Идент. номер нерез." обрезается до 100 символов (Равным образом рамки и место обучения кадров способствует подготовки и реализации существенных финан)
    # :step: Выбираем значение поля "Наименование страны регистрации клиента" = "РЕСПУБЛИКА БЕЛАРУСЬ"
    # :step: Заполняем невалидным значением "УНП/Идент. номер нерез." < 9 символов
    value = '12345678'
    # :assert: Выводится сообщение об ошибке ввода "Неверный формат"
    # :step: Заполняем невалидным значением "УНП/Идент. номер нерез." > 9 символов
    value = '1234567890'
    # :assert: Выводится сообщение об ошибке ввода "Неверный формат"
    # :step: Заполняем невалидным значением "УНП/Идент. номер нерез." = 9 символов, с буквами
    value = '123456AFT'
    # :assert: Выводится сообщение об ошибке ввода "Неверный формат"
    # :step: Заполняем невалидным значением "УНП/Идент. номер нерез." = 9 символов, с спецсимволами
    value = '12345678#'
    # :assert: Выводится сообщение об ошибке ввода "Неверный формат"
    # :step: Заполняем невалидным значением "УНП/Идент. номер нерез." = 9 символов, с пробелами
    value = '12345 789'
    # :assert: Выводится сообщение об ошибке ввода "Неверный формат"
    # :step: Заполняем числовым, целым (без пробелов) валидным значением "УНП/Идент. номер нерез." = 9 символов
    value = '123456789'
    # :step: Выбираем значение поля "Организационно-правовая форма клиента"
    value = 'ФОНД'
    # :assert: Значения для выбора = значения из справочника ЕРК "Организационно-правовая форма клиента"
    # :step: Заполняем "Название" невалидным значением > 500 символов (501)
    value
    # :assert: Поле "Название" заполнилось значением из 500 символов
    # :step: Заполняем "Полное наименование" невалидным значением > 500 символов (501)
    value
    # :assert: Поле "Название" заполнилось значением из 500 символов
    # :step: Очищаем поле "Название"
    # :assert: Выводится сообщение об ошибке "Значение обязательно для заполнения"
    # :step: Очищаем поле "Полное наименование"
    # :assert: Выводится сообщение об ошибке "Значение обязательно для заполнения"
    # :step: Заполняем "Название"
    value = 'УЦ HR 123 "-+().,=№/\'
    # :step: Заполняем "Полное наименование"
    value = 'Полное наименование'
    # :step: Выбираем "Тип субъекта" из выпадающего списка, у которого в справочнике «Тип субъекта по классификации НБРБ» поле «Тип субъекта ЕРК» = «2»
    value = 'фондовые и валютные биржи'
    # :assert: В списке в виде дерева отображаются значения поля «Наименование строки справочника»  справочника СКЗ "Тип субъекта по классификации НБРБ". Для выбора доступны значения только нижнего уровня иерархии
    # :assert: Поле "Вид деятельности (код ОКЭД)" разблокировано
    # :assert: Отображаются поля "Количество сотрудников", "Сумма", "Валюта"
    # :step: выбираем "Оргструктура" из выпадающего списка
    value = '10 - Юридические лица'
    # :assert: В списке для выбора отображаются значения поля "GSS_NAME" из справочника ЕРК "GC_SPR_SIMPLE_TYPE_ORG_STRUCT_FORM"
    # :step: Выбираем "Тип сектора экономики (форма собственности)" из выпадающего списка
    value = 'Государственная собственность (110+120)'
    # :assert: В списке для выбора отображаются значения поля "GSS_NAME" из справочника ЕРК "GC_SPR_SIMPLE_TYPE_OWNERSHIP"
    # :step: Выбираем несколько значений "Вид деятельности (код ОКЭД)" из выпадающего списка
    value = '01111 Выращивание зерновых и бобовых культур'
    value = '01112 Выращивание семян масличных культур'
    # :assert: В списке в виде дерева отображаются значения полей "GSS_NAME" справочника ЕРК "DET_OKVED" с учетом ограничения кодов для типа субъекта по справочнику «Тип субъекта по классификации НБРБ». Для выбора доступны значения только нижнего уровня иерархии. Возможен поиск по коду и наименованию
    # :assert: Доступен множественный выбор - выбираются оба варианта
    # :step: Убираем одно из значений "Вид деятельности (код ОКЭД)" - нажимаем на "х" на наименовании вида деятельности с подтверждением кнопкой "Удалить" в модальном окне
    # :assert: на форме остался один вид деятельности
    # :step: Выбираем еще значение "Вид деятельности (код ОКЭД)"
    value = ' 01131 Выращивание картофеля'
    # :assert: "Вид деятельности (код ОКЭД)" дополнился последним выбранным значением - всего два варианта
    # :step: Заполняем "Количество сотрудников" невалидным значением = буквы
    value = 'йцукен'
    # :assert: Выводится ошибка "Неверный формат"
    # :step: Заполняем "Количество сотрудников" невалидным числовым значением со знаком разделителем "."
    value = '15.3'
    # :assert: Выводится ошибка "Неверный формат"
    # :step: Заполняем поле "Количество сотрудников" невалидным числовым значением со знаком разделителем ","
    value = '15,3'
    # :assert: Выводится ошибка "Неверный формат"
    # :step: Пытаемся заполнить "Количество сотрудников" невалидным значением  > 10 символов
    value = '12345678901'
    # :assert: Числовое значение поля "Количество сотрудников" обрезается до 10 символов
    # :step: Пытаемся заполнить "Сумма" невалидным текстовым значением
    value = 'йцукен'
    # :assert: Выводится ошибка "Неверный формат"
    # :step: Пытаемся заполнить невалидным значением поле "Сумма" > 100 символов (101)
    value = '15464564564564567567574546548945123489485132158498756423484954312647935313123123123131231231245346456'
    # :assert: Числовое значение поля "Сумма" обрезается до 100 символов
    # :step: Заполняем поле "Сумма" невалидным значением со знаком разделителем "."
    value = '15.3'
    # :assert: Выводится ошибка "Неверный формат"
    # :step: Заполняем поле "Сумма" невалидным значением со знаком разделителем ","
    value = '15,3'
    # :assert: Выводится ошибка "Неверный формат"
    # :step: Заполняем поле "Сумма" валидным значением
    value = '153000.3200'
    # :assert: значение делится на триады (153 000.32)
    # :step: Выбираем "Валюту" из выпадающего списка
    value = 'Белорусский рубль'
    # :assert: В списке отображаются валюты из раздела "Валюты", у которых в поле "Метки валют" указано значение "Карточка клиента юридического лица"
    # :step: Выбираем "Клиентский блок" из выпадающего списка
    value = 'Корпоративный бизнес'
    # :assert: В списке отображаются значения поля "GSS_NAME" из справочника ЕРК "GC_SPR_SIMPLE_TYPE_TYPE_CUSTBLOCK"
    # :step: Выбираем значение "Объем выручки" из выпадающего списка
    value = 'До 3 млн.USD'
    # :assert: В списке отображаются значения поля "GSS_NAME" из справочника ЕРК "GC_SPR_SIMPLE_TYPE_ANNUAL_REVENUE"
    # :step: Нажимаем на кнопку "Добавить бенефициарного владельца"  в разделе "Информация о бенефициарных владельцах" блока "Связанные субъекты"
    # :assert: отображается модальное окно "Информация о бенефициарных владельцах" для заполнения с активной кнопкой "Отмена", кнопка "Добавить" недоступна
    # :step: На форме "Информация о бенефициарных владельцах" заполняем невалидным значением "ФАМИЛИЯ" c сочетанием букв русского и латинского алфавита, нижний регистр
    value =  'йцукенqwerty'
    # :assert: Выводится сообщение "Неверный формат", символы переводятся в верхний регистр
    # :step: Заполняем невалидным значением "ФАМИЛИЯ" c пробелом в конце
    value =  'йцукен '
    # :assert: Выводится сообщение "Неверный формат", символы переводятся в верхний регистр
    # :step: Заполняем невалидным значением "ФАМИЛИЯ" c пробелом в начале
    value =  ' йцукен'
    # :assert: Выводится сообщение "Неверный формат", символы переводятся в верхний регистр
    # :step: Пытаемся заполнить невалидным значением "ФАМИЛИЯ" > 70 символов (71)
    value =  'СОЗЕРЦАНИЕНЕПРЕДСКАЗУЕМОГЕДОНИЗМОСМЫСЛЯЕТДЕДУКТИВНЫЙМЕТОДСТРУКТУРКОНЕЦЛ'
    # :assert: Текстовое значение поля "ФАМИЛИЯ" обрезается до 70 символов
    # :step: Заполняем невалидным значением "ИМЯ" c сочетанием букв русского и латинского алфавита, нижний регистр
    value =  'йцукенqwerty'
    # :assert: Выводится сообщение "Неверный формат", символы переводятся в верхний регистр
    # :step: На форме "Информация о бенефициарных владельцах" заполняем текстовое поле, невалидным значением "ИМЯ" c пробелом в конце
    value =  'йцукен '
    # :assert: Выводится сообщение "Неверный формат", символы переводятся в верхний регистр
    # :step: Заполняем текстовое поле, невалидным значением "ИМЯ" c пробелом в начале
    value =  ' йцукен'
    # :assert: Выводится сообщение "Неверный формат", символы переводятся в верхний регистр
    # :step: Пытаемся заполнить невалидным значением "ИМЯ" > 70 символов (71)
    value =  'СОЗЕРЦАНИЕНЕПРЕДСКАЗУЕМОГЕДОНИЗМОСМЫСЛЯЕТДЕДУКТИВНЫЙМЕТОДСТРУКТУРКОНЕЦЛ'
    # :assert: Текстовое значение поля "ИМЯ" обрезается до 70 символов
    # :assert: кнопка "Добавить" активируется
    # :step: Пытаемся заполнить "Дату рождения" выбором из календаря или ручным набором невалидным значением с датой > текущей дате
    value =  '09.02.2020'
    # :assert: нельзя ввести дату больше текущей
    # :step: Пытаемся ввести "Дату рождения" невалидным значением с датой = текущей дате
    value =  '09.02.2020'
    # :assert: нельзя ввести дату равной текущей
    # :step: Заполняем "Дату рождения"
    value =  '09.02.1985'
    # :step: Выбираем значение поля "Страна гражданства"
    value =  'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :assert: значения в списке = справочник СКЗ countries "Страны и государства"
    # :step: Нажимаем на кнопку "Добавить"
    # :assert: Форма для ввода владельца закрывается, на форме "Реквизиты клиента юридического лица" отображается карточка с введенными данными бенефициарного владельца
    # :assert: Кнопки "Добавить сведения о счете", "Добавить сведения бенифициарного владельца", "Информация о руководителе отсутствует" и "Информация о лице, осуществляющем руководство бухгалтерским учетом отсутствует" оранжевого цвета (в стиле ЕФР)
    # :step: Нажимаем на кнопку "Добавить бенефициарного владельца"
    # :step: Заполняем поле "ФАМИЛИЯ" на форме "Информация о бенефициарных владельцах
    value =  'ФАМИЛИЯ'
    # :step: Заполняем поле"ИМЯ"
    value =  'ИМЯ'
    # :step: Заполняем поле "Имя латинскими буквами" 71 символами
    value = 'Z-ZZ'ZZ ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'
    # :assert: Водится только 70 символов всегда в верхнем регистре и только латиницей
    # :step: Заполняем поле "Имя латинскими буквами"
    value = ' AL LS'
    # :assert: Выводится сообщение "Неверный формат"
    # :step: Заполняем поле "Фамилия латинскими буквами"
    value = 'AL LS '
    # :assert: Выводится сообщение "Неверный формат"
    # :step: Нажимаем на кнопку "Добавить"
    # :assert: На форме "Реквизиты клиента юридического лица" последовательно отображаются карточки с информацией о каждом из бенефициарных владельцев ЮЛ.
    # :step: Нажимаем "Информация о руководителе отсутствует" в разделе "Информация о руководителе" блока "Связанные субъекты"

    # :newpage: #######################################################################################################

    # :assert: Осуществляется переход на форму "Поиск карточки руководителя"
    # :step: заполняем личный номер клиента ФЛ
    value = '7218233A979PB9'
    # :assert: На форме "Реквизиты клиента юридического лица" кнопка "Изменить связь" в блоке "Информация о руководителе" оранжевого цвета (в стиле ЕФР)
    # :step: нажимаем "Поиск Карточки клиента"
    # :step: Выбираем карточку Клиента

    # :newpage: #######################################################################################################

    # :assert: переход на форму "Заведение/актуализация карточки руководителя"
    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: В разделе "Информация о руководителе" появилась карточка связанного субъекта с отображением ФИО, Даты рождения, Регистрационного номера, данных ДУЛа из карточки клиента ФЛ
    # :step: Отмечаем чекбокс "Осуществляет руководство бухгалтерским учетом лично"
    # :assert: Карточка клиента из раздела "Информация о руководителе" переносится в раздел "Информация о лице, осуществляющем руководство бухгалтерским учетом"
    # :assert: В разделе "Информация о лице, осуществляющем руководство бухгалтерским учетом" по умолчанию выбрано значение «Должностное лицо с правом подписи» (радиобаттон)
    # :step: Снимаем отметку в чекбоксе "Осуществляет руководство бухгалтерским учетом лично"
    # :assert: Карточка клиента из раздела "Информация о лице, осуществляющем руководство бухгалтерским учетом" переносится в раздел "Информация о руководителе"
    # :step: Нажимаем "Информация о лице, осуществляющем руководство бухгалтерским учетом отсутствует" в разделе "Информация о лице, осуществляющем руководство бухгалтерским учетом" блока "Связанные субъекты"

    # :newpage: #######################################################################################################

    # :assert: переход на форму "Поиск карточки лица, осуществляющем руководство бухгалтерским учетом"
    # :step: заполняем личный номер клиента ФЛ
    value = '4030987A091PB3'
    # :step: нажимаем "Поиск Карточки клиента"
    # :assert: Кнопка "Поиск карточки клиента" оранжевого цвета (в стиле ЕФР)
    # :step: Выбираем карточку Клиента

    # :newpage: #######################################################################################################

    # :assert: переход на форму "Заведение/актуализация карточки лица, осуществляющем руководство бухгалтерским учетом"
    # :assert: Проверки лица, осуществляющего руководство бухгалтерским учетом, выполнены успешно. Переходим на форму задачи «Реквизиты клиента юридического лица» и устанавливается статус на заявке «Ввод параметров клиента»
    # :assert: На форме "Реквизиты клиента юридического лица" кнопка "Изменить связь" в блоке "Информация о лице, осуществляющем руководство бухгалтерским учетом" оранжевого цвета (в стиле ЕФР)
    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента юридического лица" в блоке "Место регистрации" выбираем "Страна" из выпадающего списка
    value = 'Австралия'
    # :assert: Поле "Нестандартный адрес" отсутствует
    # :step: В поле "Страна" блока "Место регистрации" выбираем значение
    value =  'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :assert: значения в списке = справочник СКЗ countries "Страны и государства"
    # :step: Вводим "Город или населенный пункт"
    value =  'город Минск'
    # :assert: Выводится сообщение "Нужно выбрать наименование из предлагаемых значений"
    # :step: Выбираем "Город или населенный пункт" из списка
    value =  'МИНСК Г'
    # :assert: список для выбора = справочник СКЗ post_codes "Почтовые коды"
    # :step: Вводим "Улица"
    value =  'улица Советская'
    # :assert: Выводится сообщение "Нужно выбрать наименование из предлагаемых значений"
    # :step: Выбираем "Улицу" из списка = справочник СКЗ post_codes "Почтовые коды"
    value =  'СОВЕТСКАЯ УЛ'
    # :step: Вводим "Дом"
    value =  '99'
    # :assert: Выводится сообщение "Нужно выбрать наименование из предлагаемых значений"
    # :step: Выбираем "Дом"  из списка = справочник СКЗ post_codes "Почтовые коды
    value =  '14'
    # :step: Указываем "Квартира/офис"(Блок Адрес регистрации)
    value =  '22'
    # :step: Отмечаем чекбокс "Нестандартный адрес"
    # :assert: Форма дополняется полями "Область", "Район", "Сельсовет", "Тип населенного пункта", "Тип улицы", "Корпус", "Индекс" и "Примечание"
    # :step: В поле "Область" вводим значение из 121 символов
    value = '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
    # :assert: Поле "Область" заполнилось значением из 120 символов
    # :step: Заполняем "Область" невалидным значением c символом "$"
    value =  'область$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой" с переводом в верхний регистр
    # :step: Заполняем поле "Область"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: В поле "Район" вводим значение из 151 символов
    value = '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
    # :assert: Поле "Район" заполнилось значением из 150 символов
    # :step: Заполняем "Район" невалидным значением c символом "$"
    value =  'область$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой" с переводом в верхний регистр
    # :step: Заполняем поле "Район"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: В поле "Сельсовет" вводим значение из 129 символов
    value = '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
    # :assert: Поле "Сельсовет" заполнилось значением из 128 символов
    # :step: Заполняем "Сельсовет" невалидным значением c символом "$"
    value =  'область$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой" с переводом в верхний регистр
    # :step: Заполняем поле "Сельсовет"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: Выбираем "Тип населенного пункта"
    value =  'ГОРОД'
    # :assert: значения в списке = справочник СКЗ type_town "Типы населенных пунктов"
    # :step: В поле "Населенный пункт" вводим значение из 251 символа
    value = '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
    # :assert: Поле "Населенный пункт" заполнилось значением из 250 символов
    # :step: Заполняем "Населенный пункт" невалидным значением c символом "$"
    value =  'область$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой" с переводом в верхний регистр
    # :step: Заполняем поле "Населенный пункт"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: Выбираем "Тип улицы"
    value =  'УЛИЦА'
    # :assert: значения в списке = справочник СКЗ type_street "Типы улиц"
    # :step: Заполняем поле "Улица" невалидным значением > 100 символов (101)
    value =  'Возможность нахождения поисковых ключей в тексте и определения их количества полезна как для написани'
    # :assert: значение обрезается до 100 символов с переводом в верхний регистр
    # :step: Заполняем "Улица" невалидным значением c символом "$"
    value =  'область$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой" с переводом в верхний регистр
    # :step: Заполняем поле "Улица"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: Заполняем поле "Дом" невалидным значением > 50 символов(51)
    value =  'этономердома11внемживутлюдииздругогогородавоттаквот'
    # :assert: значение обрезается до 10 символов с переводом в верхний регистр
    # :step: Заполняем "Дом" невалидным значением c символом "%"
    value =  'NQДОМ12%'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой"
    # :step: Заполняем поле "Дом"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: Заполняем поле "Корпус" невалидным значением > 50 символов(51)
    value =  'этономеркорпуса11внемживутлюдииздругогогородавоттак'
    # :assert: значение обрезается до 50 символов с переводом в верхний регистр
    # :step: Заполняем "Корпус" невалидным значением c символом "$"
    value =  'NQДОМ12$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой"
    # :step: Заполняем поле "Корпус"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: Заполняем поле "Квартира/офис" невалидным значением > 50 символов(51)
    value =  'этономерквартиры11внемживутлюдииздругогогородавотда'
    # :assert: значение обрезается до 10 символов с переводом в верхний регистр
    # :step: Заполняем "Квартира/офис" невалидным значением c символом "$"
    value =  'NQДОМ12$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой"
    # :step: Заполняем поле "Квартира/офис"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: Заполняем "Индекс" невалидным значением > 20 символов (21)
    value =  'ПQ1 \-/?:()+.,&@№%*"_'
    # :assert:значение обрезается до 20 символов
    # :step: Заполняем "Индекс"
    value =  'ПQ1\-/?:()+.,&@№%*"_'
    # :step: Заполняем текстовое поле "Примечание" невалидным значением > 500 символов (501)
    value =  'Возможность нахождения поисковых ключей в тексте и определения их количества полезна как для написания нового текста, так и для оптимизации уже существующего. Расположение ключевых слов по группам и по частоте сделает навигацию по ключам удобной и быстрой. Сервис также найдет и морфологические варианты ключей, которые выделятся в тексте при нажатии на нужное ключевое слово. Данный параметр отображает процент наличия в тексте стоп-слов, фразеологизмов, а также словесных оборотов, фраз, соединитель'
    # :assert: значение обрезается до 500 символов с переводом в верхний регистр
    # :step: Заполняем "Примечание" значением c невалидными символом "$"
    value =  'ПРИМЕЧАНИЕ$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой"
    # :step: Заполняем "Примечание"
    value =  'ПримечаниеФQ123 \-/?:()+.,&@№%*"_'
    # :assert: значение переводится в верхний регистр
    # :step: Устанавливаем отметку чекбокса "Аналогично месту регистрации" в блоке "Почтовый адрес"
    # :assert: в блоке "Почтовый адрес" не отображаются поля для ввода
    # :step: Снимаем отметку с чекбокса Аналогично месту регистрации
    # :assert: Ображается блок "Почтовый адрес" с полем для ввода "Страна"
    # :step: На форме "Реквизиты клиента юридического лица" в блоке "Почтовый адрес" выбираем "Страна" из списка
    value =  'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :assert: Чекбокс "Нестандартный адрес" по умолчанию не установлен
    # :assert: значения в списке = справочник СКЗ countries "Страны и государства"
    # :step: Вводим "Город или населенный пункт"
    value =  'город Минск'
    # :assert: Выводится сообщение "Нужно выбрать наименование из предлагаемых значений"
    # :step: Выбираем "Город или населенный пункт" из списка
    value =  'МИНСК Г'
    # :assert: список для выбора = справочник СКЗ post_codes "Почтовые коды"
    # :step: Вводим "Улица"
    value =  'улица Советская'
    # :assert: Выводится сообщение "Нужно выбрать наименование из предлагаемых значений"
    # :step: Выбираем "Улицу" из списка = справочник СКЗ post_codes "Почтовые коды"
    value =  'СОВЕТСКАЯ УЛ'
    # :step: Вводим "Дом"
    value =  '99'
    # :assert: Выводится сообщение "Нужно выбрать наименование из предлагаемых значений"
    # :step: Выбираем "Дом"  из списка = справочник СКЗ post_codes "Почтовые коды
    value =  '14'
    # :step: Указываем "Квартира/офис"(Блок Адрес регистрации)
    value =  '22'
    # :step: Отмечаем чекбокс "Нестандартный адрес"
    # :assert: форма дополняется полями "Область", "Район", "Сельсовет", "Тип населенного пункта", "Тип улицы", "Корпус", "Индекс" и "Примечание"
    # :step: На форме "Реквизиты клиента юридического лица" в блоке "Почтовый адрес" заполняем "Область" невалидным значением > 120 символов (121)
    value =  '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
    # :assert: значение обрезается до 120 символов
    # :step: Заполняем "Область" невалидным значением c символом "$"
    value =  'область$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой" с переводом в верхний регистр
    # :step: Заполняем поле "Область"
    value =  'NAMEПРОВЕРКА-1,2.'
    # :step: В поле "Район" вводим значение из 151 символов
    value = '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
    # :assert: Поле "Район" заполнилось значением из 150 символов
    # :step: Заполняем "Район" невалидным значением c символом "$"
    value =  'область$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой" с переводом в верхний регистр
    # :step: Заполняем поле "Район"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: В поле "Сельсовет" вводим значение из 129 символов
    value = '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
    # :assert: Поле "Сельсовет" заполнилось значением из 128 символов
    # :step: Заполняем "Сельсовет" невалидным значением c символом "/"
    value =  'область/'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой" с переводом в верхний регистр
    # :step: Заполняем поле "Сельсовет"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: Выбираем "Тип населенного пункта"
    value =  'ГОРОД'
    # :assert: значения в списке = справочник СКЗ type_town "Типы населенных пунктов"
    # :step: В поле "Населенный пункт" вводим значение из 251 символа
    value = '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
    # :assert: Поле "Населенный пункт" заполнилось значением из 250 символов
    # :step: Заполняем "Населенный пункт" невалидным значением c символом "$"
    value =  'область$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой" с переводом в верхний регистр
    # :step: Заполняем поле "Населенный пункт"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: Выбираем "Тип улицы"
    value =  'УЛИЦА'
    # :assert: значения в списке = справочник СКЗ type_street "Типы улиц"
    # :step: Заполняем поле "Улица" невалидным значением > 100 символов (101)
    value =  'Возможность нахождения поисковых ключей в тексте и определения их количества полезна как для написани'
    # :assert: значение обрезается до 100 символов с переводом в верхний регистр
    # :step: Заполняем "Улица" невалидным значением c символом "$"
    value =  'область$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой" с переводом в верхний регистр
    # :step: Заполняем поле "Улица"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: Заполняем поле "Дом" невалидным значением > 50 символов(51)
    value =  'этономердома11внемживутлюдииздругогогородавоттаквот'
    # :assert: значение обрезается до 10 символов с переводом в верхний регистр
    # :step: Заполняем "Дом" невалидным значением c символом "$"
    value =  'NQДОМ12$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой"
    # :step: Заполняем поле "Дом"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: Заполняем поле "Корпус" невалидным значением > 50 символов(51)
    value =  'этономеркорпуса11внемживутлюдииздругогогородавоттак'
    # :assert: значение обрезается до 10 символов с переводом в верхний регистр
    # :step: Заполняем "Корпус" невалидным значением c символом "$"
    value =  'NQДОМ12$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой"
    # :step: Заполняем поле "Корпус"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: Заполняем поле "Квартира/офис" невалидным значением > 50 символов(51)
    value =  'этономерквартиры11внемживутлюдииздругогогородавотда'
    # :assert: значение обрезается до 10 символов с переводом в верхний регистр
    # :step: Заполняем "Квартира/офис" невалидным значением c символом "$"
    value =  'NQДОМ12$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой"
    # :step: Заполняем поле "Квартира/офис"
    value =  'ФQ123 \-/?:()+.,&@№%*"_'
    # :step: Заполняем "Индекс" невалидным значением > 20 символов (21)
    value =  'ПQ1 \-/?:()+.,&@№%*"_'
    # :assert:значение обрезается до 20 символов
    # :step: Заполняем "Квартира/офис" невалидным значением c символом "$"
    value =  'NQДОМ12$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой"
    # :step: Заполняем "Индекс"
    value =  'ПQ1\-/?:()+.,&@№%*"_'
    # :step: Заполняем текстовое поле "Примечание" невалидным значением > 500 символов (501)
    value =  'Возможность нахождения поисковых ключей в тексте и определения их количества полезна как для написания нового текста, так и для оптимизации уже существующего. Расположение ключевых слов по группам и по частоте сделает навигацию по ключам удобной и быстрой. Сервис также найдет и морфологические варианты ключей, которые выделятся в тексте при нажатии на нужное ключевое слово. Данный параметр отображает процент наличия в тексте стоп-слов, фразеологизмов, а также словесных оборотов, фраз, соединитель'
    # :assert: значение обрезается до 500 символов с переводом в верхний регистр
    # :step: Заполняем "Примечание" значением c невалидными символом "$"
    value =  'ПРИМЕЧАНИЕ$'
    # :assert: Выводится сообщение об ошибке ввода "Значение введено с ошибкой"
    # :step: Заполняем "Примечание"
    value =  'ПримечаниеФQ123 \-/?:()+.,&@№%*"_'
    # :assert: значение переводится в верхний регистр
    # :step: Отмечаем чекбокс "Аналогично месту регистрации"
    # :step: На форме "Реквизиты клиента юридического лица" в блоке "Сведения о гос.регистрации (первичная)" заполняем поле "Наименование регистрирующего органа"
    value =  'регистрирующий орган'
    # :step: Выбираем "Наименование документа о регистрации" из списка
    value =  'Устав'
    # :assert: значения в списке =  значения поля "GSS_NAME" из справочника ЕРК "GC_SPR_SIMPLE_TYPE_RDOCS"
    # :step: Пытаемся заполнить "Дату регистрации" выбором в календаре или ручным вводом датой больше текущей
    value =  '10.02.2021'
    # :assert: Дата не устанавливается
    # :step: Заполняем поле "Дата регистрации" датой равной текущей
    value =  '09.02.2021'
    # :step: Заполняем поле "Дата регистрации" датой меньше текущей
    value =  '01.02.2021'
    # :step: Заполняем поле "Регистрационный номер"
    value =  '1111/12'
    # :step: Очищаем поле "Наименование регистрирующего органа"
    # :assert: Выводится сообщение "Значение обязательно для заполнения"
    # :step: Заполняем поле "Наименование регистрирующего органа"
    value =  'регистрирующий орган'
    # :step: На форме "Реквизиты клиента юридического лица" в блоке "Сведения о гос.регистрации(последняя)" заполняем поле "Наименование регистрирующего органа"
    value =  'регистрирующий орган 2'
    # :assert: отображается сообщение пользователю "Необходимо заполнить все поля или оставить пустыми"
    # :step: Выбираем "Наименование документа о регистрации" из списка
    value =  'Дополнение к уставу'
    # :assert: значения в списке =  значения поля "GSS_NAME" из справочника ЕРК "GC_SPR_SIMPLE_TYPE_RDOCS"
    # :step: Пытаемся заполнить "Дату регистрации" выбором в календаре или ручным вводом датой больше текущей
    value =  '10.02.2021'
    # :assert: Дата не устанавливается
    # :step: Заполняем поле "Дата регистрации" датой равной текущей
    value =  '09.02.2021'
    # :step: Заполняем поле "Дата регистрации" датой меньше текущей
    value =  '01.02.2021'
    # :step: Заполняем поле "Регистрационный номер"
    value =  '1111/12-01'
    # :assert: удаляется сообщение "Необходимо заполнить все поля или оставить пустыми"
    # :assert: На форме "Реквизиты клиента юридического лица" в блоке "Контакты" в блоке "Контакты" присутствует поле "Служебная информация"
    # :step: На форме "Реквизиты клиента юридического лица" в блоке "Контакты" заполняем поле "Мобильный телефон контактного лица" невалидным значением > 50 символов (51)
    value =  '299123456789132545678912346587913235468745621345123'
    # :assert: значение обрезается до 50 символов
    # :step: Заполняем поле "Мобильный телефон контактного лица" невалидным значением, начинающимся с "375" и > 12 символов (13)
    value =  '3752929295555'
    # :assert: Выводится сообщение об ошибке ввода "Неверный формат"
    # :step: Заполняем поле "Мобильный телефон контактного лица" валидным значением начинающимся с "375"
    value =  '375292929555'
    # :step: Очищаем поле "Мобильный телефон контактного лица"
    # :assert: Выводится сообщение об ошибке "Значение обязательно для заполнения"
    # :step: Заполняем поле "ФИО контактного лица"  невалидным значением > 200 символов (201)
    value =  'Возможность нахождения поисковых ключей в тексте и определения их количества полезна как для написания нового текста, так и для оптимизации уже существующего. Расположение ключевых слов по группам и по'
    # :assert: значение обрезается до 200 символов
    # :step: Заполняем поле "Городской телефон клиента" невалидным значением > 50 символов (51)
    value =  '299123456789132545678912346587913235468745621345123'
    # :assert: значение обрезается до 50 символов
    # :step: Заполняем поле "Городской телефон клиента" невалидным значением начинающимся с "375" и > 12 символов
    value =  '3752929295555'
    # :assert: Выводится сообщение об ошибке ввода "Неверный формат"
    # :step: Очищаем поле "Городской телефон клиента"
    # :assert: Выводится сообщение об ошибке "Значение обязательно для заполнения"
    # :step: Заполняем поле "Городской телефон клиента" валидным значением начинающимся с "375"
    value =  '375292929555'
    # :step: Снять отметку в  чек-боксе "Нет" для поля "E-mail"
    # :assert: В блоке "Контакты" в полях "E-mail", "Иной E-mail", "Адрес сайта в интернете" не установлены чек-боксы "Нет". Поля активны.
    # :step: Заполняем поле "E-mail" невалидным значением
    value = 'Тест'
    # :assert: Выводится ошибка ввода "Неверный формат"
    # :step: Заполняем поле "E-mail" невалидным значением
    value = 't_e-s.t/te'
    # :assert: Выводится ошибка ввода "Неверный формат"
    # :step: Заполняем поле "E-mail" невалидным значением
    value = 't_e-s.t/te@s.@t.t'
    # :assert: Выводится ошибка ввода "Неверный формат"
    # :step: Заполняем поле "E-mail" невалидным значением
    value = 't_e-s.t/te@s.@t.tes1'
    # :assert: Выводится ошибка ввода "Неверный формат"
    # :step: Заполняем поле "E-mail" невалидным значением
    value = 't_e-s.t/te@s.@t.testt'
    # :assert: Выводится ошибка ввода "Неверный формат"
    # :step: Заполняем поле "E-mail" невалидным значением > 200 символов (201)
    value = 'Возможностьнахожденияпоисковыхключейвтекстеиопределенияихколичестваполезнакакдлянаписанияновоготекстатакидляоптимизацииужесуществующегорасположениеключевыхсловпогруппамипочастотесделаетнавигациюпокл.рф'
    # :assert: Значение обрезается до 200 символов, выводится сообщение "Неверный формат"
    # :step: Заполняем поле "E-mail" валидным значением
    value = 't_e-s.t/te@s.t.test'
    # :step: Снять отметку в  чек-боксе "Нет" для поля "Иной E-mail"
    # :step: Заполняем поле "Иной E-mail" невалидным значением
    value = 'Тест'
    # :assert: Выводится ошибка ввода "Неверный формат"
    # :step: Заполняем поле "Иной E-mail" невалидным значением
    value = 't_e-s.t/te'
    # :assert: Выводится ошибка ввода "Неверный формат"
    # :step: Заполняем поле "Иной E-mail" невалидным значением
    value = 't_e-s.t/te@s.@t.t'
    # :assert: Выводится ошибка ввода "Неверный формат"
    # :step: Заполняем поле "Иной E-mail" невалидным значением
    value = 't_e-s.t/te@s.@t.tes1'
    # :assert: Выводится ошибка ввода "Неверный формат"
    # :step: Заполняем поле "Иной E-mail" невалидным значением
    value = 't_e-s.t/te@s.@t.testt'
    # :assert: Выводится ошибка ввода "Неверный формат"
    # :step: Заполняем поле "Иной E-mail" невалидным значением > 200 символов (201)
    value = 'Возможностьнахожденияпоисковыхключейвтекстеиопределенияихколичестваполезнакакдлянаписаниянового@текстатакидляоптимизацииужесуществующегорасположениеключевыхсловпогруппамипочастотесделаетнавигациюпокл.рф'
    # :assert: Значение поля "Иной E-mail" обрезается до 200 символов, выводится сообщение "Неверный формат"
    # :step: Заполняем поле "Иной E-mail" валидным значением
    value = 't_e-s.t/te@s.t.test'
    # :step: Снять отметку в чек-боксе "Нет" для поля "Адрес сайта в интернете"
    # :step: Заполняем поле "Адрес сайта в интернете" невалидным значением, без 'www'
    value =  'sait.com'
    # :assert: Выводится ошибка ввода "Неверный формат"
    # :step: Заполняем поле "Адрес сайта в интернете" невалидным значением > 200 символов (201)
    value = 'www.взможностьнахожденияпоисковыхключейвтекстеиопределенияихколичестваполезнакакдлянаписаниянового@текстатакидляоптимизацииужесуществующегорасположениеключевыхсловпогруппамипочастотесделаетнавигациюпокл.рф'
    # :assert: Значение обрезается до 200 символов, отображается сообщение "Неверный формат"
    # :step: заполняем поле "Адрес сайта в интернете"
    value =  'www.sait.бел'
    # :step: На форме "Реквизиты клиента юридического лица" заполняем поле "Дата идентификации ПОД/ФТ"
    # :assert: Поле "Дата идентификации ПОД/ФТ" обязательно для заполнения
    value =  '09.02.2021'
    # :assert: Дата выбирается только из календаря и может быть только текущей
    # :step: выбираем "Ответственное подразделение" из списка
    value =  'Управление сопровождения розничных операций'
    # :assert: значения списка = Подразделения обслуживания из справочника ерк GC_SPR_SIMPLE_TYPE (BankDepartment)
    # :assert: Кнопка "Далее" разблокирована
    # :step: На форме "Реквизиты клиента юридического лица" очищаем "Название"
    # :assert: Кнопка "Далее" блокируется
    # :step: Вводим значением "Название"
    value = 'Вот это фирмочка'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На форме "Подтверждение статуса проверки клиента" отображается ссылка для скачивания "Анкета вопросник для клиента - организации"
    # :step: Скачиваем документ "Анкета вопросник для клиента - организации"
    # :assert: Сформировался файл с печатной формой "ВОПРОСНИК ДЛЯ КЛИЕНТА–ОРГАНИЗАЦИИ"
    # :step: На форме Подтверждение статуса проверки клиента нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: заявка завершается с созданием клиента ЮЛ в СКЗ, ЕРК

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_4(app, credo_db):
    """
    {#
        :id:                53753_4
        :priority:          Средний
        :module:            ЕФР
        :description:       Проверка сохранения учетного номера плательщика
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Пользователь имеет роль msb_front_office
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :source_point:      53753, 56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :comment:           Параметр "Учетный номер плательщика" находиться в СКЗ. В списке юридических лиц переходим на "Параметры юридического лица" сохраненного клиента
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 17.04.2020
        :client_env:        Google Chrome 87 [Windows 10; openSuSE Linux Leap 42.2]
        :client_env:        Mozilla Firefox 83 [Windows 10; openSuSE Linux Leap 42.2]
        :client_env:        Microsoft EDGE 87 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем значение из поля "Наименование страны регистрации клиента"
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: На форме "Поиск карточки клиента в учетной системе Банка" заполняем поле "Название"
    value = 'ОАО ПОПЫТКА100503'
    # :step: Нажимаем кнопку "Поиск"
    # :step: Нажимаем кнопку "Заведение карточки клиента"

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента юридического лица" выбираем значение из поля "Наименование страны регистрации клиента" = "РЕСПУБЛИКА БЕЛАРУСЬ"
    # :step: На форме "Реквизиты клиента юридического лица" заполняем числовым, целым (без пробелов) валидным значением "УНП/Идент. номер нерез." = 9 символов
    value = '123456789'
    # :step: На форме "Реквизиты клиента юридического лица" выбираем значение поля "Организационно-правовая форма клиента"
    value = 'ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ'
    # :assert: Поле заполнилось значением "ИНД.ПРЕД"
    # :step: На форме "Реквизиты клиента юридического лица" заполняем текстовым значением "Название"
    value = 'ОАО ПОПЫТКА100503'
    # :assert: На форме "Реквизиты клиента юридического лица" поле "Полное наименование" заполнилось значением "ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ ОАО ПОПЫТКА100503"
    # :step: На форме "Реквизиты клиента юридического лица" выбираем значение из списка "Тип субъекта"
    value = 'ИНДИВИДУАЛЬНЫЕ ПРЕДПРИНИМАТЕЛИ'
    # :step: На форме "Реквизиты клиента юридического лица" выбираем значение из выпадающего списка "Оргструктура"
    value = '10 - Юридические лица'
    # :step: На форме "Реквизиты клиента юридического лица" выбираем значение из выпадающего списка "Тип сектора экономики (форма собственности)"
    value = 'Государственная собственность (110+120)'
    # :step: На форме "Реквизиты клиента юридического лица" выбираем значение из выпадающего списка "Основной вид деятельности (код ОКЭД)"
    value = '01111 Выращивание зерновых и бобовых культур'
    # :step: На форме "Реквизиты клиента юридического лица" выбираем значение из выпадающего списка "Клиентский блок"
    value = 'Малый бизнес'
    # :step: На форме "Реквизиты клиента юридического лица" выбираем значение из выпадающего списка "Объем выручки"
    value = 'До 3 млн.USD'
    # :step: На форме "Реквизиты клиента юридического лица" на блоке "Связанные субъекты" в блоке "Информацию о связанном физическом лице" нажимаем "Информация о связанном физическом лице отсутствует"

    # :newpage: #######################################################################################################

    # :step: заполняем поле "Личный номер"
    value = '6131183M846PB7'
    # :step: Нажимаем на кнопку "Поиск Карточки клиента"
    # :step: Нажимаем на карточку клиента

    # :newpage: #######################################################################################################

    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента юридического лица" на блоке "Адрес регистрации" заполняем поле "Страна"
    value =  'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Указываем Город или населенный пункт из справочника «Почтовые коды»(Блок Адрес регистрации)
    value =  'МИНСК Г'
    # :step: Указываем Улица  из справочника «Почтовые коды»(Блок Адрес регистрации)
    value =  'СОВЕТСКАЯ УЛ'
    # :step: Указываем Дом  из справочника «Почтовые коды»(Блок Адрес регистрации)
    value =  '14'
    # :step: Указываем Квартира/офис(Блок Адрес регистрации)
    value =  '22'
    # :step: На форме "Реквизиты клиента юридического лица" на блоке Почтовый адрес" Устанавливаем отметку чекбокса "Аналогично месту регистрации"
    # :step: На форме "Реквизиты клиента юридического лица" в блоке "Сведения о гос.регистрации (первичная)" заполняем поле "Наименование регистрирующего органа"
    value =  'РЕГОРГ'
    # :step: На форме "Реквизиты клиента юридического лица" выбираем значение из поля "Наименование документа о регистрации"
    value =  'Дополнение к уставу'
    # :step: На форме "Реквизиты клиента юридического лица" заполняем поле "Дата регистрации"
    value =  '16.10.2020'
    # :step: На форме "Реквизиты клиента юридического лица" заполняем поле "Регистрационный номер"
    value =  '123'
    # :step: На форме "Реквизиты клиента юридического лица" в блоке "Контакты" заполняем поле "Мобильный телефон контактного лица"
    value =  '+375295222222'
    # :step: На форме "Реквизиты клиента юридического лица" заполняем поле "Дата идентификации ПОД/ФТ" текущей датой
    value =  '04.08.2021'
    # :step: На форме "Реквизиты клиента юридического лица" выбираем значение из поля "Ответственное подразделение"
    value =  'Управление сопровождения розничных операций'
    # :step: На форме "Реквизиты клиента юридического лица" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На форме "Подтверждение статуса проверки клиента" отображается ссылка для скачивания "Анкета вопросник для клиента - ИП"
    # :step: Скачиваем документ "Анкета вопросник для клиента - ИП"
    # :assert: Сформировался файл с печатной формой "ВОПРОСНИК ДЛЯ КЛИЕНТА–ИП"
    # :assert: В анкете сохранён "Учетный номер плательщика"
    # :assert: В анкете в поле УНП внесён "Учетный номер плательщика"
    # :assert: Параметр "Учетный номер плательщика" из заявки сохранился в СКЗ

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_6(app, credo_db):
    """
    {#
        :id:                53753_6
        :priority:          Средний
        :module:            ЕФР
        :description:       Проверка заведения карточки клиента ФЛ в СКЗ и ЕРК в ходе изменения связанного субъекта  - руководителя юридического лица
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Пользователь имеет роль msb_front_office
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      Тестовый клиент (Юридическое лицо) существует в ЕРК
        :source_point:      53753, 56006, 56307, 56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :comment:           Запрос поиска юридического лица в ЕРК аналогичен поиску физического лица
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 17.04.2020
        :client_env:        Google Chrome 87 [Windows 10; openSuSE Linux Leap 42.2]
        :client_env:        Mozilla Firefox 83 [Windows 10; openSuSE Linux Leap 42.2]
        :client_env:        Microsoft EDGE 87 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем значение из поля "Наименование страны регистрации клиента"
    value = 'БЕЛАРУСЬ'
    # :step: На форме "Поиск карточки клиента в учетной системе Банка" заполняем поле "УНП/Идент. номер нерез."
    value = '321121123'
    # :step: Нажимаем кнопку "Поиск"
    # :step: Выбираем карточку клиента

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента юридического лица" на блоке "Связанные субъекты" в блоке "Информация о руководителе" нажимаем "Изменить связь"

    # :newpage: #######################################################################################################

    # :step: Производим поиска карточки клиента по Личному номеру
    value = '4240267E020PB7'
    # :assert: Отображается сообщение "Карточка данного клиента отсутствует в учетной системе банка."
    # :step: Нажимаем "Заведение карточки клиента"

    # :newpage: #######################################################################################################

    # :assert: Отображается форма "Заведение/актуализация карточки руководителя"
    # :step: указываем Гражданство
    value = 'АВСТРАЛИЯ'
    # :step: Нажимаем кнопку "Далее"
    # :assert: Появилось сообщение об ошибке с текстом "На форме имеются ошибки", кнопка "Далее" не активна
    # :assert: Поля "Имя латинскими буквами" и "Фамилия латинскими буквами" обязательны для заполнения
    # :step: В поле "Гражданство" выбираем значение
    value = 'РОССИЙСКАЯ ФЕДЕРАЦИЯ'
    # :assert: Поля "Имя латинскими буквами" и "Фамилия латинскими буквами" необязательны для заполнения
    # :step: указываем Гражданство
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :assert: Поля "Имя латинскими буквами" и "Фамилия латинскими буквами" необязательны для заполнения
    # :assert: значение поля Резидентство = РЕСПУБЛИКА БЕЛАРУСЬ
    # :assert: значение поля Тип документа = Паспорт
    # :assert: значение поля Страна выдачи документа = РЕСПУБЛИКА БЕЛАРУСЬ
    # :step: указываем Фамилия (валидные символы А-ЯЁІЎ-‘')
    value = 'СІУП ЕРУ-МЕН'
    # :step: указываем Имя (валидные символы А-ЯЁІЎ-‘')
    value = 'В У-МЎІЕН'
    # :step: указываем Отчество (при наличии) (валидные символы А-ЯЁІЎ-‘')
    value = 'ЛЕІЎТ-АЮЎ ЩИЙ'
    # :step: указываем Пол
    value = 'Мужской'
    # :step: указываем Имя латинскими буквами
    value = 'WOMAN'
    # :step: указываем Фамилия латинскими буквами
    value = 'SUPER-PUPER'
    # :step: указываем Дата рождения
    value = '20.04.1987'
    # :step: указываем Личный номер
    value = '4240267E020PB7'
    # :step: указываем Серия и номер документа
    value = 'AB1233677'
    # :step: указываем Кем выдан документ
    value = 'СЫН МАМИНОЙ ПОДРУГИ'
    # :step: указываем Дата выдачи
    value = '20.01.2000'
    # :step: указываем Срок действия документа
    value = '20.10.2029'
    # :step: указываем Страна рождения(Блок Место рождения)
    value = 'BLR РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: указываем Область(Блок Место рождения)
    value = 'ОБЛАСТЬ'
    # :step: указываем Район(Блок Место рождения)
    value = 'РАЙОН'
    # :step: указываем Тип населенного пункта(Блок Место рождения)
    value = 'Город'
    # :step: указываем Населенный пункт(Блок Место рождения)
    value = 'БРЕСТ'
    # :step: указываем Страна(Блок Место регистрации)
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: указываем Индекс(Блок Место регистрации)
    value = '224000'
    # :step: указываем Тип населённого пункта(Блок Место регистрации)
    value = 'Город'
    # :step: указываем Город или населенный пункт(Блок Место регистрации)
    value = 'МИНСК Г'
    # :step: указываем Тип улицы(Блок Место регистрации)
    value = 'Улица'
    # :step: указываем Улица(Блок Место регистрации)
    value = 'ЛЕНИНА ул'
    # :step: указываем Дом(Блок Место регистрации)
    value = '10'
    # :step: указываем Квартира(Блок Место регистрации)
    value = '18'
    # :assert: Чекбокс "Аналогично месту регистрации" по умолчанию не установлен
    # :assert: отображается блок Место проживания
    # :step: указываем Страна(Блок Место проживания)
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: указываем Тип населенного пункта(Блок Место проживания)
    value = 'Город'
    # :step: указываем населенный пункт(Блок Место проживания)
    value = 'БРЕСТ г, БРЕСТСКАЯ обл'
    # :step: указываем Тип улицы(Блок Место проживания)
    value = 'Улица'
    # :step: указываем Улица(Блок Место проживания)
    value = 'ЛЕНИНА ул'
    # :step: указываем Дом(Блок Место проживания)
    value = '11'
    # :step: указываем Квартира(Блок Место проживания)
    value = '33'
    # :step: указываем Мобильный телефон
    value = '+375251231234'
    # :step: указываем Домашний  телефон
    value = '+375162434315'
    # :step: указываем Иной телефон
    value = '+375251231236'
    # :step: указываем Иной телефон
    value = '+375251231237'
    # :step: указываем Номер факса
    value = '+375162434318'
    # :step: указываем E-mail
    value = 'CREDOSPAM@ITWORKS.BY'
    # :step: указываем Место работы
    value = 'ОАО РОГАиКОПЫТА'
    # :step: указываем Занимаемая должность
    value = 'Бухгалтер'
    # :step: указываем Адрес места работы
    value = 'советская 13-15'
    # :step: Нажимаем "Добавить место работы"
    # :assert: отобразился блок #1, с указанными данными о работе
    # :assert: напротив блока с работой #1 отображается кнопка "Удалить"
    # :step: Нажимаем "Далее"

    # :newpage: #######################################################################################################

    # :assert: На форме "Реквизиты клиента юридического лица" в блоке "Информация о руководителе" появилась карточка связанного физического лица
    # :assert: На форме "Реквизиты клиента юридического лица" все внесенная информация сохранилась и отобразилась на карточке связанного физического лица
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "Подтверждение статуса проверки клиента" нажимаем "Анкета вопросник для клиента – организации"
    # :assert: В анкете в пункте 8 выбран первый чекбокс, в таблице внесены данные которые указывали на форме "Заведение/актуализация карточки руководителя"
    # :assert: В анкете в пункте 29.2 в графе "(инициалы, фамилия)" проставлена фамилия и инициалы руководителя
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: В СКЗ создался новый клиент с данным, которые указывали на форме "Заведение/актуализация карточки руководителя""
    # :assert: В ЕРК создался новый клиент с данным, которые указывали на форме "Заведение/актуализация карточки руководителя""
    # :step: Отправляем запрос через Postman на поиск ЮЛ в ЕРК
    # :assert: в ЕРК у юридического лицп в тэге <Link> существует клиент с параметром sprValue="Руководитель" с данным, которые указывали на форме "Заведение/актуализация карточки руководителя"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_7(app, credo_db):
    """
    {#
        :id:                53753_7
        :priority:          Средний
        :module:            ЕФР
        :description:       Действие по кнопке "Назад" в зависимости от формы для клиента ИП
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      В ЕРК присутствует тестовый клиент ИП
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Пользователь имеет роль msb_front_office
        :source_point:      56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 99 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 98 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 99 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем "Наименование страны регистрации клиента"
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Заполняем поле "Название"
    value = 'ИПЕШНИКС'
    # :step: Нажимаем кнопку "Поиск"
    # :assert: Задача в статусе "Поиск карточки клиента"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Ввод параметров клиента"
    # :step: В блоке "Информация о связанном с ИП физическом лице" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Ввод параметров связанного субъекта"
    # :assert: Блоки «Согласия» и «Подключение к ДБО» не отображаются на форме "Заведение/актуализация карточки связанного с ИП физического лица"
    # :step: Нажимаем кнопку "Назад"

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Ввод параметров клиента"
    # :step: В блоке "Информация о связанном с ИП физическом лице" нажимаем кнопку "Изменить связь"

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Поиск карточки связанного субъекта"
    # :step: На форме "Поиск карточки связанного с ИП физического лица" вводим личный номер
    value = '7002915A987PB4'
    # :step: Нажимаем кнопку "Поиск карточки клиента"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Ввод параметров связанного субъекта"
    # :step: Нажимаем кнопку "Назад"

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Поиск карточки связанного субъекта"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_10(app, credo_db):
    """
    {#
        :id:                53753_10
        :priority:          Средний
        :module:            ЕФР
        :description:       ИП. В блоке «KYC статус:» по всем субъектам отобразить статус «Запрос в KYC не выполнялся».
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      В ЕРК присутствуют тестовый клиент ИП.
        :precondition:      На продукте\варианте параметр doKyc ("Проверять клиента в KYC") = "нет"
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Пользователь имеет роль msb_front_office
        :precondition:      У ЮЛ имеются данные связанного с ИП физического лица
        :source_point:      53753, 56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 99 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 98 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 99 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем "Наименование страны регистрации клиента"
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Заполняем поле "Название"
    value = 'ИПЕШНИКС'
    # :step: Нажимаем кнопку "Поиск"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента юридического лица" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На форме "Подтверждение статуса проверки клиента" KYC статус для клиента и связанного физического лица = Запрос в KYC не выполнялся

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_11(app, credo_db):
    """
    {#
        :id:                53753_11
        :priority:          Средний
        :module:            ЕФР
        :description:       ЮЛ. В блоке «KYC статус:»  по всем субъектам статус «Запрос в KYC не выполнялся».
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      В ЕРК присутствуют юридические лица
        :precondition:      На продукте\варианте параметр doKyc ("Проверять клиента в KYC") = "нет"
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Пользователь имеет роль msb_front_office
        :precondition:      У ЮЛ имеются данные руководителя и бенефициарных владельцев
        :source_point:      53753, 56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 99 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 98 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 99 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем "Наименование страны регистрации клиента"
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Заполняем поле "Название"
    value = 'МОЯ ОБОРОНА'
    # :step: Нажимаем кнопку "Поиск"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента юридического лица" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На форме "Подтверждение статуса проверки клиента" KYC статус для клиента, руководителя и бенефициарного владельца = Запрос в KYC не выполнялся

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_12(app, credo_db):
    """
    {#
        :id:                53753_12
        :priority:          Средний
        :module:            ЕФР
        :description:       Действие по кнопке "Назад" в зависимости от формы для клиента ЮЛ
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      В ЕРК присутствует тестовый клиент ЮЛ
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Пользователь имеет роль msb_front_office
        :source_point:      53753, 56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 99 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 98 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 99 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем "Наименование страны регистрации клиента"
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Заполняем поле "Название"
    value = 'МОЯ ОБОРОНА'
    # :step: Нажимаем кнопку "Поиск"
    # :assert: Задача в статусе "Поиск карточки клиента"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Ввод параметров клиента"
    # :step: В блоке "Информация о руководителе" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Ввод параметров связанного субъекта"
    # :assert: Блоки «Согласия» и «Подключение к ДБО» не отображаются на форме "Заведение/актуализация карточки руководителя"
    # :step: Нажимаем кнопку "Назад"

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Ввод параметров клиента"
    # :step: В блоке "Информация о руководителе" нажимаем кнопку "Изменить связь"

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Ввод параметров связанного субъекта"
    # :step: На форме "Поиск карточки руководителя" вводим личный номер
    value = '7002915A987PB4'
    # :step: Нажимаем кнопку "Поиск карточки клиента"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Ввод параметров связанного субъекта"
    # :step: Нажимаем кнопку "Назад"

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Поиск карточки связанного субъекта"
    # :step: Нажимаем кнопку "Назад"

    # :newpage: #######################################################################################################

    # :step: В блоке "Информация о лице, осуществляющем руководство бухгалтерским учетом" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Ввод параметров связанного субъекта"
    # :assert: Блоки «Согласия» и «Подключение к ДБО» не отображаются на форме "Заведение/актуализация карточки лица, осуществляющем руководство бухгалтерским учетом"
    # :step: Нажимаем кнопку "Назад"

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Ввод параметров клиента"
    # :step: В блоке "Информация о лице, осуществляющем руководство бухгалтерским учетом" нажимаем кнопку "Изменить связь"

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Поиск карточки связанного субъект"
    # :step: На форме "Поиск карточки лица, осуществляющем руководство бухгалтерским учетом" вводим личный номер
    value = '7002915A987PB4'
    # :step: Нажимаем кнопку "Поиск карточки клиента"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Ввод параметров связанного субъекта"
    # :step: Нажимаем кнопку "Назад"

    # :newpage: #######################################################################################################

    # :assert: Задача в статусе "Поиск карточки связанного субъекта"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_13(app, credo_db):
    """
    {#
        :id:                53753_13
        :priority:          Средний
        :module:            ЕФР
        :description:       ЮЛ. В блоке «KYC статус:»  - отображаются статусы по субьектам, полученные в задаче «Проверка клиента в KYC(Siron)». (56944) Проверка сохранения параметра заявки "Проверять клиента в KYC"
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      В ЕРК присутствует тестовое ЮЛ
        :precondition:      На продукте\варианте параметр doKyc ("Проверять клиента в KYC") = "да"
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Пользователь имеет роль msb_front_office
        :precondition:      У ЮЛ имеются данные руководителя и бенефициарных владельцев
        :source_point:      53753, 56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 99 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 98 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 99 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :assert: Заявка создана. В списке параметров заявки есть параметр "Проверять клиента в KYC" со значением "да"
    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем "Наименование страны регистрации клиента"
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Заполняем поле "Название"
    value = 'МОЯ ОБОРОНА'
    # :step: Нажимаем кнопку "Поиск"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента юридического лица" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: Выполнилась проверка KYC для клиента, руководителя и бенефициарных владельцев
    # :assert: На форме "Подтверждение статуса проверки клиента" в блоке "KYC статус:" отображаются статусы по субъектам, полученные в задаче «Проверка клиента в KYC(Siron)» (для клиента, руководителя и бенефициарного владельца = Совпадений нет после проверки)

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_21(app, credo_db):
    """
    {#
        :id:                53753_21
        :priority:          Средний
        :module:            ЕФР
        :description:       На проверке УФМ произошло совпадение. Рассылка рассылки уведомлений о совпадении в Siron KYC не осуществляется.
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      В ЕРК присутствует тестовый клиент ЮЛ
        :precondition:      На продукте\варианте параметр doKyc ("Проверять клиента в KYC") = "да"
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Пользователь имеет роль msb_front_office
        :precondition:      У ЮЛ имеются данные руководителя и бенефициарных владельцев
        :precondition:      Параметр kyc_emails на продукте/варианте не заполнен
        :source_point:      53753, 56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 99 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 98 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 99 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем "Наименование страны регистрации клиента"
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Заполняем поле "Название"
    value = 'МОЯ ОБОРОНА'
    # :step: Нажимаем кнопку "Поиск"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента юридического лица" нажимаем кнопку "Добавить бенифициарного владельца"
    # :step: Заполняем поле "Фамилия"
    value = 'Лукашенко'
    # :step: Заполняем поле "Имя"
    value = 'Александр'
    # :step: Нажимаем кнопку "Добавить"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На форме "Подтверждение статуса проверки клиента" KYC статус для бенефициарного владельца "Лукашенко Александр" = На проверке УФМ (произошло совпадение)
    # :assert: Рассылка уведомлений о совпадении в Siron KYC отсутствует, ошибки нет

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_22(app, credo_db):
    """
    {#
        :id:                53753_22
        :priority:          Средний
        :module:            ЕФР
        :description:       Проверка получения из Siron статуса "check" = На проверке УФМ (произошло совпадение)  и отправки email пользователям указанным в файле itwCredo-kyc.properties в параметре emails.
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      В ЕРК присутствует тестовый клиент ЮЛ
        :precondition:      На продукте\варианте параметр doKyc ("Проверять клиента в KYC") = "да"
        :precondition:      Пользователь авторизирован в СКЗ (Левданский Александр Вячеславович. Телефон: +375336435645)
        :precondition:      Пользователь имеет роль msb_front_office
        :precondition:      У ЮЛ имеются данные руководителя и бенефициарных владельцев
        :precondition:      В файле itwCredo-kyc.properties параметр emails=maslov@itworks.by
        :source_point:      53753, 56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 99 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 98 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 99 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :assert: создалась заявка №2451416
    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем "Наименование страны регистрации клиента"
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Заполняем поле "Название"
    value = 'МОЯ ОБОРОНА'
    # :step: Нажимаем кнопку "Поиск"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента юридического лица" нажимаем кнопку "Добавить бенифициарного владельца"
    # :step: Заполняем поле "Фамилия"
    value = 'Лукашенко'
    # :step: Заполняем поле "Имя"
    value = 'Александр'
    # :step: Нажимаем кнопку "Добавить"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На форме "Подтверждение статуса проверки клиента" KYC статус для бенефициарного владельца "Лукашенко Александр" = На проверке УФМ (произошло совпадение)
    # :assert: Пользователю maslov отправлено сообщение с темой «Совпадение в ЕФР со списками по заявке №2451416 и с текстом "Произошло совпадение в ЕФР со списками [Бенифициар] АЛЕКСАНДР ЛУКАШЕНКО с ID 2451469_5386c476. Работник банка: Левданский Александр Вячеславович. Телефон: +375336435645."
    # :assert: На форме отображаются кнопки "Отмена" и "Проверить статус"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_23(app, credo_db):
    """
    {#
        :id:                53753_23
        :priority:          Средний
        :module:            ЕФР
        :description:       Ошибка проверки клиента в KYC(Siron). Проверка отображения текста "Ошибка проверки клиента в KYC(Siron)", доступности задачи с ошибкой, отправки email пользователям указанным в файле itwCredo-kyc.properties в параметре emails.
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      В ЕРК присутствует тестовый клиент ЮЛ
        :precondition:      На продукте\варианте параметр doKyc ("Проверять клиента в KYC") = "да"
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Пользователь имеет роль msb_front_office
        :precondition:      У ЮЛ имеются данные руководителя и бенефициарных владельцев
        :precondition:      В файле itwCredo-kyc.properties параметр emails=maslov@itworks.by
        :precondition:      Пользователь levdanskij авторизирован
        :precondition:      Пользователь levdanskij инициатор заявки
        :precondition:      Пользователь levdanskij без роли admins
        :precondition:      Пользователь maslov с ролью admins
        :precondition:      Пользователь kosovec без роли admins
        :precondition:      Для получения ошибки сервиса KYC удаляем несколько строк в файле KYCGetScorePersons_in.xsl
        :source_point:      53753, 56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 99 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 98 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 99 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :assert: создается заявка с №2451469
    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем "Наименование страны регистрации клиента"
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Заполняем поле "Название"
    value = 'МОЯ ОБОРОНА'
    # :step: Нажимаем кнопку "Поиск"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента юридического лица" нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На форме выводится ошибка с текстом "Ошибка проверки клиента в KYC(Siron)"
    # :assert: Статус заявки "Ошибка проверки клиента в KYC(Siron)"
    # :assert: Задача доступна пользователям levdanskij и maslov
    # :assert: Задача не доступна пользователю kosovec
    # :assert: Пользователю maslov отправлено сообщение об ошибке с темой "Ошибка проверки клиента в KYC(Siron) по заявке 2451469" с текстом "Ошибка сервиса"
    # :assert: Пользователям levdanskij и kosovec сообщения не отправлены
    # :step: Нажимаем кнопку "Завершить"
    # :assert: Запрос повторяется с результатом Ошибка проверки клиента в KYC(Siron)
    # :step: Возвращаем удалённые строки в файле KYCGetScorePersons_in.xsl
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: Запрос повторяется, выполнилась проверка KYC для клиента, руководителя и бенефициарных владельцев
    # :assert: На форме "Подтверждение статуса проверки клиента" в блоке "KYC статус:" отображаются статусы по субъектам, полученные в задаче «Проверка клиента в KYC(Siron)» (для клиента, руководителя и бенефициарного владельца = Совпадений нет после проверки)

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_35(app, credo_db):
    """
    {#
        :id:                53753_35
        :priority:          Средний
        :module:            Ядро
        :description:       Проверика создания пунктов меню и параметров продукта/варианта
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = нет
        :source_point:      53753, 56944
        :comment:
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 17.04.2020
        :client_env:        Google Chrome 87 [Windows 10; openSuSE Linux Leap 42.2]
        :client_env:        Mozilla Firefox 83 [Windows 10; openSuSE Linux Leap 42.2]
        :client_env:        Microsoft EDGE 87 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = ''

    VARIANT = ''


    # :newpage: #######################################################################################################

    # :step: Переходим в меню
    # :assert: В меню присутствует пункт "Список юридических лиц"
    # :step: Снимаем с пользователя права доступа "Работа с юридическим лицом"
    # :assert: В меню отстутствует пункт "Список юридических лиц"
    # :step: Устанавливаем пользователю права доступа "Работа с юридическим лицом"
    # :step: Переходим в список продуктов
    # :step: Переходим к списку вариантов продукта "Регистрация/изменение данных клиента"
    # :assert: На продукте "Регистрация/изменение данных клиента" существует вариант "Регистрация/изменение данных юридического лица"
    # :assert: Для варианта "Регистрация/изменение данных юридического лица" создан новый процесс by.itworks.credo.Corporate.Find
    # :step: Переходим к параметрам варианта "Регистрация/изменение данных юридического лица"
    # :assert: В списке присутствует параметр "Проверять клиента в KYC" (doKyc). Логический
    # :assert: В списке присутствует параметр "Логин пользователя в АБС Бисквит" (login_bisquit). Текстовый
    # :assert: Предусмотрен ручной сброс кеша. Описание в WIKI http://192.168.0.4:8088/projects/main_skz/wiki/Analytics

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_46(app, credo_db):
    """
    {#
        :id:                53753_46
        :priority:          Средний
        :module:            ЕФР
        :description:       Параметр «Проверять клиента в KYC» на заявке = «false» - переходить к задаче «Сохранение связанных субъектов». (56944) При создании заявки параметр «Проверять клиента в KYC» сохраняется в параметры заявки, и на всех формах/задачах заявки анализируется значение сохраненного параметра («Проверять клиента в KYC» на заявке = «нет»).
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      В ЕРК присутствует тестовый клиент ИП
        :precondition:      На продукте\варианте параметр doKyc ("Проверять клиента в KYC") = "нет"
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Пользователь имеет роль msb_front_office
        :source_point:      53753, 56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 99 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 98 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 99 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :assert: «Проверять клиента в KYC» на заявке = «нет»
    # :step: На продукте/варианте меняем значение параметра doKyc ("Проверять клиента в KYC")
    value = 'да'

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем "Наименование страны регистрации клиента"
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Заполняем поле "Название"
    value = 'ИПЕШНИКС'
    # :step: Нажимаем кнопку "Поиск"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента юридического лица" нажимаем кнопку "Далее"
    # :assert: Осуществляется переход к задаче «Сохранение связанных субъектов» (В истории выполнения процесса создана задача "Сохранение связанных субъектов")

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_56(app, credo_db):
    """
    {#
        :id:                53753_56
        :priority:          Средний
        :module:            ЕФР
        :description:       Из Siron получен статус «block», но в поле «Комментарий» не определены слова permit или block обрабатыватся ситуация как будто получен комментарий «block». Отображение текста «Произошла ошибка KYC статуса. Свяжитесь с УФМ»
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      В ЕРК присутствует тестовый клиент ЮЛ
        :precondition:      по тестовому бенифициарному  владельцу из Siron получен статус «block» и в поле «Комментарий» не определены слова permit или block
        :precondition:      На продукте\варианте параметр doKyc ("Проверять клиента в KYC") = "да"
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Пользователь имеет роль msb_front_office
        :precondition:      У ЮЛ имеются данные руководителя и бенефициарных владельцев
        :precondition:      Параметр kyc_emails на продукте/варианте заполнен значениями kosovec@itwlocal.by;maslov@itwlocal.by
        :source_point:      53753, 56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :comment:           Для моделирования данной ситуации отправляли kycStatus заявки банку чтобы нам пришёл статус "block" + Комментарий без permit или block
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 99 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 98 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 99 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем "Наименование страны регистрации клиента"
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Заполняем поле "Название"
    value = 'МОЯ ОБОРОНА'
    # :step: Нажимаем кнопку "Поиск"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента юридического лица" нажимаем кнопку "Добавить бенифициарного владельца"
    # :step: Заполняем поле "Фамилия"
    value = 'Лукашенко'
    # :step: Заполняем поле "Имя"
    value = 'Александр'
    # :step: Нажимаем кнопку "Добавить"
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На форме "Подтверждение статуса проверки клиента" KYC статус для бенефициарного владельца "Лукашенко Александр" = Произошло совпадение УФМ (принято решение о блокировке) - как для статуса «block» + текст «block» в начале строки поля «Комментарий» ответа KYC
    # :assert: На форме отображается ошибка с текстом "Произошла ошибка KYC статуса. Свяжитесь с УФМ."
    # :assert: На форме отображаются кнопки "Завершить" и "Отмена"

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_53753_60(app, credo_db):
    """
    {#
        :id:                53753_60
        :priority:          Средний
        :module:            ЕФР
        :description:       Параметр «Проверять клиента в KYC» на заявке = «true» - переходить к задаче «Проверка клиента в KYC(Siron)». (56944) При создании заявки параметр «Проверять клиента в KYC» сохраняется в параметры заявки, и на всех формах/задачах заявки анализируется значение сохраненного параметра («Проверять клиента в KYC» на заявке = «да»).
        :precondition:      У пользователя параметр useNewCabinet "Использование нового интерфейса ЕФР" = да
        :precondition:      В ЕРК присутствует тестовый клиент ИП
        :precondition:      На продукте\варианте параметр doKyc ("Проверять клиента в KYC") = "да"
        :precondition:      Пользователь авторизирован в СКЗ
        :precondition:      Пользователь имеет роль msb_front_office
        :source_point:      53753, 56944
        :comment:           Тестирование осуществляется на заявке Продукт\Вариант "Регистрация/изменение данных клиента"\"Регистрация/изменение данных юридического лица"
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 99 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 98 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 99 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'changing_customer'

    VARIANT = 'CorporateFind'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" указываем личный (идентификационный) номер клиента ФЛ, существующего в учетной системе
    value = '6131183M846PB7'
    # :step: Нажимаем кнопку "Искать"
    # :step: Выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: Выбираем значение поля "Выберите продукт" в блоке "Действия с продуктами"
    value = 'Регистрация/изменение данных клиента'
    # :step: Выбираем значение поля "Выберите вариант"
    value = 'Регистрация/изменение данных юридического лица'
    # :step: Нажимаем кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :assert: «Проверять клиента в KYC» на заявке = «да»
    # :step: На продукте/варианте меняем значение параметра doKyc ("Проверять клиента в KYC")
    value = 'нет'

    # :newpage: #######################################################################################################

    # :step: На форме "Поиск карточки клиента в учетной системе Банка" выбираем "Наименование страны регистрации клиента"
    value = 'РЕСПУБЛИКА БЕЛАРУСЬ'
    # :step: Заполняем поле "Название"
    value = 'ИПЕШНИКС'
    # :step: Нажимаем кнопку "Поиск"
    # :step: В блоке "Выберите необходимую карточку" выбираем необходимую карточку

    # :newpage: #######################################################################################################

    # :step: На форме "Реквизиты клиента юридического лица" нажимаем кнопку "Далее"
    # :assert: Осуществляется переход к задаче «Проверка клиента в KYC(Siron)» (В истории выполнения процесса создана задача "Проверка клиента в KYC(Siron)")

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)



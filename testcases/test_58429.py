# :suit_description: #58429 
# :revision_date: 21.12.2022

@pytest.mark.skip(reason="Template")
def test_57563_13(app, credo_db):
    """
    {#
        :id:                57563_13
        :priority:          Средний
        :module:            Базовый счет
        :description:       Прохождение заявки при выборе операции  с БС (Открытие БС). Запрос ITW/GetAnswerForBA вернул err_code = 0 и ErrorText пусто. Оформляется персонифицированная карточка. Проверка клиента в KYC(Siron), если check_status = inconspic. Форма "Проверка клиента в KYC(Siron)" не отображается (58429) Проверка добавления на форме "Печать уведомления" кликабельной строчки "Лист архива" для формирования листа архива по контракту базового счета (Открытие базового счёта)
        :precondition:      Пользователь авторизирован со всеми правами
        :precondition:      У пользователя параметры "Использование нового интерфейса" = "да", "Точка продаж" = "ЦБУ №105"
        :precondition:      В справочнике Варианты продукта (card_variant) с "Продуктом для карт"= "Базовый счет" только "БЕЛКАРТ-ПРЕМИУМ"
        :precondition:      В справочнике Типы карт для вариантов (card_for_variant) для "Варианта продукта" = "БЕЛКАРТ-ПРЕМИУМ" настроены 2 варианта: "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ Instant issue" и "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ"
        :precondition:      (card_for_variant) "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ": "Тип платежных карт" = "БЕЛКАРТ-ПРЕМИУМ Базовая", "Срок действия карт"="5 лет", "Продукт в Forpost"="BASE_ACCNT_CARD", "Вариант в Forpost"="RS_VIP_BELCART_PREMIUM", в "Отображение карточки в процессах" есть "Возможность открытия базового счёта", "Валюта счет"="Белорусский рубль"
        :precondition:      В справочнике Типы платежных карт (type_card) для Типа карточки "БЕЛКАРТ-ПРЕМИУМ": "Персонифицированная" = "Да", "Продукт для PriorityPass в Forpost" и "Вариант для PriorityPass в Forpost" пустые, "Дополнительные сервисы/услуги"="SMS-управление SMS-информирование"
        :precondition:      На продукте\варианте параметр working_time_calendar_role = middle_office
        :precondition:      На варианте параметр pinCodeMethodsPersCard = SMS-сообщение
        :precondition:      Для роли middle_office (Мидл-офис) устанавливаем на системную дату рабочее время 00:00 - 00:01 (Календарь)
        :precondition:      Статус клиента в Siron KYC равен inconspic
        :precondition:      Клиент не проходил FATCA*-ИДЕНТИФИКАЦИЮ
        :precondition:      Параметр варианта needPreActualization ("Необходима предварительная актуализация клиента") = "нет"
        :precondition:      На продукте параметр doKyc = Да
        :precondition:      В itwCredo-kyc.properties внесены соответствующие настройки (kyc.url, emails, timeout, workingTimeRole)
        :precondition:      У клиента отсутствуют базовые счета
        :source_point:      57563, 57657, 58340, 58429
        :comment:           Для возможности завершения заявки (активации карточки) выполняется апдейт карточки по номеру crd_code c установкой crd_embossed = 'YES', crd_prod_status = 'M'
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 105 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 104 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 105 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'BasicAccounts'

    VARIANT = 'OperationsBasicAccount'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный номер" существующего Клиента
    value = '6250875E716PB5'
    # :step: Нажимаем кнопку "Искать"
    # :step: Нажимаем на краткую карточку клиента

    # :newpage: #######################################################################################################

    # :step: Выбрать продукт на форме "Профиль клиента"
    value = 'Базовые счета '
    # :step: Выбрать вариант
    value = 'Операции с базовым счетом'
    # :step: Нажать кнопку "Выполнить"
    # :assert: На параметрах заявки создан параметр «location_sales», который равен значению из параметра location_sales (точка продаж) пользователя-инициатора заявки.

    # :newpage: #######################################################################################################

    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На параметрах заявки присутствуют параметры doKyc ([KYC] Проверять клиента в KYC) со значением "да"
    # :step: Выбираем тип операции
    value = 'Открытие базового счета'
    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: переходим на форму "Ввод параметров расчетной карточки"
    # :assert: с предзаполненными полями "Продукт" = "Базовый счет", "Вариант продукта" = "БЕЛКАРТ-ПРЕМИУМ"
    # :assert: с незаполненными обязательными полями: , "Тип карточки", "Валюта счета", "Срок действия", "Регион выдачи", "Точка выдачи", "Способ получения ПИН-кода"
    # :assert: и c незаполненными необязательными: "Срочность выпуска" и пустым блоком "Дополнительные сервисы"
    # :assert: с кнопками "Далее" (неактивная), "Назад", "Отмена", "Рассчитать стоимость" (неактивная)
    # :step: заполняем поле "Тип карточки" = "БЕЛКАРТ-ПРЕМИУМ Базовая"
    # :assert: заполнилось поле "Валюта счета" = "Белорусский рубль"
    # :assert: заполнилось поле "Срок действия" = "5 лет"
    # :assert: заполнилось поле "Способ получения ПИН-кода" = "SMS-сообщение"
    # :assert: блок "Дополнительные сервисы" заполнился неотмеченными чекбоксами "SMS-информирование", SMS-управление"
    # :step: заполняем поле Регион выдачи
    value = 'Минск'
    # :step: заполняем поле Точка выдачи значением неравным параметру location_sales (точка продаж) пользователя
    value = 'Отдел розничных операций / г.Минск ул.Притыцкого 60/2'
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :assert: Форма дополняется блоком "Информация об условиях оформления платежной карточки:" с таблицей и текстом "* В случае если валюта счета отличается от валюты вознаграждения, сумма вознаграждения рассчитывается по курсу НБ РБ на день списания."
    # :assert: В таблице блока "Информация об условиях оформления платежной карточки:" может отображаться вид комиссии, размер/валюта комиссии, информация о периодичности взимания комиссии, размер неснижаемого остатка, наименование примененного правила при расчете комиссии
    # :assert: Активируется кнопка "Далее"
    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На параметрах заявки создан параметр «issue_point» со значением выбранным на форме "Ввод параметров расчетной карточки" (Отдел розничных операций / г.Минск ул.Притыцкого 60/2)
    # :assert: переходим на форму "Ввод иных параметров платежной карточки" с предзаполненными полями "Имя латинскими буквами", "Фамилия латинскими буквами" (в сумме не превышающие 24 символа)
    # :step: заполняем поле Кодовое слово клиента
    value = 'код'
    # :step: заполняем поле Источник получения информации о продукте
    value = 'прочее'
    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: На форме "КРАТКАЯ FATCA*-ИДЕНТИФИКАЦИЯ КЛИЕНТА" заполняем чек-бокс
    value = 'Нет, не являюсь/не имею'
    # :step: Нажимаем на появившуюся кнопку "Печать формы"
    # :step: Заполняем появившийся чек-бокс 
    value = 'Форма оформлена'
    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: переходим на форму "Оформление заявления-анкеты" с неактивной кнопкой "Подтвердить" и активными "Отмена", "Назад"
    # :assert: над ссылками для формирования документов - текст "Распечатайте заявления, передайте их на проверку и подписание клиенту:"
    # :assert: над чек-боксом - текст "Удостоверьтесь в подписании заявлений клиентом, учините на них свою подпись, подтвердите оформление заявлений:"
    # :assert: над кнопкой подтверждения  - текст"Подтвердите совершение автоматических действий в учетной системе Банка"
    # :step: по ссылке "Заявление -анкета" скачиваем документ "ЗАЯВЛЕНИЕ-АНКЕТА НА ОФОРМЛЕНИЕ ПЛАТЕЖНОЙ КАРТОЧКИ" в формате pdf
    # :step: по ссылке "Заявления на открытие базового счёта" скачиваем документ "ЗАЯВЛЕНИЕ об открытии базового счета" в формате pdf
    # :step: Устанавливаем флаг Заявления оформлены
    # :assert: кнопка "Подтвердить" активируется
    # :step: Нажимаем кнопку "Подтвердить"
    # :assert: на параметры заявки сохранен параметр "Файл заявление-анкета" (anketa_download) с ссылкой для скачивания
    # :assert: на параметры заявки сохранен параметр "Заявление на базовый счёт" (application_basic_accnt) с ссылкой для скачивания
    # :assert: Задача «Ожидание рабочего времени» создана
    # :assert: В истории выполнения процесса по заявке создана задача "Таймер ожидания рабочего времени"
    # :assert: По заявке доступно событие "Сброс таймера" и "Перезапуск таймера"
    # :step: Для роли middle_office (Мидл-офис) устанавливаем на системную дату рабочее время 00:00 - 23:59
    # :step:  выполняем событие "Перезапуск таймера"
    # :assert: После задачи «Ожидание рабочего времени» создана задача «Проверка возможности открытия БС» (ErrorText отсутствует - форма не отобразилась)
    # :assert: После задачи «Проверка возможности открытия БС» создана задача «Ожидание рабочего времени»
    # :assert: В истории выполнения процесса после окончания сохранения клиента создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: На параметрах заявки присутсвуют параметры kycId ([KYC] ID для проверки в Siron) = EFR2456081_53bb4
    # :assert: Результат проверки сохранен в параметрах на заявки kycStatus ([KYC] Статус проверки клиента в KYC) = inconspic, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-13T08:57:43, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус inconspic успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Форма "Проверка клиента в KYC(Siron)" не отображается
    # :assert: переходим на форму "ПЕЧАТЬ УВЕДОМЛЕНИЯ" с неактивной кнопкой "Далее"
    # :assert: над ссылкой "Уведомление об открытии базового счёта" - текст "Распечатайте 1 экз. Уведомления об открытии базового счёта и его реквизитах, подпишите его со стороны Банка и передайте клиенту:"
    # :assert: под ссылкой "Уведомление об открытии базового счёта" находится ссылка "Лист архива"
    # :step: переходим по ссылке "Лист архива"
    # :assert: сформировался лист архива по контракту базового счета
    # :assert: ниже ссылки
    # :assert:  текст "В случае оформления заявления представителем владельца Базового счёта - направьте Уведомление письмом на адрес владельца Базового счёта"
    # :assert:  текст "Передайте клиенту Заявление на открытие базового счета для оформления расписки в получении Уведомления. Удостоверьтесь в подписании клиентом Заявление на открытие базового счета и оформлении в нём расписки клиента в получении Уведомления, подтвердите оформление Заявление на открытие базового счета:"
    # :assert: ниже чек-бокса "Заявление оформлено"
    # :assert:  текст "Подготовьте к передаче на хранение следующие документы по заявке (документы должны быть сложены в той же последовательности, в которой они указаны ниже):"
    # :assert:  "1. Лист архива"
    # :assert:  "2. Заявление на открытие базового счета"
    # :assert:  "3. Заявление-анкета на оформление платежной карточки"
    # :assert:  "4. Краткая форма самосертификации"
    # :assert: в список для хранения выводится заявление, соответствующего типу операции, из справочника «operations_basic_account»
    # :step: Устанавливаем флаг Заявление оформлено
    # :assert: Отображается текст "Подтвердите готовность документов по заявке"
    # :assert: Отображается чек-бокс "Документы по заявке подготовлены"
    # :assert: Отображается текст "Передайте подготовленные документы в адрес ОСБПК УСРО ДРиСРБ"
    # :assert: Отображается текст "Важно! Ответственность за правильность оформления и наличие всех необходимых документов по заявке несёт работник банка, который подтверждал оформление документов в ходе работы с заявкой и/или подтверждал их готовность в настоящей форме"
    # :assert: Устанавливаем флаг Документы по заявке подготовлены
    # :assert: кнопка "Далее" активируется
    # :step: Нажимаем кнопку "Далее"
    # :assert: В параметрах заявки сохранен параметр "Уведомление об открытии базового счета" (notification_basic_accnt) с ссылкой для скачивания
    # :assert: В параметрах заявки сохранен параметр "Лист архива по контракту базового счета" (page_archive) с ссылкой для скачивания

    # :newpage: #######################################################################################################

    # :step: На форме "Выбор получателя платежной карточки" с предзаполненным "Получатель" = "Владелец счета" и активными кнопками "Далее", "Отмена", "Назад"
    # :step: Нажимаем на кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: переходим на форму "ВЫДАЧА ПЛАТЕЖНОЙ КАРТОЧКИ"  с неактивной кнопкой "Завершить выдачу карточки", активной "Отмена"
    # :step: устанавливаем "Расписка оформлена"
    # :assert: кнопка "Завершить выдачу карточки" активируется
    # :step: Нажимаем на кнопку "Завершить выдачу карточки"

    # :newpage: #######################################################################################################

    # :assert: переход на форму "ПОДГОТОВКА ДОКУМЕНТОВ К ПЕРЕДАЧЕ НА ХРАНЕНИЕ" с неактивной кнопкой "Далее"
    # :assert: на форме в списке документов для хранения указаны "Заявление на открытие базового счета", "Расписка в получении платежной карточки"
    # :step: устанавливаем флаг "Документы по заявке подготовлены"
    # :assert: кнопка "Далее" активируется
    # :step: Нажимаем на кнопку "Далее"
    # :assert: заявка завершается исполнением, статус "Карточка выдана"
    # :assert: ФОРПОСТ. Открылся контракт на Продукте/Варианте BASE_ACCNT_CARD/RS_VIP_BELCART_PREMIUM

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_57563_14(app, credo_db):
    """
    {#
        :id:                57563_14
        :priority:          Средний
        :module:            Базовый счет
        :description:       Операции с базовым счетом. Проверка прохождения заявки при выборе операции  с БС (Переоформление текущего счёта в базовый). Запрос ITW/GetAnswerForBA вернул err_code = 0 и ErrorText пусто. Переоформляется на неперсонифицированную карточку. Проверка клиента в KYC(Siron), если check_status = check, check_status = pending, check_status = release. Проверка доступа к задаче «Проверка клиента в KYC(Siron)». Проверка кнопки "Обновить" на форме «Проверка клиента в KYC(Siron)», если check_status = check. Проверка автоматического обновления результата на форме задачи «Проверка клиента в KYC(Siron)», если check_status = pending. Проверка автоматического обновления результата в нерабочее время на форме задачи «Проверка клиента в KYC(Siron)», если check_status = pending. (58155) Проверка добавления новых параметров "Вид выплаты остатка", "Код банка для перечисления остатка", "Номер счета для перечисления остатка" сохранения их на заявке и отображения новых полей (58550) Видимость задачи "Проверка клиента в KYC(Siron)" (58429) Проверка добавления на форме "Печать уведомления" кликабельной строчки "Лист архива" для формирования листа архива по контракту базового счета (Переоформление текущего счёта в базовый)
        :precondition:      Пользователь авторизирован со всеми правами, ролями
        :precondition:      У пользователя параметр "Использование нового интерфейса" = "да"
        :precondition:      На пользователе параметр location_sales = Отдел розничных операций / г.Минск ул.Притыцкого 60/2
        :precondition:      В справочнике Варианты продукта (card_variant) с "Продуктом для карт"= "Базовый счет" только "БЕЛКАРТ-ПРЕМИУМ"
        :precondition:      В справочнике Типы карт для вариантов (card_for_variant) для "Варианта продукта" = "БЕЛКАРТ-ПРЕМИУМ" настроены 2 варианта: "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ Instant issue" и "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ"
        :precondition:      (card_for_variant) "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ Instant issue": "Тип платежных карт" = "БЕЛКАРТ-ПРЕМИУМ Instant Issue Базовая", "Срок действия карт"="до пяти лет", "Продукт в Forpost"="BASE_ACCNT_CARD_INSTANT", "Вариант в Forpost"="RS_VIP_BELCART_PREMIUM", в "Отображение карточки в процессах" есть "Возможность открытия базового счёта", "Валюта счет"="Белорусский рубль"
        :precondition:      (card_for_variant) "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ": "Тип платежных карт" = "БЕЛКАРТ-ПРЕМИУМ Базовая", "Срок действия карт"="5 лет", "Продукт в Forpost"="BASE_ACCNT_CARD", "Вариант в Forpost"="RS_VIP_BELCART_PREMIUM", в "Отображение карточки в процессах" есть "Возможность открытия базового счёта", "Валюта счет"="Белорусский рубль"
        :precondition:      В справочнике Типы платежных карт (type_card) для  типа платежных карт "БЕЛКАРТ-ПРЕМИУМ Instant Issue": "Персонифицированная" = "Нет", "Продукт для PriorityPass в Forpost" и "Вариант для PriorityPass в Forpost" пустые.
        :precondition:      В справочнике Типы платежных карт (type_card) для  типа платежных карт "БЕЛКАРТ-ПРЕМИУМ": "Персонифицированная" = "Да", "Продукт для PriorityPass в Forpost" и "Вариант для PriorityPass в Forpost" пустые.
        :precondition:      На продукте\варианте параметр working_time_calendar_role = middle_office
        :precondition:      Для роли middle_office (Мидл-офис) устанавливаем на системную дату рабочее время 00:00 - 00:01
        :precondition:      Статус клиента в Siron KYC равен check
        :precondition:      Параметр варианта needPreActualization ("Необходима предварительная актуализация клиента") = "нет"
        :precondition:      На варианте параметр doKyc = Да
        :precondition:      Пользователь maslova только с ролью admins
        :precondition:      Пользователь semenov только с ролью front_office
        :precondition:      У пользователя hominskaya все роли, кроме admins и front_office
        :precondition:      В файле itwcredo-kyc.properties параметр workingTimeRole=front_office
        :precondition:      Для роли front_office установлено начало рабочего времени = 13:00
        :precondition:      Системное время = 12:30
        :precondition:      На варианте "Операции с базовыми счетами" значение параметра "pinCodeMethodsPersCard" = SMS-сообщение
        :precondition:      На варианте "Операции с базовыми счетами" значение параметра "pinCodeMethodsUnPersCard" = Пин-конверт
        :precondition:      Фатка-самоидентификация не требуется
        :precondition:      В itwCredo-kyc.properties внесены соответствующие настройки (kyc.url, emails=credospam@itworks.by, timeout=300, workingTimeRole=front_office)
        :source_point:      57563, 57657, 58155, 58429, 58550
        :comment:           Для возможности завершения заявки (активации карточки) выполняется апдейт карточки по номеру crd_code c установкой crd_embossed = 'YES', crd_prod_status = 'M'
        :comment:           Siron KYC: для установки статусов / получения ответов по Клиенту использовался эмулятор - бот для сайрона @itwAssistantBot, в itwCredo-kyc.properties kyc.url=http://autotest.itworks.brest:8301/siron
        :comment:           У пользователя есть права доступа для продукта "Базовые счета" и параметра 'Использовать параметры для поля (Способ получения пин-кода для продукта "Базовые счета")'
        :comment:           Задача "Проверка клиента в KYC(Siron)"назначается на инициатора заявки, на роли admins и front_office
        :tc_type:           +
        :db_env:            База FORPOST: forp_d3; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 101 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 100 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 100 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'BasicAccounts'

    VARIANT = 'OperationsBasicAccount'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный номер"
    value = '6250875E716PB5'
    # :step: Нажимаем кнопку "Искать"
    # :step: Нажимаем на краткую карточку клиента

    # :newpage: #######################################################################################################

    # :step: Выбрать продукт на форме "Профиль клиента"
    value = 'Базовые счета'
    # :step: Выбрать вариант
    value = 'Операции с базовым счетом'
    # :step: Нажать кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: Нажать кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: На параметрах заявки присутствуют параметры doKyc ([KYC] Проверять клиента в KYC) со значением "да"
    # :step: На варианте  изменяем значение параметра doKyc ([KYC] Проверять клиента в KYC) = нет
    # :step: Выбираем тип операции
    value = 'Переоформление текущего счёта в базовый'
    # :step: Выбираем счет
    # :assert: форма дополняется блоком "Выберите параметры выплаты остатка (при наличии)", поле "Вид выплаты остатка"  по умолчанию заполнено значением "Выдать наличными"
    # :step: В поле "Вид выплаты остатка" выбираем значение
    value = 'Перечислить остаток на счёт'
    # :assert: форма дополняется полями "Код банка для перечисления остатка"(не заполнено, активно), "Номер счёта для перечисления остатка" (Предзаполнено по маске  "BY__ ____ __ ____ ____ ____ ____", заблокировано)
    # :step: выбираем "Код банка для перечисления остатка" из открывающегося справочника "Коды банков" через "Поиск"
    value = 'OLMPBY2X'
    # :assert: Список ограничен страной "БЕЛАРУСЬ" и типом кода "BIC-BEL"
    # :assert: поле "Номер счёта для перечисления остатка" активно и предзаполнено по маске "BY__ AKBB __ ____ ____ ____ ____"
    # :step: заполняем "Номер счёта для перечисления остатка"
    value = 'BY86OLMP30140900000602823683'
    # :step: нажимаем кнопку "Далее"
    # :assert: В параметрах заявки сохранились значения type_transfer_remainder = ACCNT (Вид выплаты остатка), bank_code_for_transfer_remainder = AKBBBY21514 (Код банка для перечисления остатка), account_for_transfer_remainder = BY78AKBB97465114046544231747 (Номер счета для перечисления остатка), bank_name_for_transfer_remainder = BELARUSBANK (Наименование банка для перечисления остатка)

    # :newpage: #######################################################################################################

    # :step: На форме "Ввод параметров расчётной карточки заполняем поле "Тип карточки"
    value = 'БЕЛКАРТ-ПРЕМИУМ Базовая'
    # :assert: заполнилось поле "Валюта счета"  = "Белорусский рубль"
    # :assert: заполнилось поле "Срок действия"  = "5 лет"
    # :step: заполняем поле "Регион выдачи" = "Минск"
    # :step: заполняем поле "Точка выдачи" ="Центр премиального обслуживания / г.Минск ул.Притыцкого 60/2"
    # :assert: В поле "Способ получения ПИН-кода" доступно только одно значение = SMS-сообщение
    # :step: В поле "Тип карточки" выбираем неперсонифицированную карту
    value = 'БЕЛКАРТ-ПРЕМИУМ Instant Issue Базовая'
    # :assert: В поле "Способ получения ПИН-кода" доступно только одно значение = ПИН-конверт
    # :assert: заполнилось поле "Срок действия"  = "до 5 лет"
    # :assert: заполнилось поле "Регион выдачи"  = "Минск" и недоступно для редактирования
    # :assert: заполнилось поле "Точка выдачи"  = "Отдел розничных операций / г.Минск ул.Притыцкого 60/2" и недоступно для редактирования
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: заполняем поле Кодовое слово клиента
    value = 'код'
    # :step: заполняем поле Источник получения информации о продукте
    value = 'прочее'
    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: по ссылке "Заявление -анкета" скачиваем документ "ЗАЯВЛЕНИЕ-АНКЕТА НА ОФОРМЛЕНИЕ ПЛАТЕЖНОЙ КАРТОЧКИ"  в формате pdf
    # :step: по ссылке "Заявления на переоформление базового счета" скачиваем документ "ЗАЯВЛЕНИЕ о переоформлении текущего (расчетного) банковского счета в базовый счет" в формате pdf
    # :assert: В файле "Заявление на переоформление базового счета" присутствует новая строка заполненная ранее введёнными значениями "Остаток денежных средств на текущем счете (при наличии) прошу перечислить на счет №BY78AKBB97465114046544231747 в BELARUSBANK, БИК AKBBBY21514."
    # :step: Устанавливаем флаг Заявления оформлены
    # :step: Нажимаем кнопку "Подтвердить"
    # :assert: на параметры заявки сохранен параметр "Заявление на базовый счёт" (application_basic_accnt) с ссылкой для скачивания
    # :assert: Задача «Ожидание рабочего времени» создана
    # :assert: В истории выполнения процесса по заявке создана задача "Таймер ожидания рабочего времени"
    # :assert: По заявке доступно событие "Сброс таймера" и "Перезапуск таймера"
    # :step: Для роли middle_office (Мидл-офис) устанавливаем на системную дату рабочее время 00:00 - 23:59
    # :step:  выполняем событие "Перезапуск таймера"
    # :assert: После задачи «Ожидание рабочего времени» создана задача «Проверка возможности открытия БС» (ErrorText отсутствует - форма не отобразилась)
    # :assert: После задачи «Проверка возможности открытия БС» создана задача «Ожидание рабочего времени»

    # :newpage: #######################################################################################################

    # :assert: Выполняется запрос ITW/GetAnswerForBA, в котором передаются параметры: "reopen_blnc_transf_type" = ACCNT (Вид выплаты остатка), "reopen_blnc_transf_bic" = AKBBBY21514 (Код банка для перечисления остатка), "reopen_blnc_transf_accnt" = BY78AKBB97465114046544231747 (Номер счета для перечисления остатка)
    # :assert: В истории выполнения процесса после окончания сохранения клиента создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: На параметрах заявки присутствуют параметры kycId ([KYC] ID для проверки в Siron) = EFR2455865_fa986
    # :assert: Результат проверки сохранен в параметрах на заявки kycStatus ([KYC] Статус проверки клиента в KYC) = check, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-06T16:46:38, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус check успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)»
    # :assert: Кнопка "Завершить" не доступна для нажатия
    # :assert: На форме «Проверка клиента в KYC(Siron)» в поле «Результат проверки» получен статус "На проверке УФМ (произошло совпадение)"
    # :step: В Siron KYC устанавливаем статус pending
    # :step: Нажимаем кнопку "Обновить" на форме «Проверка клиента в KYC(Siron)»
    # :assert: В истории выполнения процесса создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: На параметрах заявки присутствуют параметры kycId ([KYC] ID для проверки в Siron) = EFR2456099_fce99
    # :assert: Результат проверки сохранен в параметрах на заявки kycStatus ([KYC] Статус проверки клиента в KYC) = pending, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-06T16:46:38, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус pending успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)», в поле «Результат проверки» получен статус "Отложен УФМ"
    # :step: В Siron KYC устанавливаем статус release
    # :step: Ожидаем 300 секунд (timeout=300)
    # :assert: Результат не обновляется на форме автоматически
    # :step: Ожидаем наступления рабочего времени
    # :assert: Результат обновился на форме автоматически, без обновления страницы браузера
    # :assert: В истории выполнения процесса создались задачи "Проверка KYC", "Запуск процесса KycChecker"
    # :assert: На параметрах заявки присутствуют параметры kycId ([KYC] ID для проверки в Siron) = EFR2455829_cc558
    # :assert: Результат проверки сохранен в параметрах на заявки kycStatus ([KYC] Статус проверки клиента в KYC) = release, kycDate ([KYC] Время проверки клиента в KYC) = 2022-07-06T16:46:38, kycComment ([KYC] Комментарий к проверке клиента в KYC) = Статус release успешно установлен

    # :newpage: #######################################################################################################

    # :assert: Отобразилась форма «Проверка клиента в KYC(Siron)»
    # :assert: На форме «Проверка клиента в KYC(Siron)» в поле «Результат проверки» получен статус "Совпадений нет по результатам проверки УФМ"
    # :step: Нажимаем кнопку "Отмена"
    # :assert: заявка доступна инициатору заявки
    # :assert: заявка доступна пользователю с ролью admins (maslova)
    # :assert: заявка доступна пользователю с ролью front_office (semenov)
    # :assert: заявка недоступна пользователю без роли admins или front_office (hominskaya)
    # :step: На форме «Проверка клиента в KYC(Siron)» нажимаем "Завершить"

    # :newpage: #######################################################################################################

    # :assert: переход на форму "ПЕЧАТЬ УВЕДОМЛЕНИЯ"
    # :assert: над чекбоксом "Заявление оформлено" выводится "В случае оформления заявления представителем владельца Базового счёта - направьте Уведомление письмом на адрес владельца Базового счёт" и "Передайте клиенту Заявление на переоформление базового счета для оформления расписки в получении Уведомления. Удостоверьтесь в подписании клиентом Заявление на переоформление базового счета и оформлении в нём расписки клиента в получении Уведомления, подтвердите оформление Заявление на переоформление базового счета:"
    # :assert: над ссылкой "Уведомление об открытии базового счёта" отображается текст "Распечатайте 1 экз. Уведомления об открытии базового счёта и его реквизитах, подпишите его со стороны Банка и передайте клиенту (в случае оформления заявления непосредственно владельцем Базового счёта):"
    # :assert: под ссылкой "Уведомление об открытии базового счёта" находится ссылка "Лист архива"
    # :step: переходим по ссылке "Лист архива"
    # :assert: сформировался лист архива по контракту базового счета
    # :step: Устанавливаем флаг Заявление оформлено
    # :assert: кнопка "Далее" активируется
    # :step: Нажимаем кнопку "Далее"
    # :assert: В параметрах заявки сохранен параметр "Уведомление об открытии базового счета" (notification_basic_accnt) с ссылкой для скачивания
    # :assert: В параметрах заявки сохранен параметр "Лист архива по контракту базового счета" (page_archive) с ссылкой для скачивания

    # :newpage: #######################################################################################################

    # :step: на форме "Выдача платежной карточки", устанавливаем флаг "Выдача платежной карточки оформлена в заявлении-анкете"
    # :step: Нажимаем на кнопку "Завершить выдачу карточки"

    # :newpage: #######################################################################################################

    # :assert: на форме "Подготовка документов к передаче на хранение" в списке документов для хранения есть "Заявление-анкета на оформление платежной карточки" и "Заявление на переоформление базового счета"
    # :assert: Присутствует текст "Передайте подготовленные документы в адрес ОСБПК УСРО ДРиСРБ"
    # :assert: Присутствует текст "Важно! Ответственность за правильность оформления и наличие всех необходимых документов по заявке несёт работник банка, который подтверждал оформление документов в ходе работы с заявкой и/или подтверждал их готовность в настоящей форме"
    # :step: устанавливаем флаг Документы по заявке подготовлены
    # :step: Нажимаем на кнопку "Далее"
    # :assert: заявка завершается исполнением, статус "Карточка выдана"
    # :assert: ФОРПОСТ. Открылся контракт на продукте/Варианте BASE_ACCNT_CARD_INSTANT/RS_VIP_BELCART_PREMIUM

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)

@pytest.mark.skip(reason="Template")
def test_57563_21(app, credo_db):
    """
    {#
        :id:                57563_21
        :priority:          Средний
        :module:            Базовый счет
        :description:       Проверка прохождения заявки при выборе операции  с БС (Открытие базового счета). Запрос ITW/GetAnswerForBA не вернул err_code - отсутсвует (техническая ошибка).
        :precondition:      Пользователь авторизирован только с ролью front-office
        :precondition:      У пользователя параметр "Использование нового интерфейса" = "да"
        :precondition:      На пользователе параметр location_sales = "Отдел розничных операций / г.Минск ул.Притыцкого 60/2"
        :precondition:      Пользователь maslov только с ролью admins
        :precondition:      У пользователя hominskaya отсутствует роль admins
        :precondition:      В справочнике Варианты продукта (card_variant) с "Продуктом для карт"= "Базовый счет" только "БЕЛКАРТ-ПРЕМИУМ"
        :precondition:      В справочнике Типы карт для вариантов (card_for_variant) для "Варианта продукта" = "БЕЛКАРТ-ПРЕМИУМ" настроены 2 варианта: "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ Instant issue" и "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ"
        :precondition:      (card_for_variant) "Расчетная карточка "Пенсионная" БЕЛКАРТ-ПРЕМИУМ": "Тип платежных карт" = "БЕЛКАРТ-ПРЕМИУМ Базовая", "Срок действия карт"="5 лет", "Продукт в Forpost"="BASE_ACCNT_CARD", "Вариант в Forpost"="RS_VIP_BELCART_PREMIUM", в "Отображение карточки в процессах" есть "Возможность открытия базового счёта", "Валюта счет"="Белорусский рубль"
        :precondition:      В справочнике Типы платежных карт (type_card) для Типа карточки "БЕЛКАРТ-ПРЕМИУМ": "Персонифицированная" = "Да", "Продукт для PriorityPass в Forpost" и "Вариант для PriorityPass в Forpost" пустые, "Дополнительные сервисы/услуги"="SMS-управление SMS-информирование"
        :precondition:      На варианте параметр pinCodeMethodsPersCard = ПИН-конверт SMS-сообщение
        :precondition:      Фатка-самоидентификация не требуется
        :precondition:      Параметр варианта needPreActualization ("Необходима предварительная актуализация клиента") = "нет"
        :precondition:      Параметр working_time_calendar_role = front_office
        :precondition:      в файле gaterules_bgpb.drl заменяем значение "ITW/GetAnswerForBA" на  "ITW/GetAnswerForBA!!!" - для имитации ошибки
        :precondition:      Заявка инициируется вне рабочего времени для working_time_calendar_role
        :source_point:      57563, 58429
        :comment:           
        :tc_type:           +
        :db_env:            База FORPOST: forp_d8; Тестовая дата: 09.12.2021
        :client_env:        Google Chrome 101 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Mozilla Firefox 100 [Windows 10; openSuSE Linux Leap 15.1]
        :client_env:        Microsoft EDGE 100 [Windows 10]
    }#
        :param: app: фикстура приложения
        :param: db_credo: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'BasicAccounts'

    VARIANT = 'OperationsBasicAccount'


    # :newpage: #######################################################################################################

    # :step: На форме "Поиск клиента" заполняем поле "Личный номер"
    value = '7525360A663PB5'
    # :step: Нажимаем кнопку "Искать"
    # :step: Нажимаем на краткую карточку клиента

    # :newpage: #######################################################################################################

    # :step: Выбрать продукт на форме "Профиль клиента"
    value = 'Базовые счета '
    # :step: Выбрать вариант
    value = 'Операции с базовым счетом'
    # :step: Нажать кнопку "Выполнить"

    # :newpage: #######################################################################################################

    # :step: Нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: Выбираем тип операции
    value = 'Открытие базового счета'
    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :assert: поля предзаполнены "Продукт" = "Базовый счет", "Вариант продукта" = "БЕЛКАРТ-ПРЕМИУМ"
    # :step: заполняем поле "Тип карточки" = "БЕЛКАРТ-ПРЕМИУМ Базовая"
    # :step: заполняем поле Регион выдачи
    value = 'Минск'
    # :step: заполняем поле Точка выдачи значением равным параметру location_sales (точка продаж) пользователя
    value = 'Отдел розничных операций / г.Минск ул.Притыцкого 60/2'
    # :step: Нажимаем кнопку "Рассчитать стоимость оформления"
    # :step: нажимаем кнопку "Далее"

    # :newpage: #####################################################################################################

    # :step: заполняем поле Кодовое слово клиента
    value = 'код'
    # :step: заполняем поле Источник получения информации о продукте
    value = 'прочее'
    # :step: нажимаем кнопку "Далее"

    # :newpage: #######################################################################################################

    # :step: Устанавливаем флаг Заявления оформлены
    # :step: Нажимаем кнопку "Подтвердить"

    # :newpage: #######################################################################################################

    # :assert: осуществляется переход на форму "Ошибка проверки возможности открытия БС"
    # :assert: на форме "Проверка возможности открытия БС" выводятся данные ошибки "execPutRequest,fireAllRules: Не найден получатель запроса"
    # :assert: на форму "Проверка возможности открытия БС" выводится кнопка "Отмена", всегда видима и доступна
    # :assert: на форму "Проверка возможности открытия БС" выводится кнопка "Завершить"
    # :step: Нажимаем кнопку "Отмена"

    # :newpage: #######################################################################################################

    # :assert: на заявку установлен статус «Ошибка проверки возможности открытия БС».
    # :assert: заявка доступна инициатору заявки
    # :assert: заявка доступна пользователю с ролью admins (maslov)
    # :assert: Пользователю maslov отправлен email с темой  «Ошибка проверки возможности открытия БС» и текстом ошибки - Неверный формат BIC
    # :assert: заявка не доступна пользователю без роли admins (hominskaya)
    # :step: устанавливаем нерабочее время для группы пользователей фронт-офис
    # :step: Выполняем задачу "Ошибка проверки возможности открытия БС"
    # :step: в файле gaterules_bgpb.drl заменяем значение "ITW/GetAnswerForBA!!!" на "ITW/GetAnswerForBA"
    # :step: нажимаем кнопку "Завершить"
    # :assert: повторно выполняется запрос ITW/GetAnswerForBA
    # :assert: в "История выполнения процесса" отображается "Создание задачи - Таймер ожидания рабочего времени", но отсутствует "Окончание - Таймер ожидания рабочего времени"

    # :newpage: #######################################################################################################

    # :assert: по наступлению рабочего времени создается задача "Печать уведомления"
    # :step: выполняем задачу "Печать уведомления"
    # :assert: на форме "Печать уведомления":
    # :assert: над чекбоксом "Заявление оформлено" выводится "В случае оформления заявления представителем владельца Базового счёта - направьте Уведомление письмом на адрес владельца Базового счёта" и "Передайте клиенту Заявление на открытие базового счета для оформления расписки в получении Уведомления. Удостоверьтесь в подписании клиентом Заявление на открытие базового счета и оформлении в нём расписки клиента в получении Уведомления (в случае оформления заявления непосредственно владельцем Базового счёта), подтвердите оформление Заявление на открытие базового счета:"
    # :assert: над ссылкой "Уведомление об открытии базового счёта" отображается текст "Распечатайте 1 экз. Уведомления об открытии базового счёта и его реквизитах, подпишите его со стороны Банка и передайте клиенту (в случае оформления заявления непосредственно владельцем Базового счёта):"
    # :assert: ниже чек-бокса "Заявление оформлено"
    # :assert:  текст "Обеспечьте хранение следующих документов в точке продаж до момента выдачи платежной карточки:"
    # :assert:  "1. Лист архива"
    # :assert:  "2. Заявление на открытие базового счета"
    # :assert:  "3. Заявление-анкета на оформление платежной карточки"
    # :assert: под ссылкой "Уведомление об открытии базового счёта" находится ссылка "Лист архива"
    # :step: переходим по ссылке "Лист архива"
    # :assert: сформировался лист архива по контракту базового счета
    # :step: Устанавливаем флаг Заявление оформлено
    # :step: Нажимаем кнопку "Далее"
    # :assert: В параметрах заявки сохранен параметр "Уведомление об открытии базового счета" (notification_basic_accnt) с ссылкой для скачивания
    # :assert: В параметрах заявки сохранен параметр "Лист архива по контракту базового счета" (page_archive) с ссылкой для скачивания

    # :newpage: #######################################################################################################

    # :step: Нажимаем кнопку "Далее" на форме "Выбор получателя платежной карточки" с предзаполненным "Получатель" = "Владелец счета"

    # :newpage: #######################################################################################################

    # :step: устанавливаем флаг "Выдача платежной карточки оформлена в заявлении-анкете" на форме "ВЫДАЧА ПЛАТЕЖНОЙ КАРТОЧКИ"
    # :step: Нажимаем на кнопку "Завершить выдачу карточки"

    # :newpage: #######################################################################################################

    # :assert: на форме "Подготовка документов к передаче на хранение" в списке документов для хранения есть "Заявление-анкета на оформление платежной карточки" и "Заявление на открытие базового счета"
    # :assert: Присутствует текст "Передайте подготовленные документы в адрес ОСБПК УСРО ДРиСРБ"
    # :assert: Присутствует текст "Важно! Ответственность за правильность оформления и наличие всех необходимых документов по заявке несёт работник банка, который подтверждал оформление документов в ходе работы с заявкой и/или подтверждал их готовность в настоящей форме"
    # :step: устанавливаем флаг "Документы по заявке подготовлены"
    # :step: Нажимаем на кнопку "Далее"
    # :assert: заявка завершается исполнением, статус "Карточка выдана"
    # :assert: ФОРПОСТ. Открылся контракт на продукте/Варианте BASE_ACCNT_CARD_INSTANT/RS_VIP_BELCART_PREMIUM

    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)



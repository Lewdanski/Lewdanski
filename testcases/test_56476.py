# 56476 Доработка процесса обновления в ЦСВКВ справочника «Ценные бумаги», процесса создания заявки на изменение цен покупки/продажи ценных бумаг, запроса по передаче информации в дилинг и на сайт банка

@pytest.mark.skip(reason="Template")
def test_56476_1(app, credo_db, forpost_db):
    """
    {#
        :id:                56476_1
        :priority:          Средний
        :module:            Ядро/Курсы
        :description:       Проверка добавления новых полей в справочники "Ценные бумаги" и "Типы ценных бумаг"
        :precondition:      Пользователь admin авторизован
        :comment:           С помощью SoapUI создали имитацию сервиса получения курсов ценных бумаг из Diling - ответа на запрос GetBonds (возвращаем ответ из оригинальной системы, полученный запросом из ServMoney, т.к. доступ к Diling есть только оттуда). Пример файла ответа прикреплен к задаче по тестированию
        :source_point:      RM56476_Ф_01_Приложение_1_Приложение_2;
        :tc_type:           +
        :db_env:            БД: Node9_Rates;
        :client_env:        Google Chrome 94 [Windows 10; openSuSE Linux Leap 15.3]
        :client_env:        Mozilla Firefox 92 [Windows 10; openSuSE Linux Leap 15.3]
        :client_env:        Microsoft EDGE 94 [Windows 10]
        :time_of_test:      60
        :precondition_time: 10
        :count_of_check:    9
    }#
        :param: app: фикстура приложения
        :param: credo_db: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = ''
    VARIANT = ''

    # :newpage: #######################################################################################################

    # :step: Переходим во вкладку "Типы ценных бумаг"
    # :assert: В таблице содержится столбец "Группа подразделений" и соответствует значению bond_type.BT_AGG_ID
    # :assert: В таблице содержится столбец "Тип курса для цены покупки" и соответствует значению bond_type.BT_RT_BUY
    # :assert: В таблице содержится столбец "Тип курса для цены продажи" и соответствует значению bond_type.BT_RT_SELL
    # :assert: В таблице содержится столбец "Алгоритм для расчета цены покупки" и соответствует значению bond_type.BT_ALG_BUY
    # :assert: В таблице содержится столбец "Алгоритм для расчета цены продажи" и соответствует значению bond_type.BT_ALG_SELL

    # :newpage: #######################################################################################################

    # :step: Переходим во вкладку "Ценные бумаги"
    # :assert: В таблице содержится столбец "Дата выпуска" и соответствует значению bond.BOND_ISSUING_DATE = значению "IssueDate" из ответа на запрос GetBonds
    # :assert: В таблице содержится столбец "Дата погашения" и соответствует значению bond.BOND_EXPIRATION_DATE = значению "ExpirationDate" из ответа на запрос GetBonds
    # :assert: В таблице содержится столбец "Текущая стоимость" и соответствует значению bond.BOND_CURRENT_VALUE = значению "CurrentValue" из ответа на запрос GetBonds
    # :assert: В таблице содержится столбец "Сумма процентного дохода" и соответствует значению bond.BOND_INTEREST_INCOME = значению "InterestIncome" из ответа на запрос GetBonds


    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


@pytest.mark.skip(reason="Template")
def test_56476_2(app, credo_db, forpost_db):
    """
    {#
        :id:                56476_2
        :priority:          Средний
        :module:            Ценные бумаги
        :description:       Проверка добавления новых полей на форме установки котировок ценных бумаг
        :precondition:      Пользователь admin авторизован
        :precondition:      У пользователя admin присутствуют все роли и права доступа
        :precondition:      Для ЦБ "ВГДО 247 1000 EUR" отсутствуют предыдущие значения
        :precondition:      Для ЦБ "ВГДО 251 1000 EUR" присутствуют предыдущие значения
        :source_point:      RM56476_Ф_01;
        :tc_type:           +
        :db_env:            БД: Node9_Rates;
        :client_env:        Google Chrome 94 [Windows 10; openSuSE Linux Leap 15.3]
        :client_env:        Mozilla Firefox 92 [Windows 10; openSuSE Linux Leap 15.3]
        :client_env:        Microsoft EDGE 94 [Windows 10]
        :time_of_test:      60
        :precondition_time: 10
        :count_of_check:    31
    }#
        :param: app: фикстура приложения
        :param: credo_db: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'RateAndPriceChange'
    VARIANT = 'BondChange'

    # :newpage: #######################################################################################################

    # :step: Переходим во вкладку "Список заявок"
    # :step: Нажимаем на кнопку "Новая заявка"
    # :step: В поле "Вариант" выбираем значение
    value = 'Установка котировок ЦБ'
    # :step: Нажимаем на кнопку "Создать заявку"

    # :newpage: #######################################################################################################

    # :step: В поле "Сотрудник ОНО для ввода котировок" выбираем значение
    value = 'Administrator User'
    # :step: В поле "Ценные бумаги" выбираем значения
    value = 'ВГДО 247 1000 EUR'
    value = 'ВГДО 251 1000 EUR'
    # :step: Нажимаем на кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: В таблице содержится столбец "Название ЦБ". Поле не редактируемое, заполняется значением из справочника ЦБ
    # :assert: В таблице содержится столбец "Валюта ЦБ". Поле не редактируемое, заполняется значением из справочника ЦБ
    # :assert: В таблице содержится столбец "Запрет покупк.". Поле редактируемое, заполняется последним сохранённым значением и соответствует значению bond_rate_history.BRH_BOND_OPERATION_TABU (заполняется значениями 1 или 0)
    # :assert: В таблице содержится столбец "Запрет прод.". Поле редактируемое, заполняется последним сохранённым значением и соответствует значению bond_rate_history.BRH_BOND_OPERATION_TABU (заполняется значениями 1 или 0)
    # :assert: "Ставка доходности (покупка)" для ЦБ "ВГДО 247 1000 EUR" не заполнено. Поле редактируемое
    # :assert: "Ставка доходности (покупка)" для ЦБ "ВГДО 251 1000 EUR" заполнилось последним сохранённым значением и соответствует значению bond_rate_history.BRH_BOND_PROFIT
    # :assert: "Ставка доходности (продажа)" для ЦБ "ВГДО 247 1000 EUR" не заполнено. Поле редактируемое
    # :assert: "Ставка доходности (продажа)" для ЦБ "ВГДО 251 1000 EUR" заполнилось последним сохранённым значением и соответствует значению bond_rate_history.BRH_BOND_PROFIT
    # :assert: В таблице содержится столбец "Цена покупки (в вал. ЦБ)". Поле редактируемое, рассчитывается по соответствующему алгоритму и соответствует значению bond_rate_history.BRH_BOND_RATE_HISTORY
    # :assert: В таблице содержится столбец "Цена продажи (в вал. ЦБ)". Поле редактируемое, рассчитывается по соответствующему алгоритму и соответствует значению bond_rate_history.BRH_BOND_RATE_HISTORY
    # :assert: "Валюта расчета" для ЦБ "ВГДО 247 1000 EUR" не заполнено. Поле редактируемое
    # :assert: "Валюта расчета" для ЦБ "ВГДО 251 1000 EUR" заполнилось последним сохранённым значением
    # :assert: В таблице содержится столбец "Цена покупки (в вал.расчета)". Поле редактируемое, рассчитывается по соответствующей формуле
    # :assert: В таблице содержится столбец "Цена продажи (в вал.расчета)". Поле редактируемое, рассчитывается по соответствующей формуле
    # :assert: В таблице содержится столбец "Текущая стоимость". Поле не редактируемое, заполняется значением из справочника ЦБ
    # :assert: Сортировка в таблице выполняется по полю "Название ЦБ"


    # :step: В поле "Валюта расчёта" устанавливаем значение
    value = 'BYN'
    # :step: Устанавливаем метку "запрет покупк." (пробелом)
    # :assert: поле  bond_rate_history.BRH_BOND_OPERATION_TABU заполнено значением "1"
    # :assert: Метка в чек-боксе "запрет покупк." установлена. Чек-бокс "запрет прод." неактивен. Поля "Ставка доходности (покупка), "Цена покупки (в вал.ЦБ) и "Цена покупки (в вал. расчёта) заполнились нулями и недоступны для редактирования
    # :step: Снимаем метку "запрет покупк." (пробелом)
    # :assert: поле  bond_rate_history.BRH_BOND_OPERATION_TABU заполнено значением "0"
    # :assert: Метка в чек-боксе "запрет покупк." снята. Чек-бокс "запрет прод." активен


    # :step: Устанавливаем метку "запрет прод." (пробелом)
    # :assert: поле  bond_rate_history.BRH_BOND_OPERATION_TABU заполнено значением "1"
    # :assert: Метка в чек-боксе "запрет прод." установлена. Чек-бокс "запрет покупк." неактивен. Поля "Ставка доходности (продажа), "Цена продажи (в вал.ЦБ) и "Цена продажи (в вал. расчёта) заполнились нулями и недоступны для редактирования
    # :step: Снимаем метку "запрет прод." (пробелом)
    # :assert: поле  bond_rate_history.BRH_BOND_OPERATION_TABU заполнено значением "0"
    # :assert: Метка в чек-боксе "запрет прод." снята. Чек-бокс "запрет покупк." активен


    # :step: В поле "Ставка доходности (покупка) вводим значение
    value = '4'
    # :assert: Поля "Цена покупки (в вал.ЦБ)" и "Цена покупки (в вал.расчета)" пересчитались значения  по соответствующей ЦБ
    # :step: В поле "Ставка доходности (продажи) вводим значение
    value = '5'
    # :assert: Поля "Цена продажи (в вал.ЦБ)" и "Цена продажи (в вал.расчета)" пересчитались значения  по соответствующей ЦБ


    # :step: В поле "Ставка доходности (покупка)" изменяем значение
    value = '44'
    # :assert: Поля "Цена покупки (в вал.ЦБ)" и "Цена покупки (в вал.расчета)" пересчитались значения  по соответствующей ЦБ
    # :step: В поле "Ставка доходности (продажа)" изменяем значение
    value = '55'
    # :assert: Поля "Цена продажи (в вал.ЦБ)" и "Цена продажи (в вал.расчета)" пересчитались значения  по соответствующей ЦБ


    # :step: В поле "Валюта расчёта" изменяем значение
    value = 'USD'
    # :assert: Поля "Цена продажи (в вал.расчета)" и "Цена продажи (в вал.расчета)" пересчитались значения  по соответствующей ЦБ


    # :step: В поле "Цена покупки (в вал.ЦБ)" изменяем значение
    value = '900'
    # :assert: Поле "Цена покупки (в вал.расчета)" пересчиталось по соответствующей ЦБ
    # :step: В поле "Цена продажи (в вал.ЦБ)" изменяем значение
    value = '1000'
    # :assert: Поле "Цена продажи (в вал.расчета)" пересчиталось по соответствующей ЦБ


    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


@pytest.mark.skip(reason="Template")
def test_56476_3(app, credo_db, forpost_db):
    """
    {#
        :id:                56476_3
        :priority:          Средний
        :module:            Ценные бумаги
        :description:       Проверка требования к распоряжению об установке котировок ЦБ
        :precondition:      Пользователь admin авторизован
        :precondition:      У пользователя admin присутствуют все роли и права доступа
        :precondition:      У ЦБ "ВГДО 247" установлен тип ЦБ "6 ВГДО(VGDO)" с приоритетом 6
        :precondition:      У ЦБ "ВГДО 251" установлен тип ЦБ "6 ВГДО(VGDO)" с приоритетом 6
        :precondition:      У ЦБ "ВГДО 254" установлен тип ЦБ "27 auto create name (auto create mnemo 1)" с приоритетом 3
        :precondition:      У ЦБ "ВГДО 262" установлен тип ЦБ "149 auto create name (auto create mnemo)" с приоритетом 1
        :precondition:      В "Списке пользователей" по пользователю и руководителю заполнено поле "Сотрудник"
        :source_point:      RM56476_Ф_02;
        :tc_type:           +
        :db_env:            БД: Node9_Rates;
        :client_env:        Google Chrome 94 [Windows 10; openSuSE Linux Leap 15.3]
        :client_env:        Mozilla Firefox 92 [Windows 10; openSuSE Linux Leap 15.3]
        :client_env:        Microsoft EDGE 94 [Windows 10]
        :time_of_test:      120
        :precondition_time: 30
        :count_of_check:    9
    }#
        :param: app: фикстура приложения
        :param: credo_db: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'RateAndPriceChange'
    VARIANT = 'BondChange'

    # :newpage: #######################################################################################################

    # :step: Переходим во вкладку "Список заявок"
    # :step: Нажимаем на кнопку "Новая заявка"
    # :step: В поле "Вариант" выбираем значение
    value = 'Установка котировок ЦБ'
    # :step: Нажимаем на кнопку "Создать заявку"

    # :newpage: #######################################################################################################

    # :step: В поле "Сотрудник ОНО для ввода котировок" выбираем значение
    value = 'Administrator User'
    # :step: В поле "Ценные бумаги" выбираем значения
    value = 'ВГДО 247 1000 EUR'
    value = 'ВГДО 251 1000 EUR'
    value = 'ВГДО 254 1000 EUR'
    value = 'ВГДО 262 1000 EUR'
    # :step: Нажимаем на кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: У ЦБ ВГДО 247 поля заполнились предыдущими значениями
    # :step: Заполняем поле "Валюта расчета" для ВГДО 254
    value = 'USD'
    # :step: Устанавливаем чек-бокс "Запрет покупк."
    # :step: Заполняем поле "Ставка доходности (продажа)" для ВГДО 254
    value = '9'
    # :step: Заполняем поле "Валюта расчета" для ВГДО 251
    value = 'BYN'
    # :step: Устанавливаем чек-бокс "Запрет прод."
    # :step: Заполняем поле "Ставка доходности (покупка)" для ВГДО 262
    value = '8'
    # :step: Заполняем поле "Ставка доходности (продажа)" для ВГДО 262
    value = '9'
    # :step: Заполняем поле "Валюта расчета" для ВГДО 262
    value = 'BYN'
    # :step: Устанавливаем чек-бокс "Запрет прод."
    # :step: Заполняем поле "Ставка доходности (покупка)" для ВГДО 262
    value = '1'
    # :step: Заполняем поле "Ставка доходности (продажа)" для ВГДО 262
    value = '3'
    # :step: Нажимаем кнопку "Завершить"
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: На странице указания времени начала действия и выбора согласующего и подписывающего заполняем поле "Начало действия курса"
    value = '29:09:2021 17:25'
    # :step: Заполняем поле "Согласующий"
    value = 'Administrator User'
    # :step: Заполняем поле "Подписывающий"
    value = 'Administrator User'
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: На странице согласования цен нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: На странице подписания цен нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: На странице с распоряжением на смену котировок нажимаем кнопку "Скачать"
    # :step: Нажимаем кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :assert: В сформированном распоряжении «Об установлении котировок ЦБ» выводится информация о цене покупки/продажи в валюте расчета
    # :assert: Должность руководителя берётся из справочника пользователей (поле "Сотрудник" в "Списке пользователей") для соответствующего пользователя и выводится под последней таблицей с котировками
    # :assert: Должность исполнителя берётся из справочника пользователей (поле "Сотрудник" в "Списке пользователей") для соответствующего пользователя и выводится внизу страницы под номером дела
    # :assert: В поле "Покупка" для ЦБ ВГДО 254 выводится буква "x"
    # :assert: В поле "Продажа" для ЦБ ВГДО 262 выводится буква "x"
    # :assert: ЦБ с разными типами выводятся в отдельные таблицы, над которыми отражаются название типа ЦБ с порядковым номером таблицы перед названием
    # :assert: Таблицы с разными типами ЦБ расположены в порядке приоритета указанного в справочнике
    # :assert: ЦБ в таблицах отсортированы по номеру выпуска


    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


@pytest.mark.skip(reason="Template")
def test_56476_4(app, credo_db, forpost_db):
    """
    {#
        :id:                56476_4
        :priority:          Средний
        :module:            Ядро/Курсы
        :description:       Проверка изменения формата передачи информации об установленных котировках в "Дилинг ЦБ" (PutBondQuotes)
        :precondition:      Информация об установленных котировках передана в "Дилинг ЦБ"
        :precondition:      В установленных котировках переданных в "Дилинг ЦБ" имеются ЦБ у которых запрещена покупка
        :precondition:      В установленных котировках переданных в "Дилинг ЦБ" имеются ЦБ у которых запрещена продажа
        :precondition:      В установленных котировках переданных в "Дилинг ЦБ" имеются ЦБ у которых не запрещена покупка и продажа
        :source_point:      RM56476_Ф_03_Приложение_3;
        :tc_type:           +
        :db_env:            БД: Node9_Rates;
        :client_env:        Google Chrome 94 [Windows 10; openSuSE Linux Leap 15.3]
        :client_env:        Mozilla Firefox 92 [Windows 10; openSuSE Linux Leap 15.3]
        :client_env:        Microsoft EDGE 94 [Windows 10]
        :time_of_test:      120
        :precondition_time: 60
        :count_of_check:    7
    }#
        :param: app: фикстура приложения
        :param: credo_db: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = ''
    VARIANT = ''

    # :newpage: #######################################################################################################

    # :step: В app.log выполняем поиск по тексту "<tem:PutBondQuotes>"
    # :assert: В запросе PutBondQuotes присутствует "PayPriceBuy" = Цена покупки в валюте расчета
    # :assert: В запросе PutBondQuotes присутствует "PayPriceSell" = Цена продажи в валюте расчета
    # :assert: В запросе PutBondQuotes присутствует "PayYield" = Ставка доходности к погашению при продаже банком
    # :assert: В запросе PutBondQuotes присутствует "RateBuy" = Курс покупки для валюты номинала
    # :assert: В запросе PutBondQuotes присутствует "RateSell" = Курс продажи для валюты номинала
    # :assert: У ЦБ где запрещена покупка не передаются значения "PriceBuy", "PayPriceBuy" и "Yield" в PutBondQuotes
    # :assert: У ЦБ где запрещена продажа не передаются значения "PriceSale", "PayPriceSale" и "PayYield" в PutBondQuotes


    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


@pytest.mark.skip(reason="Template")
def test_56476_5(app, credo_db, forpost_db):
    """
    {#
        :id:                56476_5
        :priority:          Средний
        :module:            Ядро/Курсы
        :description:       Проверка изменения формата передачи информации об установленных котировках на сайт банка ITW/GetBondRateHistory
        :precondition:      В установленных котировках, запрашиваемых ITW/GetBondRateHistory, имеются ЦБ, у которых запрещена покупка
        :precondition:      В установленных котировках, запрашиваемых ITW/GetBondRateHistory, имеются ЦБ, у которых запрещена продажа
        :precondition:      В установленных котировках, запрашиваемых ITW/GetBondRateHistory, имеются ЦБ, у которых не запрещена покупка и продажа
        :comment:           Для проверки запроса используем Postman
        :comment:           Запрос GetBondRateHistory прикреплен к задаче
        :source_point:      RM56476_Ф_04;
        :tc_type:           +
        :db_env:            БД: Node9_Rates;
        :client_env:        Google Chrome 94 [Windows 10; openSuSE Linux Leap 15.3]
        :client_env:        Mozilla Firefox 92 [Windows 10; openSuSE Linux Leap 15.3]
        :client_env:        Microsoft EDGE 94 [Windows 10]
        :time_of_test:      40
        :precondition_time: 20
        :count_of_check:    8
    }#
        :param: app: фикстура приложения
        :param: credo_db: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = ''
    VARIANT = ''

    # :newpage: #######################################################################################################

    # :step: Отправляем запрос у которого установлено значение BondType = '6,27', OperationType = 'ALL', Date = 2021.09.30
    # :assert: В ответе присутствуют котировки ЦБ покупки и продажи у которых BondType = "6" и BondType = "27" действующие на дату = 30.09.2021
    # :assert: В ответе присутствует type = идентификатор типа ЦБ, name = наименование, numberIssue = номер выпуска ЦБ, rate = цена в валюте расчета
    # :assert: В ответе у сделок покупки operationType = "buy", paymentCur = валюте расчёта, profit = ставке доходности (покупка)
    # :assert: В ответе у сделок продажи operationType = "sell", paymentCur = валюте расчёта, profit = ставке доходности (продажа)
    # :assert: В ответе отсутствуют сделки покупки у которых установлен признак "Запрет покупки"
    # :assert: В ответе отсутствуют сделки продажи у которых установлен признак "Запрет продажи"
    # :step: Отправляем запрос у которого установлено значение BondType = '6', OperationType = 'buy', Date = 2021.09.30
    # :assert: В ответе присутствуют котировки ЦБ покупки у которых BondType = "6" действующие на дату = 30.09.2021
    # :step: Отправляем запрос у которого установлено значение BondType = '27', OperationType = 'sell', Date = 2021.09.30
    # :assert: В ответе присутствуют котировки ЦБ продажи у которых BondType = "27" действующие на дату = 30.09.2021


    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


@pytest.mark.skip(reason="Template")
def test_56476_6(app, credo_db, forpost_db):
    """
    {#
        :id:                56476_6
        :priority:          Средний
        :module:            Ценные бумаги
        :description:       Проверка алгоритмов расчёта цены покупки/продажи в валюте номинала
        :precondition:      Пользователь admin авторизован
        :precondition:      У пользователя admin присутствуют все роли и права доступа
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 6, алгоритм для расчета цены покупки установлен "Расчет цены с использованием суммы процентного дохода и ставки доходности"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 6, алгоритм для расчета цены продажи установлен "Расчет цены с использованием суммы процентного дохода и ставки доходности"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 6, тип курса для цены покупки установлен "Конверсия иностранной наличной валюты за иностранную наличную валюту (BaseCrnc != ‘BYN’)", группа подразделений "Банк"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 6, тип курса для цены продажи установлен "Конверсия иностранной наличной валюты за иностранную наличную валюту (BaseCrnc != ‘BYN’)", группа подразделений "Банк"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 27, алгоритм для расчета цены покупки установлен "Цена покупки/продажи устанавливается равной текущей стоимости для соответствующей ЦБ"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 27, алгоритм для расчета цены продажи установлен "Цена покупки/продажи устанавливается равной текущей стоимости для соответствующей ЦБ"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 27, тип курса для цены покупки установлен "Покупка иностранной наличной валюты за нац. наличную валюту (BaseCrnc = ‘BYN’)", группа подразделений "Банк"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 27, тип курса для цены продажи установлен "Продажа иностранной наличной валюты за нац. наличную валюту (BaseCrnc = ‘BYN’)", группа подразделений "Банк"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 149, алгоритм для расчета цены покупки установлен "Цена покупки/продажи заполняется последним сохраненным значением цены покупки/продажи для соответствующей ЦБ"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 149, алгоритм для расчета цены продажи установлен "Цена покупки/продажи заполняется последним сохраненным значением цены покупки/продажи для соответствующей ЦБ"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 149, тип курса для цены покупки установлен "Покупка иностранной наличной валюты за нац. наличную валюту (BaseCrnc = ‘BYN’)", группа подразделений "Банк"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 149, тип курса для цены продажи установлен "Продажа иностранной наличной валюты за нац. наличную валюту (BaseCrnc = ‘BYN’)", группа подразделений "Банк"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 777, алгоритм для расчета цены покупки установлен "Цена покупки/продажи по умолчанию не заполняется"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 777, алгоритм для расчета цены продажи установлен "Цена покупки/продажи по умолчанию не заполняется"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 777, тип курса для цены покупки установлен "Конверсия иностранной наличной валюты за иностранную наличную валюту (BaseCrnc != ‘BYN’)", группа подразделений "Банк"
        :precondition:      Для ЦБ с идентификатором типа ЦБ в Diling = 777, тип курса для цены продажи установлен "Конверсия иностранной наличной валюты за иностранную наличную валюту (BaseCrnc != ‘BYN’)", группа подразделений "Банк"
        :precondition:      У ЦБ "ВГДО 247" установлен тип ЦБ "6 ВГДО(VGDO)"
        :precondition:      У ЦБ "Облигации ОАО"Белгазпромбанк" дисконтные 47" установлен тип ЦБ "27 auto create name (auto create mnemo 1)"
        :precondition:      У ЦБ "Обл. ЗАО "СФО "Центр секьюритизации" процентные 2" установлен тип ЦБ "149 auto create name (auto create mnemo)"
        :precondition:      У ЦБ "vgdo 152 Обл. ЗАО "СФО "Центр секьюритизации" процентные 2" установлен тип ЦБ "777 Конверсия USD/EUR (777type)"
        :precondition:      Установлен курс конверсии EUR/USD для группы подразделений "Банк"
        :precondition:      Текущая стоимость для ЦБ "Облигации ОАО"Белгазпромбанк" дисконтные 47" = 9667.29
        :comment:           Текущая дата "27.09.2021", D1 = 825, D2 = 268, коэффициент = D1/366 + D2/365 = 2,98
        :comment:           Дата выпуска ЦБ "ВГДО 247" = 24.09.2021
        :comment:           Дата погашения ЦБ "ВГДО 247" = 24.09.2024
        :comment:           Номинал для ЦБ "ВГДО 247" = 10000
        :comment:           Сумма процентного дохода для ЦБ "ВГДО 247" = 1
        :comment:           Курс конверсии EUR/USD = 1,1734
        :source_point:      RM56476_Приложение_4_Приложение_5;
        :tc_type:           +
        :db_env:            БД: Node9_Rates;
        :client_env:        Google Chrome 94 [Windows 10; openSuSE Linux Leap 15.3]
        :client_env:        Mozilla Firefox 92 [Windows 10; openSuSE Linux Leap 15.3]
        :client_env:        Microsoft EDGE 94 [Windows 10]
        :time_of_test:      120
        :precondition_time: 60
        :count_of_check:    12
    }#
        :param: app: фикстура приложения
        :param: credo_db: фикстура базы данных
    """

    value = ''
    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)


    PRODUCT = 'RateAndPriceChange'
    VARIANT = 'BondChange'

    # :newpage: #######################################################################################################

    # :step: Переходим во вкладку "Список заявок"
    # :step: Нажимаем на кнопку "Новая заявка"
    # :step: В поле "Вариант" выбираем значение
    value = 'Установка котировок ЦБ'
    # :step: Нажимаем на кнопку "Создать заявку"

    # :newpage: #######################################################################################################

    # :step: В поле "Сотрудник ОНО для ввода котировок" выбираем значение
    value = 'Administrator User'
    # :step: В поле "Ценные бумаги" выбираем значения
    value = 'ВГДО 247 1000 EUR'
    value = 'Облигации ОАО"Белгазпромбанк" дисконтные 47 10000 BYN'
    value = 'Обл. ЗАО "СФО "Центр секьюритизации" процентные 2 1000 BYN'
    value = 'vgdo 152 Обл. ЗАО "СФО "Центр секьюритизации" процентные 2 1000 USD'
    # :step: Нажимаем на кнопку "Завершить"

    # :newpage: #######################################################################################################

    # :step: Заполняем поле "Валюта расчета" для "vgdo 152 Обл. ЗАО "СФО "Центр секьюритизации" процентные 2"
    value = 'USD'
    # :step: Заполняем поле "Ставка доходности (покупка)" для "vgdo 152 Обл. ЗАО "СФО "Центр секьюритизации" процентные 2"
    value = '1'
    # :assert: Поля "Цена покупки (в вал.ЦБ)" и "Цена покупки (в вал.расчета)" не заполнились
    # :step: Заполняем поле "Ставка доходности (продажа)" для "vgdo 152 Обл. ЗАО "СФО "Центр секьюритизации" процентные 2"
    value = '2'
    # :assert: Поля "Цена продажи (в вал.ЦБ)" и "Цена продажи (в вал.расчета)" не заполнились


    # :step: Заполняем поле "Валюта расчета" для "ВГДО 247"
    value = 'EUR'
    # :step: Заполняем поле "Ставка доходности (покупка)" для "ВГДО 247"
    value = '3'
    # :assert: Поля "Цена покупки (в вал.ЦБ)" и "Цена покупки (в вал.расчета)" рассчитались по формуле (100*(10000+1)/(100+3*2,98) = 9180,28
    # :step: Заполняем поле "Ставка доходности (продажа)" для "ВГДО 247"
    value = '4'
    # :assert: Поля "Цена продажи (в вал.ЦБ)" и "Цена продажи (в вал.расчета)" рассчитались по формуле (100*(10000+1)/(100+4*2,98) = 8935,84
    # :step: Заполняем поле "Валюта расчета" для "ВГДО 247"
    value = 'USD'
    # :assert: Поле "Цена покупки (в вал.расчета)" рассчиталось по формуле (9180,28*1,1734) = 10772,14
    # :assert: Поле "Цена продажи (в вал.расчета)" рассчиталось по формуле (8935,84*1,1734) = 10485,31


    # :step: Заполняем поле "Валюта расчета" для "Обл. ЗАО "СФО "Центр секьюритизации" процентные 2"
    value = 'BYN'
    # :assert: Поля "Цена покупки (в вал.ЦБ)" и "Цена покупки (в вал.расчета)" заполнились последним сохранённым значением для покупки
    # :assert: Поля "Цена продажи (в вал.ЦБ)" и "Цена продажи (в вал.расчета)" заполнились последним сохранённым значением для продажи
    # :step: Изменяем значение "Ставка доходности (покупка)" для "Обл. ЗАО "СФО "Центр секьюритизации" процентные 2"
    value = '5'
    # :assert: Поля "Цена покупки (в вал.ЦБ)" и "Цена покупки (в вал.расчета)" не изменились
    # :step: Изменяем значение "Ставка доходности (продажа)" для "Обл. ЗАО "СФО "Центр секьюритизации" процентные 2"
    value = '6'
    # :assert: Поля "Цена продажи (в вал.ЦБ)" и "Цена продажи (в вал.расчета)" не изменились


    # :step: Заполняем поле "Валюта расчета" для "Облигации ОАО"Белгазпромбанк" дисконтные 47"
    value = 'BYN'
    # :step: Заполняем поле "Ставка доходности (покупка)" для "Облигации ОАО"Белгазпромбанк" дисконтные 47"
    value = '7'
    # :assert: Поля "Цена покупки (в вал.ЦБ)" и "Цена покупки (в вал.расчета)" заполнились текущей стоимостью = 9667.29
    # :step: Заполняем поле "Ставка доходности (продажа)" для "Облигации ОАО"Белгазпромбанк" дисконтные 47"
    value = '8'
    # :assert: Поля "Цена продажи (в вал.ЦБ)" и "Цена продажи (в вал.расчета)" заполнились текущей стоимостью = 9667.29


    logrecord = "{time} [{module}] -- [{method}]".format(time=datetime.now().strftime("%H:%M:%S,%f"), module=(os.path.basename(__file__)), method=(sys._getframe().f_code.co_name))
    print(logrecord)